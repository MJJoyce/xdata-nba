/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo.structs;  
@SuppressWarnings("all")
public class GameStats extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GameStats\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo.structs\",\"fields\":[{\"name\":\"gameSummary\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"GameSummary\",\"fields\":[{\"name\":\"gameDateEst\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gameSequence\",\"type\":\"int\",\"default\":0},{\"name\":\"gameId\",\"type\":\"int\",\"default\":0},{\"name\":\"gameStatusId\",\"type\":\"int\",\"default\":0},{\"name\":\"gameStatusText\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gameCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"homeTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"visitorTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"season\",\"type\":\"int\",\"default\":0},{\"name\":\"livePeriod\",\"type\":\"int\",\"default\":0},{\"name\":\"livePcTime\",\"type\":\"int\",\"default\":0},{\"name\":\"natlTvBroadcasterAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"livePeriodTimeBcast\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"whStatus\",\"type\":\"int\",\"default\":0}]}],\"default\":null},{\"name\":\"lineScore\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LineScore\",\"fields\":[{\"name\":\"gameDateEst\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gameSequence\",\"type\":\"int\",\"default\":0},{\"name\":\"gameId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"teamCityName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"teamWinsLosses\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ptsQtr1\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsQtr2\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsQtr3\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsQtr4\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsOt1\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsOt2\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsOt3\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsOt4\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsOt5\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsOt6\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsOt7\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsOt8\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsOt9\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsOt10\",\"type\":\"int\",\"default\":0},{\"name\":\"pts\",\"type\":\"int\",\"default\":0}]}],\"default\":null},{\"name\":\"seasonSeries\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"SeasonSeries\",\"fields\":[{\"name\":\"gameId\",\"type\":\"int\",\"default\":0},{\"name\":\"homeTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"visitorTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"gameDateEst\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"homeTeamWins\",\"type\":\"int\",\"default\":0},{\"name\":\"homeTeamLosses\",\"type\":\"int\",\"default\":0},{\"name\":\"seriesLeader\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"lastMeeting\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"LastMeeting\",\"fields\":[{\"name\":\"gameId\",\"type\":\"int\",\"default\":0},{\"name\":\"lastGameId\",\"type\":\"int\",\"default\":0},{\"name\":\"lastGameDateEst\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameHomeTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"lastGameHomeTeamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameHomeTeamName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameHomeTeamAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameHomeTeamPoints\",\"type\":\"int\",\"default\":0},{\"name\":\"lastGameVisitorTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"lastGameVisitorTeamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameVisitorTeamName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameVisitorTeamCity1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameVisitorTeamPoints\",\"type\":\"int\",\"default\":0}]}],\"default\":null},{\"name\":\"playerStats\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"PlayerStats\",\"fields\":[{\"name\":\"gameId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"teamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"playerId\",\"type\":\"int\",\"default\":0},{\"name\":\"playerName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"startPosition\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"comment\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"min\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fgm\",\"type\":\"int\",\"default\":0},{\"name\":\"fga\",\"type\":\"int\",\"default\":0},{\"name\":\"fgPct\",\"type\":\"long\",\"default\":0},{\"name\":\"fg3m\",\"type\":\"int\",\"default\":0},{\"name\":\"fg3a\",\"type\":\"int\",\"default\":0},{\"name\":\"fg3Pct\",\"type\":\"long\",\"default\":0},{\"name\":\"ftm\",\"type\":\"int\",\"default\":0},{\"name\":\"fta\",\"type\":\"int\",\"default\":0},{\"name\":\"ftPct\",\"type\":\"int\",\"default\":0},{\"name\":\"oreb\",\"type\":\"int\",\"default\":0},{\"name\":\"dreb\",\"type\":\"int\",\"default\":0},{\"name\":\"reb\",\"type\":\"int\",\"default\":0},{\"name\":\"ast\",\"type\":\"int\",\"default\":0},{\"name\":\"stl\",\"type\":\"int\",\"default\":0},{\"name\":\"blk\",\"type\":\"int\",\"default\":0},{\"name\":\"to\",\"type\":\"int\",\"default\":0},{\"name\":\"pf\",\"type\":\"int\",\"default\":0},{\"name\":\"pts\",\"type\":\"int\",\"default\":0},{\"name\":\"plusMinus\",\"type\":\"int\",\"default\":0}]}],\"default\":null},{\"name\":\"teamStats\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"TeamStats\",\"fields\":[{\"name\":\"gameId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"teamAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"teamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"min\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fgm\",\"type\":\"int\",\"default\":0},{\"name\":\"fga\",\"type\":\"int\",\"default\":0},{\"name\":\"fgPct\",\"type\":\"long\",\"default\":0},{\"name\":\"fg3m\",\"type\":\"int\",\"default\":0},{\"name\":\"fg3a\",\"type\":\"int\",\"default\":0},{\"name\":\"fg3Pct\",\"type\":\"long\",\"default\":0},{\"name\":\"ftm\",\"type\":\"int\",\"default\":0},{\"name\":\"fta\",\"type\":\"int\",\"default\":0},{\"name\":\"ftPct\",\"type\":\"int\",\"default\":0},{\"name\":\"oreb\",\"type\":\"int\",\"default\":0},{\"name\":\"dreb\",\"type\":\"int\",\"default\":0},{\"name\":\"reb\",\"type\":\"int\",\"default\":0},{\"name\":\"ast\",\"type\":\"int\",\"default\":0},{\"name\":\"stl\",\"type\":\"int\",\"default\":0},{\"name\":\"blk\",\"type\":\"int\",\"default\":0},{\"name\":\"to\",\"type\":\"int\",\"default\":0},{\"name\":\"pf\",\"type\":\"int\",\"default\":0},{\"name\":\"pts\",\"type\":\"int\",\"default\":0},{\"name\":\"plusMinus\",\"type\":\"int\",\"default\":0}]}],\"default\":null},{\"name\":\"otherStats\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"OtherStats\",\"fields\":[{\"name\":\"leagueId\",\"type\":\"int\",\"default\":0},{\"name\":\"seasonId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"teamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ptsPaint\",\"type\":\"int\",\"default\":0},{\"name\":\"pts2ndChance\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsFb\",\"type\":\"long\",\"default\":0},{\"name\":\"largestLead\",\"type\":\"int\",\"default\":0},{\"name\":\"leadChanges\",\"type\":\"int\",\"default\":0},{\"name\":\"timesTied\",\"type\":\"long\",\"default\":0}]}],\"default\":null},{\"name\":\"officials\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Officials\",\"fields\":[{\"name\":\"officialId\",\"type\":\"int\",\"default\":0},{\"name\":\"firstName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"jerseyNum\",\"type\":\"int\",\"default\":0}]}],\"default\":null},{\"name\":\"gameInfo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"GameInfo\",\"fields\":[{\"name\":\"gameDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"attendance\",\"type\":\"int\",\"default\":0},{\"name\":\"gameTime\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"inactivePlayers\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"InactivePlayers\",\"fields\":[{\"name\":\"playerId\",\"type\":\"int\",\"default\":0},{\"name\":\"firstName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"jerseyNum\",\"type\":\"int\",\"default\":0},{\"name\":\"teamId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"teamName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"teamAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"availableVideo\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"AvailableVideo\",\"fields\":[{\"name\":\"videoAvailableFlag\",\"type\":\"int\",\"default\":0}]}],\"default\":null},{\"name\":\"gameId\",\"type\":\"int\",\"default\":0},{\"name\":\"rangeType\",\"type\":\"int\",\"default\":0},{\"name\":\"startPeriod\",\"type\":\"int\",\"default\":0},{\"name\":\"startRange\",\"type\":\"int\",\"default\":0},{\"name\":\"endPeriod\",\"type\":\"int\",\"default\":0},{\"name\":\"endRange\",\"type\":\"int\",\"default\":0}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    GAME_SUMMARY(0, "gameSummary"),
    LINE_SCORE(1, "lineScore"),
    SEASON_SERIES(2, "seasonSeries"),
    LAST_MEETING(3, "lastMeeting"),
    PLAYER_STATS(4, "playerStats"),
    TEAM_STATS(5, "teamStats"),
    OTHER_STATS(6, "otherStats"),
    OFFICIALS(7, "officials"),
    GAME_INFO(8, "gameInfo"),
    INACTIVE_PLAYERS(9, "inactivePlayers"),
    AVAILABLE_VIDEO(10, "availableVideo"),
    GAME_ID(11, "gameId"),
    RANGE_TYPE(12, "rangeType"),
    START_PERIOD(13, "startPeriod"),
    START_RANGE(14, "startRange"),
    END_PERIOD(15, "endPeriod"),
    END_RANGE(16, "endRange"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "gameSummary",
  "lineScore",
  "seasonSeries",
  "lastMeeting",
  "playerStats",
  "teamStats",
  "otherStats",
  "officials",
  "gameInfo",
  "inactivePlayers",
  "availableVideo",
  "gameId",
  "rangeType",
  "startPeriod",
  "startRange",
  "endPeriod",
  "endRange",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return GameStats._ALL_FIELDS.length;
  }

  private gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary gameSummary;
  private gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore lineScore;
  private gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries seasonSeries;
  private gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting lastMeeting;
  private gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats playerStats;
  private gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats teamStats;
  private gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats otherStats;
  private gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials officials;
  private gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo gameInfo;
  private gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers inactivePlayers;
  private gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo availableVideo;
  private int gameId;
  private int rangeType;
  private int startPeriod;
  private int startRange;
  private int endPeriod;
  private int endRange;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gameSummary;
    case 1: return lineScore;
    case 2: return seasonSeries;
    case 3: return lastMeeting;
    case 4: return playerStats;
    case 5: return teamStats;
    case 6: return otherStats;
    case 7: return officials;
    case 8: return gameInfo;
    case 9: return inactivePlayers;
    case 10: return availableVideo;
    case 11: return gameId;
    case 12: return rangeType;
    case 13: return startPeriod;
    case 14: return startRange;
    case 15: return endPeriod;
    case 16: return endRange;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: gameSummary = (gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary)(value); break;
    case 1: lineScore = (gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore)(value); break;
    case 2: seasonSeries = (gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries)(value); break;
    case 3: lastMeeting = (gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting)(value); break;
    case 4: playerStats = (gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats)(value); break;
    case 5: teamStats = (gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats)(value); break;
    case 6: otherStats = (gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats)(value); break;
    case 7: officials = (gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials)(value); break;
    case 8: gameInfo = (gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo)(value); break;
    case 9: inactivePlayers = (gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers)(value); break;
    case 10: availableVideo = (gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo)(value); break;
    case 11: gameId = (java.lang.Integer)(value); break;
    case 12: rangeType = (java.lang.Integer)(value); break;
    case 13: startPeriod = (java.lang.Integer)(value); break;
    case 14: startRange = (java.lang.Integer)(value); break;
    case 15: endPeriod = (java.lang.Integer)(value); break;
    case 16: endRange = (java.lang.Integer)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'gameSummary' field.
   */
  public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary getGameSummary() {
    return gameSummary;
  }

  /**
   * Sets the value of the 'gameSummary' field.
   * @param value the value to set.
   */
  public void setGameSummary(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary value) {
    this.gameSummary = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'gameSummary' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameSummaryDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'lineScore' field.
   */
  public gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore getLineScore() {
    return lineScore;
  }

  /**
   * Sets the value of the 'lineScore' field.
   * @param value the value to set.
   */
  public void setLineScore(gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore value) {
    this.lineScore = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'lineScore' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLineScoreDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'seasonSeries' field.
   */
  public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries getSeasonSeries() {
    return seasonSeries;
  }

  /**
   * Sets the value of the 'seasonSeries' field.
   * @param value the value to set.
   */
  public void setSeasonSeries(gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries value) {
    this.seasonSeries = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'seasonSeries' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isSeasonSeriesDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'lastMeeting' field.
   */
  public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting getLastMeeting() {
    return lastMeeting;
  }

  /**
   * Sets the value of the 'lastMeeting' field.
   * @param value the value to set.
   */
  public void setLastMeeting(gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting value) {
    this.lastMeeting = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'lastMeeting' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastMeetingDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'playerStats' field.
   */
  public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats getPlayerStats() {
    return playerStats;
  }

  /**
   * Sets the value of the 'playerStats' field.
   * @param value the value to set.
   */
  public void setPlayerStats(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats value) {
    this.playerStats = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'playerStats' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'teamStats' field.
   */
  public gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats getTeamStats() {
    return teamStats;
  }

  /**
   * Sets the value of the 'teamStats' field.
   * @param value the value to set.
   */
  public void setTeamStats(gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats value) {
    this.teamStats = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'teamStats' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTeamStatsDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'otherStats' field.
   */
  public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats getOtherStats() {
    return otherStats;
  }

  /**
   * Sets the value of the 'otherStats' field.
   * @param value the value to set.
   */
  public void setOtherStats(gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats value) {
    this.otherStats = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'otherStats' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isOtherStatsDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'officials' field.
   */
  public gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials getOfficials() {
    return officials;
  }

  /**
   * Sets the value of the 'officials' field.
   * @param value the value to set.
   */
  public void setOfficials(gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials value) {
    this.officials = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'officials' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isOfficialsDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials value) {
    return isDirty(7);
  }

  /**
   * Gets the value of the 'gameInfo' field.
   */
  public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo getGameInfo() {
    return gameInfo;
  }

  /**
   * Sets the value of the 'gameInfo' field.
   * @param value the value to set.
   */
  public void setGameInfo(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo value) {
    this.gameInfo = value;
    setDirty(8);
  }
  
  /**
   * Checks the dirty status of the 'gameInfo' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameInfoDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo value) {
    return isDirty(8);
  }

  /**
   * Gets the value of the 'inactivePlayers' field.
   */
  public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers getInactivePlayers() {
    return inactivePlayers;
  }

  /**
   * Sets the value of the 'inactivePlayers' field.
   * @param value the value to set.
   */
  public void setInactivePlayers(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers value) {
    this.inactivePlayers = value;
    setDirty(9);
  }
  
  /**
   * Checks the dirty status of the 'inactivePlayers' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isInactivePlayersDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers value) {
    return isDirty(9);
  }

  /**
   * Gets the value of the 'availableVideo' field.
   */
  public gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo getAvailableVideo() {
    return availableVideo;
  }

  /**
   * Sets the value of the 'availableVideo' field.
   * @param value the value to set.
   */
  public void setAvailableVideo(gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo value) {
    this.availableVideo = value;
    setDirty(10);
  }
  
  /**
   * Checks the dirty status of the 'availableVideo' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isAvailableVideoDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo value) {
    return isDirty(10);
  }

  /**
   * Gets the value of the 'gameId' field.
   */
  public java.lang.Integer getGameId() {
    return gameId;
  }

  /**
   * Sets the value of the 'gameId' field.
   * @param value the value to set.
   */
  public void setGameId(java.lang.Integer value) {
    this.gameId = value;
    setDirty(11);
  }
  
  /**
   * Checks the dirty status of the 'gameId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameIdDirty(java.lang.Integer value) {
    return isDirty(11);
  }

  /**
   * Gets the value of the 'rangeType' field.
   */
  public java.lang.Integer getRangeType() {
    return rangeType;
  }

  /**
   * Sets the value of the 'rangeType' field.
   * @param value the value to set.
   */
  public void setRangeType(java.lang.Integer value) {
    this.rangeType = value;
    setDirty(12);
  }
  
  /**
   * Checks the dirty status of the 'rangeType' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isRangeTypeDirty(java.lang.Integer value) {
    return isDirty(12);
  }

  /**
   * Gets the value of the 'startPeriod' field.
   */
  public java.lang.Integer getStartPeriod() {
    return startPeriod;
  }

  /**
   * Sets the value of the 'startPeriod' field.
   * @param value the value to set.
   */
  public void setStartPeriod(java.lang.Integer value) {
    this.startPeriod = value;
    setDirty(13);
  }
  
  /**
   * Checks the dirty status of the 'startPeriod' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isStartPeriodDirty(java.lang.Integer value) {
    return isDirty(13);
  }

  /**
   * Gets the value of the 'startRange' field.
   */
  public java.lang.Integer getStartRange() {
    return startRange;
  }

  /**
   * Sets the value of the 'startRange' field.
   * @param value the value to set.
   */
  public void setStartRange(java.lang.Integer value) {
    this.startRange = value;
    setDirty(14);
  }
  
  /**
   * Checks the dirty status of the 'startRange' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isStartRangeDirty(java.lang.Integer value) {
    return isDirty(14);
  }

  /**
   * Gets the value of the 'endPeriod' field.
   */
  public java.lang.Integer getEndPeriod() {
    return endPeriod;
  }

  /**
   * Sets the value of the 'endPeriod' field.
   * @param value the value to set.
   */
  public void setEndPeriod(java.lang.Integer value) {
    this.endPeriod = value;
    setDirty(15);
  }
  
  /**
   * Checks the dirty status of the 'endPeriod' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isEndPeriodDirty(java.lang.Integer value) {
    return isDirty(15);
  }

  /**
   * Gets the value of the 'endRange' field.
   */
  public java.lang.Integer getEndRange() {
    return endRange;
  }

  /**
   * Sets the value of the 'endRange' field.
   * @param value the value to set.
   */
  public void setEndRange(java.lang.Integer value) {
    this.endRange = value;
    setDirty(16);
  }
  
  /**
   * Checks the dirty status of the 'endRange' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isEndRangeDirty(java.lang.Integer value) {
    return isDirty(16);
  }

  /** Creates a new GameStats RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder();
  }
  
  /** Creates a new GameStats RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder(other);
  }
  
  /** Creates a new GameStats RecordBuilder by copying an existing GameStats instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for GameStats instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GameStats>
    implements org.apache.avro.data.RecordBuilder<GameStats> {

    private gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary gameSummary;
    private gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore lineScore;
    private gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries seasonSeries;
    private gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting lastMeeting;
    private gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats playerStats;
    private gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats teamStats;
    private gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats otherStats;
    private gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials officials;
    private gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo gameInfo;
    private gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers inactivePlayers;
    private gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo availableVideo;
    private int gameId;
    private int rangeType;
    private int startPeriod;
    private int startRange;
    private int endPeriod;
    private int endRange;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing GameStats instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.SCHEMA$);
      if (isValidValue(fields()[0], other.gameSummary)) {
        this.gameSummary = (gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary) data().deepCopy(fields()[0].schema(), other.gameSummary);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lineScore)) {
        this.lineScore = (gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore) data().deepCopy(fields()[1].schema(), other.lineScore);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.seasonSeries)) {
        this.seasonSeries = (gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries) data().deepCopy(fields()[2].schema(), other.seasonSeries);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastMeeting)) {
        this.lastMeeting = (gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting) data().deepCopy(fields()[3].schema(), other.lastMeeting);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.playerStats)) {
        this.playerStats = (gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats) data().deepCopy(fields()[4].schema(), other.playerStats);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.teamStats)) {
        this.teamStats = (gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats) data().deepCopy(fields()[5].schema(), other.teamStats);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.otherStats)) {
        this.otherStats = (gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats) data().deepCopy(fields()[6].schema(), other.otherStats);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.officials)) {
        this.officials = (gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials) data().deepCopy(fields()[7].schema(), other.officials);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.gameInfo)) {
        this.gameInfo = (gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo) data().deepCopy(fields()[8].schema(), other.gameInfo);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.inactivePlayers)) {
        this.inactivePlayers = (gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers) data().deepCopy(fields()[9].schema(), other.inactivePlayers);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.availableVideo)) {
        this.availableVideo = (gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo) data().deepCopy(fields()[10].schema(), other.availableVideo);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.gameId)) {
        this.gameId = (java.lang.Integer) data().deepCopy(fields()[11].schema(), other.gameId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.rangeType)) {
        this.rangeType = (java.lang.Integer) data().deepCopy(fields()[12].schema(), other.rangeType);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.startPeriod)) {
        this.startPeriod = (java.lang.Integer) data().deepCopy(fields()[13].schema(), other.startPeriod);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.startRange)) {
        this.startRange = (java.lang.Integer) data().deepCopy(fields()[14].schema(), other.startRange);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.endPeriod)) {
        this.endPeriod = (java.lang.Integer) data().deepCopy(fields()[15].schema(), other.endPeriod);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.endRange)) {
        this.endRange = (java.lang.Integer) data().deepCopy(fields()[16].schema(), other.endRange);
        fieldSetFlags()[16] = true;
      }
    }

    /** Gets the value of the 'gameSummary' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary getGameSummary() {
      return gameSummary;
    }
    
    /** Sets the value of the 'gameSummary' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setGameSummary(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary value) {
      validate(fields()[0], value);
      this.gameSummary = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'gameSummary' field has been set */
    public boolean hasGameSummary() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'gameSummary' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearGameSummary() {
      gameSummary = null;
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'lineScore' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore getLineScore() {
      return lineScore;
    }
    
    /** Sets the value of the 'lineScore' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setLineScore(gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore value) {
      validate(fields()[1], value);
      this.lineScore = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'lineScore' field has been set */
    public boolean hasLineScore() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'lineScore' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearLineScore() {
      lineScore = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'seasonSeries' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries getSeasonSeries() {
      return seasonSeries;
    }
    
    /** Sets the value of the 'seasonSeries' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setSeasonSeries(gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries value) {
      validate(fields()[2], value);
      this.seasonSeries = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'seasonSeries' field has been set */
    public boolean hasSeasonSeries() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'seasonSeries' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearSeasonSeries() {
      seasonSeries = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'lastMeeting' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting getLastMeeting() {
      return lastMeeting;
    }
    
    /** Sets the value of the 'lastMeeting' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setLastMeeting(gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting value) {
      validate(fields()[3], value);
      this.lastMeeting = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'lastMeeting' field has been set */
    public boolean hasLastMeeting() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'lastMeeting' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearLastMeeting() {
      lastMeeting = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStats' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats getPlayerStats() {
      return playerStats;
    }
    
    /** Sets the value of the 'playerStats' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setPlayerStats(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats value) {
      validate(fields()[4], value);
      this.playerStats = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStats' field has been set */
    public boolean hasPlayerStats() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'playerStats' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearPlayerStats() {
      playerStats = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'teamStats' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats getTeamStats() {
      return teamStats;
    }
    
    /** Sets the value of the 'teamStats' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setTeamStats(gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats value) {
      validate(fields()[5], value);
      this.teamStats = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'teamStats' field has been set */
    public boolean hasTeamStats() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'teamStats' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearTeamStats() {
      teamStats = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'otherStats' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats getOtherStats() {
      return otherStats;
    }
    
    /** Sets the value of the 'otherStats' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setOtherStats(gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats value) {
      validate(fields()[6], value);
      this.otherStats = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'otherStats' field has been set */
    public boolean hasOtherStats() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'otherStats' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearOtherStats() {
      otherStats = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'officials' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials getOfficials() {
      return officials;
    }
    
    /** Sets the value of the 'officials' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setOfficials(gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials value) {
      validate(fields()[7], value);
      this.officials = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'officials' field has been set */
    public boolean hasOfficials() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'officials' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearOfficials() {
      officials = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    /** Gets the value of the 'gameInfo' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo getGameInfo() {
      return gameInfo;
    }
    
    /** Sets the value of the 'gameInfo' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setGameInfo(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo value) {
      validate(fields()[8], value);
      this.gameInfo = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'gameInfo' field has been set */
    public boolean hasGameInfo() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'gameInfo' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearGameInfo() {
      gameInfo = null;
      fieldSetFlags()[8] = false;
      return this;
    }
    
    /** Gets the value of the 'inactivePlayers' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers getInactivePlayers() {
      return inactivePlayers;
    }
    
    /** Sets the value of the 'inactivePlayers' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setInactivePlayers(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers value) {
      validate(fields()[9], value);
      this.inactivePlayers = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'inactivePlayers' field has been set */
    public boolean hasInactivePlayers() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'inactivePlayers' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearInactivePlayers() {
      inactivePlayers = null;
      fieldSetFlags()[9] = false;
      return this;
    }
    
    /** Gets the value of the 'availableVideo' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo getAvailableVideo() {
      return availableVideo;
    }
    
    /** Sets the value of the 'availableVideo' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setAvailableVideo(gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo value) {
      validate(fields()[10], value);
      this.availableVideo = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'availableVideo' field has been set */
    public boolean hasAvailableVideo() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'availableVideo' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearAvailableVideo() {
      availableVideo = null;
      fieldSetFlags()[10] = false;
      return this;
    }
    
    /** Gets the value of the 'gameId' field */
    public java.lang.Integer getGameId() {
      return gameId;
    }
    
    /** Sets the value of the 'gameId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setGameId(int value) {
      validate(fields()[11], value);
      this.gameId = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'gameId' field has been set */
    public boolean hasGameId() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'gameId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearGameId() {
      fieldSetFlags()[11] = false;
      return this;
    }
    
    /** Gets the value of the 'rangeType' field */
    public java.lang.Integer getRangeType() {
      return rangeType;
    }
    
    /** Sets the value of the 'rangeType' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setRangeType(int value) {
      validate(fields()[12], value);
      this.rangeType = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'rangeType' field has been set */
    public boolean hasRangeType() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'rangeType' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearRangeType() {
      fieldSetFlags()[12] = false;
      return this;
    }
    
    /** Gets the value of the 'startPeriod' field */
    public java.lang.Integer getStartPeriod() {
      return startPeriod;
    }
    
    /** Sets the value of the 'startPeriod' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setStartPeriod(int value) {
      validate(fields()[13], value);
      this.startPeriod = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'startPeriod' field has been set */
    public boolean hasStartPeriod() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'startPeriod' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearStartPeriod() {
      fieldSetFlags()[13] = false;
      return this;
    }
    
    /** Gets the value of the 'startRange' field */
    public java.lang.Integer getStartRange() {
      return startRange;
    }
    
    /** Sets the value of the 'startRange' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setStartRange(int value) {
      validate(fields()[14], value);
      this.startRange = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'startRange' field has been set */
    public boolean hasStartRange() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'startRange' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearStartRange() {
      fieldSetFlags()[14] = false;
      return this;
    }
    
    /** Gets the value of the 'endPeriod' field */
    public java.lang.Integer getEndPeriod() {
      return endPeriod;
    }
    
    /** Sets the value of the 'endPeriod' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setEndPeriod(int value) {
      validate(fields()[15], value);
      this.endPeriod = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'endPeriod' field has been set */
    public boolean hasEndPeriod() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'endPeriod' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearEndPeriod() {
      fieldSetFlags()[15] = false;
      return this;
    }
    
    /** Gets the value of the 'endRange' field */
    public java.lang.Integer getEndRange() {
      return endRange;
    }
    
    /** Sets the value of the 'endRange' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder setEndRange(int value) {
      validate(fields()[16], value);
      this.endRange = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'endRange' field has been set */
    public boolean hasEndRange() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'endRange' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameStats.Builder clearEndRange() {
      fieldSetFlags()[16] = false;
      return this;
    }
    
    @Override
    public GameStats build() {
      try {
        GameStats record = new GameStats();
        record.gameSummary = fieldSetFlags()[0] ? this.gameSummary : (gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary) defaultValue(fields()[0]);
        record.lineScore = fieldSetFlags()[1] ? this.lineScore : (gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore) defaultValue(fields()[1]);
        record.seasonSeries = fieldSetFlags()[2] ? this.seasonSeries : (gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries) defaultValue(fields()[2]);
        record.lastMeeting = fieldSetFlags()[3] ? this.lastMeeting : (gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting) defaultValue(fields()[3]);
        record.playerStats = fieldSetFlags()[4] ? this.playerStats : (gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats) defaultValue(fields()[4]);
        record.teamStats = fieldSetFlags()[5] ? this.teamStats : (gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats) defaultValue(fields()[5]);
        record.otherStats = fieldSetFlags()[6] ? this.otherStats : (gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats) defaultValue(fields()[6]);
        record.officials = fieldSetFlags()[7] ? this.officials : (gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials) defaultValue(fields()[7]);
        record.gameInfo = fieldSetFlags()[8] ? this.gameInfo : (gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo) defaultValue(fields()[8]);
        record.inactivePlayers = fieldSetFlags()[9] ? this.inactivePlayers : (gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers) defaultValue(fields()[9]);
        record.availableVideo = fieldSetFlags()[10] ? this.availableVideo : (gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo) defaultValue(fields()[10]);
        record.gameId = fieldSetFlags()[11] ? this.gameId : (java.lang.Integer) defaultValue(fields()[11]);
        record.rangeType = fieldSetFlags()[12] ? this.rangeType : (java.lang.Integer) defaultValue(fields()[12]);
        record.startPeriod = fieldSetFlags()[13] ? this.startPeriod : (java.lang.Integer) defaultValue(fields()[13]);
        record.startRange = fieldSetFlags()[14] ? this.startRange : (java.lang.Integer) defaultValue(fields()[14]);
        record.endPeriod = fieldSetFlags()[15] ? this.endPeriod : (java.lang.Integer) defaultValue(fields()[15]);
        record.endRange = fieldSetFlags()[16] ? this.endRange : (java.lang.Integer) defaultValue(fields()[16]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public GameStats.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public GameStats newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends GameStats implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'gameSummary' field.
		   */
	  public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary getGameSummary() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameSummary' field.
		   * @param value the value to set.
	   */
	  public void setGameSummary(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameSummary' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameSummaryDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lineScore' field.
		   */
	  public gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore getLineScore() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lineScore' field.
		   * @param value the value to set.
	   */
	  public void setLineScore(gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lineScore' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLineScoreDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.LineScore value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'seasonSeries' field.
		   */
	  public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries getSeasonSeries() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'seasonSeries' field.
		   * @param value the value to set.
	   */
	  public void setSeasonSeries(gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'seasonSeries' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isSeasonSeriesDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastMeeting' field.
		   */
	  public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting getLastMeeting() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastMeeting' field.
		   * @param value the value to set.
	   */
	  public void setLastMeeting(gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastMeeting' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastMeetingDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStats' field.
		   */
	  public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats getPlayerStats() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStats' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStats(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStats' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'teamStats' field.
		   */
	  public gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats getTeamStats() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'teamStats' field.
		   * @param value the value to set.
	   */
	  public void setTeamStats(gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'teamStats' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTeamStatsDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.TeamStats value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'otherStats' field.
		   */
	  public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats getOtherStats() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'otherStats' field.
		   * @param value the value to set.
	   */
	  public void setOtherStats(gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'otherStats' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isOtherStatsDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'officials' field.
		   */
	  public gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials getOfficials() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'officials' field.
		   * @param value the value to set.
	   */
	  public void setOfficials(gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'officials' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isOfficialsDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'gameInfo' field.
		   */
	  public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo getGameInfo() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameInfo' field.
		   * @param value the value to set.
	   */
	  public void setGameInfo(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameInfo' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameInfoDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameInfo value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'inactivePlayers' field.
		   */
	  public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers getInactivePlayers() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'inactivePlayers' field.
		   * @param value the value to set.
	   */
	  public void setInactivePlayers(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'inactivePlayers' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isInactivePlayersDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'availableVideo' field.
		   */
	  public gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo getAvailableVideo() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'availableVideo' field.
		   * @param value the value to set.
	   */
	  public void setAvailableVideo(gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'availableVideo' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isAvailableVideoDirty(gov.nasa.jpl.xdata.nba.impoexpo.structs.AvailableVideo value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'gameId' field.
		   */
	  public java.lang.Integer getGameId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameId' field.
		   * @param value the value to set.
	   */
	  public void setGameId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'rangeType' field.
		   */
	  public java.lang.Integer getRangeType() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'rangeType' field.
		   * @param value the value to set.
	   */
	  public void setRangeType(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'rangeType' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isRangeTypeDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'startPeriod' field.
		   */
	  public java.lang.Integer getStartPeriod() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'startPeriod' field.
		   * @param value the value to set.
	   */
	  public void setStartPeriod(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'startPeriod' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isStartPeriodDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'startRange' field.
		   */
	  public java.lang.Integer getStartRange() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'startRange' field.
		   * @param value the value to set.
	   */
	  public void setStartRange(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'startRange' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isStartRangeDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'endPeriod' field.
		   */
	  public java.lang.Integer getEndPeriod() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'endPeriod' field.
		   * @param value the value to set.
	   */
	  public void setEndPeriod(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'endPeriod' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isEndPeriodDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'endRange' field.
		   */
	  public java.lang.Integer getEndRange() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'endRange' field.
		   * @param value the value to set.
	   */
	  public void setEndRange(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'endRange' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isEndRangeDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

