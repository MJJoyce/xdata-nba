/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo.structs;  
@SuppressWarnings("all")
public class Notebook extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Notebook\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo.structs\",\"fields\":[{\"name\":\"teamNotebook\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"notebookAuthor\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"publishingBody\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"postedDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"theFacts\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"theQuotes\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"default\":[]},{\"name\":\"theStat\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"theTurningPoint\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"hot\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"not\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"notable\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"upNext\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"theLead\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"goodMove\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"badMove\",\"type\":[\"null\",\"string\"],\"default\":null}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    TEAM_NOTEBOOK(0, "teamNotebook"),
    NOTEBOOK_AUTHOR(1, "notebookAuthor"),
    PUBLISHING_BODY(2, "publishingBody"),
    POSTED_DATE(3, "postedDate"),
    THE_FACTS(4, "theFacts"),
    THE_QUOTES(5, "theQuotes"),
    THE_STAT(6, "theStat"),
    THE_TURNING_POINT(7, "theTurningPoint"),
    HOT(8, "hot"),
    NOT(9, "not"),
    NOTABLE(10, "notable"),
    UP_NEXT(11, "upNext"),
    THE_LEAD(12, "theLead"),
    GOOD_MOVE(13, "goodMove"),
    BAD_MOVE(14, "badMove"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "teamNotebook",
  "notebookAuthor",
  "publishingBody",
  "postedDate",
  "theFacts",
  "theQuotes",
  "theStat",
  "theTurningPoint",
  "hot",
  "not",
  "notable",
  "upNext",
  "theLead",
  "goodMove",
  "badMove",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return Notebook._ALL_FIELDS.length;
  }

  private java.lang.CharSequence teamNotebook;
  private java.lang.CharSequence notebookAuthor;
  private java.lang.CharSequence publishingBody;
  private java.lang.CharSequence postedDate;
  private java.lang.CharSequence theFacts;
  private java.util.List<java.lang.CharSequence> theQuotes;
  private java.lang.CharSequence theStat;
  private java.lang.CharSequence theTurningPoint;
  private java.lang.CharSequence hot;
  private java.lang.CharSequence not;
  private java.lang.CharSequence notable;
  private java.lang.CharSequence upNext;
  private java.lang.CharSequence theLead;
  private java.lang.CharSequence goodMove;
  private java.lang.CharSequence badMove;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return teamNotebook;
    case 1: return notebookAuthor;
    case 2: return publishingBody;
    case 3: return postedDate;
    case 4: return theFacts;
    case 5: return theQuotes;
    case 6: return theStat;
    case 7: return theTurningPoint;
    case 8: return hot;
    case 9: return not;
    case 10: return notable;
    case 11: return upNext;
    case 12: return theLead;
    case 13: return goodMove;
    case 14: return badMove;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: teamNotebook = (java.lang.CharSequence)(value); break;
    case 1: notebookAuthor = (java.lang.CharSequence)(value); break;
    case 2: publishingBody = (java.lang.CharSequence)(value); break;
    case 3: postedDate = (java.lang.CharSequence)(value); break;
    case 4: theFacts = (java.lang.CharSequence)(value); break;
    case 5: theQuotes = (java.util.List<java.lang.CharSequence>)((value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyListWrapper((java.util.List)value)); break;
    case 6: theStat = (java.lang.CharSequence)(value); break;
    case 7: theTurningPoint = (java.lang.CharSequence)(value); break;
    case 8: hot = (java.lang.CharSequence)(value); break;
    case 9: not = (java.lang.CharSequence)(value); break;
    case 10: notable = (java.lang.CharSequence)(value); break;
    case 11: upNext = (java.lang.CharSequence)(value); break;
    case 12: theLead = (java.lang.CharSequence)(value); break;
    case 13: goodMove = (java.lang.CharSequence)(value); break;
    case 14: badMove = (java.lang.CharSequence)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'teamNotebook' field.
   */
  public java.lang.CharSequence getTeamNotebook() {
    return teamNotebook;
  }

  /**
   * Sets the value of the 'teamNotebook' field.
   * @param value the value to set.
   */
  public void setTeamNotebook(java.lang.CharSequence value) {
    this.teamNotebook = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'teamNotebook' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTeamNotebookDirty(java.lang.CharSequence value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'notebookAuthor' field.
   */
  public java.lang.CharSequence getNotebookAuthor() {
    return notebookAuthor;
  }

  /**
   * Sets the value of the 'notebookAuthor' field.
   * @param value the value to set.
   */
  public void setNotebookAuthor(java.lang.CharSequence value) {
    this.notebookAuthor = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'notebookAuthor' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isNotebookAuthorDirty(java.lang.CharSequence value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'publishingBody' field.
   */
  public java.lang.CharSequence getPublishingBody() {
    return publishingBody;
  }

  /**
   * Sets the value of the 'publishingBody' field.
   * @param value the value to set.
   */
  public void setPublishingBody(java.lang.CharSequence value) {
    this.publishingBody = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'publishingBody' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPublishingBodyDirty(java.lang.CharSequence value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'postedDate' field.
   */
  public java.lang.CharSequence getPostedDate() {
    return postedDate;
  }

  /**
   * Sets the value of the 'postedDate' field.
   * @param value the value to set.
   */
  public void setPostedDate(java.lang.CharSequence value) {
    this.postedDate = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'postedDate' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPostedDateDirty(java.lang.CharSequence value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'theFacts' field.
   */
  public java.lang.CharSequence getTheFacts() {
    return theFacts;
  }

  /**
   * Sets the value of the 'theFacts' field.
   * @param value the value to set.
   */
  public void setTheFacts(java.lang.CharSequence value) {
    this.theFacts = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'theFacts' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTheFactsDirty(java.lang.CharSequence value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'theQuotes' field.
   */
  public java.util.List<java.lang.CharSequence> getTheQuotes() {
    return theQuotes;
  }

  /**
   * Sets the value of the 'theQuotes' field.
   * @param value the value to set.
   */
  public void setTheQuotes(java.util.List<java.lang.CharSequence> value) {
    this.theQuotes = (value instanceof org.apache.gora.persistency.Dirtyable) ? value : new org.apache.gora.persistency.impl.DirtyListWrapper(value);
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'theQuotes' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTheQuotesDirty(java.util.List<java.lang.CharSequence> value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'theStat' field.
   */
  public java.lang.CharSequence getTheStat() {
    return theStat;
  }

  /**
   * Sets the value of the 'theStat' field.
   * @param value the value to set.
   */
  public void setTheStat(java.lang.CharSequence value) {
    this.theStat = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'theStat' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTheStatDirty(java.lang.CharSequence value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'theTurningPoint' field.
   */
  public java.lang.CharSequence getTheTurningPoint() {
    return theTurningPoint;
  }

  /**
   * Sets the value of the 'theTurningPoint' field.
   * @param value the value to set.
   */
  public void setTheTurningPoint(java.lang.CharSequence value) {
    this.theTurningPoint = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'theTurningPoint' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTheTurningPointDirty(java.lang.CharSequence value) {
    return isDirty(7);
  }

  /**
   * Gets the value of the 'hot' field.
   */
  public java.lang.CharSequence getHot() {
    return hot;
  }

  /**
   * Sets the value of the 'hot' field.
   * @param value the value to set.
   */
  public void setHot(java.lang.CharSequence value) {
    this.hot = value;
    setDirty(8);
  }
  
  /**
   * Checks the dirty status of the 'hot' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isHotDirty(java.lang.CharSequence value) {
    return isDirty(8);
  }

  /**
   * Gets the value of the 'not' field.
   */
  public java.lang.CharSequence getNot() {
    return not;
  }

  /**
   * Sets the value of the 'not' field.
   * @param value the value to set.
   */
  public void setNot(java.lang.CharSequence value) {
    this.not = value;
    setDirty(9);
  }
  
  /**
   * Checks the dirty status of the 'not' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isNotDirty(java.lang.CharSequence value) {
    return isDirty(9);
  }

  /**
   * Gets the value of the 'notable' field.
   */
  public java.lang.CharSequence getNotable() {
    return notable;
  }

  /**
   * Sets the value of the 'notable' field.
   * @param value the value to set.
   */
  public void setNotable(java.lang.CharSequence value) {
    this.notable = value;
    setDirty(10);
  }
  
  /**
   * Checks the dirty status of the 'notable' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isNotableDirty(java.lang.CharSequence value) {
    return isDirty(10);
  }

  /**
   * Gets the value of the 'upNext' field.
   */
  public java.lang.CharSequence getUpNext() {
    return upNext;
  }

  /**
   * Sets the value of the 'upNext' field.
   * @param value the value to set.
   */
  public void setUpNext(java.lang.CharSequence value) {
    this.upNext = value;
    setDirty(11);
  }
  
  /**
   * Checks the dirty status of the 'upNext' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isUpNextDirty(java.lang.CharSequence value) {
    return isDirty(11);
  }

  /**
   * Gets the value of the 'theLead' field.
   */
  public java.lang.CharSequence getTheLead() {
    return theLead;
  }

  /**
   * Sets the value of the 'theLead' field.
   * @param value the value to set.
   */
  public void setTheLead(java.lang.CharSequence value) {
    this.theLead = value;
    setDirty(12);
  }
  
  /**
   * Checks the dirty status of the 'theLead' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTheLeadDirty(java.lang.CharSequence value) {
    return isDirty(12);
  }

  /**
   * Gets the value of the 'goodMove' field.
   */
  public java.lang.CharSequence getGoodMove() {
    return goodMove;
  }

  /**
   * Sets the value of the 'goodMove' field.
   * @param value the value to set.
   */
  public void setGoodMove(java.lang.CharSequence value) {
    this.goodMove = value;
    setDirty(13);
  }
  
  /**
   * Checks the dirty status of the 'goodMove' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGoodMoveDirty(java.lang.CharSequence value) {
    return isDirty(13);
  }

  /**
   * Gets the value of the 'badMove' field.
   */
  public java.lang.CharSequence getBadMove() {
    return badMove;
  }

  /**
   * Sets the value of the 'badMove' field.
   * @param value the value to set.
   */
  public void setBadMove(java.lang.CharSequence value) {
    this.badMove = value;
    setDirty(14);
  }
  
  /**
   * Checks the dirty status of the 'badMove' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isBadMoveDirty(java.lang.CharSequence value) {
    return isDirty(14);
  }

  /** Creates a new Notebook RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder();
  }
  
  /** Creates a new Notebook RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder(other);
  }
  
  /** Creates a new Notebook RecordBuilder by copying an existing Notebook instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for Notebook instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Notebook>
    implements org.apache.avro.data.RecordBuilder<Notebook> {

    private java.lang.CharSequence teamNotebook;
    private java.lang.CharSequence notebookAuthor;
    private java.lang.CharSequence publishingBody;
    private java.lang.CharSequence postedDate;
    private java.lang.CharSequence theFacts;
    private java.util.List<java.lang.CharSequence> theQuotes;
    private java.lang.CharSequence theStat;
    private java.lang.CharSequence theTurningPoint;
    private java.lang.CharSequence hot;
    private java.lang.CharSequence not;
    private java.lang.CharSequence notable;
    private java.lang.CharSequence upNext;
    private java.lang.CharSequence theLead;
    private java.lang.CharSequence goodMove;
    private java.lang.CharSequence badMove;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Notebook instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.SCHEMA$);
      if (isValidValue(fields()[0], other.teamNotebook)) {
        this.teamNotebook = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.teamNotebook);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.notebookAuthor)) {
        this.notebookAuthor = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.notebookAuthor);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.publishingBody)) {
        this.publishingBody = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.publishingBody);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.postedDate)) {
        this.postedDate = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.postedDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.theFacts)) {
        this.theFacts = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.theFacts);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.theQuotes)) {
        this.theQuotes = (java.util.List<java.lang.CharSequence>) data().deepCopy(fields()[5].schema(), other.theQuotes);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.theStat)) {
        this.theStat = (java.lang.CharSequence) data().deepCopy(fields()[6].schema(), other.theStat);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.theTurningPoint)) {
        this.theTurningPoint = (java.lang.CharSequence) data().deepCopy(fields()[7].schema(), other.theTurningPoint);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.hot)) {
        this.hot = (java.lang.CharSequence) data().deepCopy(fields()[8].schema(), other.hot);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.not)) {
        this.not = (java.lang.CharSequence) data().deepCopy(fields()[9].schema(), other.not);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.notable)) {
        this.notable = (java.lang.CharSequence) data().deepCopy(fields()[10].schema(), other.notable);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.upNext)) {
        this.upNext = (java.lang.CharSequence) data().deepCopy(fields()[11].schema(), other.upNext);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.theLead)) {
        this.theLead = (java.lang.CharSequence) data().deepCopy(fields()[12].schema(), other.theLead);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.goodMove)) {
        this.goodMove = (java.lang.CharSequence) data().deepCopy(fields()[13].schema(), other.goodMove);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.badMove)) {
        this.badMove = (java.lang.CharSequence) data().deepCopy(fields()[14].schema(), other.badMove);
        fieldSetFlags()[14] = true;
      }
    }

    /** Gets the value of the 'teamNotebook' field */
    public java.lang.CharSequence getTeamNotebook() {
      return teamNotebook;
    }
    
    /** Sets the value of the 'teamNotebook' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setTeamNotebook(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.teamNotebook = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'teamNotebook' field has been set */
    public boolean hasTeamNotebook() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'teamNotebook' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearTeamNotebook() {
      teamNotebook = null;
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'notebookAuthor' field */
    public java.lang.CharSequence getNotebookAuthor() {
      return notebookAuthor;
    }
    
    /** Sets the value of the 'notebookAuthor' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setNotebookAuthor(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.notebookAuthor = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'notebookAuthor' field has been set */
    public boolean hasNotebookAuthor() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'notebookAuthor' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearNotebookAuthor() {
      notebookAuthor = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'publishingBody' field */
    public java.lang.CharSequence getPublishingBody() {
      return publishingBody;
    }
    
    /** Sets the value of the 'publishingBody' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setPublishingBody(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.publishingBody = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'publishingBody' field has been set */
    public boolean hasPublishingBody() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'publishingBody' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearPublishingBody() {
      publishingBody = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'postedDate' field */
    public java.lang.CharSequence getPostedDate() {
      return postedDate;
    }
    
    /** Sets the value of the 'postedDate' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setPostedDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.postedDate = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'postedDate' field has been set */
    public boolean hasPostedDate() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'postedDate' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearPostedDate() {
      postedDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'theFacts' field */
    public java.lang.CharSequence getTheFacts() {
      return theFacts;
    }
    
    /** Sets the value of the 'theFacts' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setTheFacts(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.theFacts = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'theFacts' field has been set */
    public boolean hasTheFacts() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'theFacts' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearTheFacts() {
      theFacts = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'theQuotes' field */
    public java.util.List<java.lang.CharSequence> getTheQuotes() {
      return theQuotes;
    }
    
    /** Sets the value of the 'theQuotes' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setTheQuotes(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[5], value);
      this.theQuotes = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'theQuotes' field has been set */
    public boolean hasTheQuotes() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'theQuotes' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearTheQuotes() {
      theQuotes = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'theStat' field */
    public java.lang.CharSequence getTheStat() {
      return theStat;
    }
    
    /** Sets the value of the 'theStat' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setTheStat(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.theStat = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'theStat' field has been set */
    public boolean hasTheStat() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'theStat' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearTheStat() {
      theStat = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'theTurningPoint' field */
    public java.lang.CharSequence getTheTurningPoint() {
      return theTurningPoint;
    }
    
    /** Sets the value of the 'theTurningPoint' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setTheTurningPoint(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.theTurningPoint = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'theTurningPoint' field has been set */
    public boolean hasTheTurningPoint() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'theTurningPoint' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearTheTurningPoint() {
      theTurningPoint = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    /** Gets the value of the 'hot' field */
    public java.lang.CharSequence getHot() {
      return hot;
    }
    
    /** Sets the value of the 'hot' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setHot(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.hot = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'hot' field has been set */
    public boolean hasHot() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'hot' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearHot() {
      hot = null;
      fieldSetFlags()[8] = false;
      return this;
    }
    
    /** Gets the value of the 'not' field */
    public java.lang.CharSequence getNot() {
      return not;
    }
    
    /** Sets the value of the 'not' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setNot(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.not = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'not' field has been set */
    public boolean hasNot() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'not' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearNot() {
      not = null;
      fieldSetFlags()[9] = false;
      return this;
    }
    
    /** Gets the value of the 'notable' field */
    public java.lang.CharSequence getNotable() {
      return notable;
    }
    
    /** Sets the value of the 'notable' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setNotable(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.notable = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'notable' field has been set */
    public boolean hasNotable() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'notable' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearNotable() {
      notable = null;
      fieldSetFlags()[10] = false;
      return this;
    }
    
    /** Gets the value of the 'upNext' field */
    public java.lang.CharSequence getUpNext() {
      return upNext;
    }
    
    /** Sets the value of the 'upNext' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setUpNext(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.upNext = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'upNext' field has been set */
    public boolean hasUpNext() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'upNext' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearUpNext() {
      upNext = null;
      fieldSetFlags()[11] = false;
      return this;
    }
    
    /** Gets the value of the 'theLead' field */
    public java.lang.CharSequence getTheLead() {
      return theLead;
    }
    
    /** Sets the value of the 'theLead' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setTheLead(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.theLead = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'theLead' field has been set */
    public boolean hasTheLead() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'theLead' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearTheLead() {
      theLead = null;
      fieldSetFlags()[12] = false;
      return this;
    }
    
    /** Gets the value of the 'goodMove' field */
    public java.lang.CharSequence getGoodMove() {
      return goodMove;
    }
    
    /** Sets the value of the 'goodMove' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setGoodMove(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.goodMove = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'goodMove' field has been set */
    public boolean hasGoodMove() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'goodMove' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearGoodMove() {
      goodMove = null;
      fieldSetFlags()[13] = false;
      return this;
    }
    
    /** Gets the value of the 'badMove' field */
    public java.lang.CharSequence getBadMove() {
      return badMove;
    }
    
    /** Sets the value of the 'badMove' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder setBadMove(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.badMove = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'badMove' field has been set */
    public boolean hasBadMove() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'badMove' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Notebook.Builder clearBadMove() {
      badMove = null;
      fieldSetFlags()[14] = false;
      return this;
    }
    
    @Override
    public Notebook build() {
      try {
        Notebook record = new Notebook();
        record.teamNotebook = fieldSetFlags()[0] ? this.teamNotebook : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.notebookAuthor = fieldSetFlags()[1] ? this.notebookAuthor : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.publishingBody = fieldSetFlags()[2] ? this.publishingBody : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.postedDate = fieldSetFlags()[3] ? this.postedDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.theFacts = fieldSetFlags()[4] ? this.theFacts : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.theQuotes = fieldSetFlags()[5] ? this.theQuotes : (java.util.List<java.lang.CharSequence>) new org.apache.gora.persistency.impl.DirtyListWrapper((java.util.List)defaultValue(fields()[5]));
        record.theStat = fieldSetFlags()[6] ? this.theStat : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.theTurningPoint = fieldSetFlags()[7] ? this.theTurningPoint : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.hot = fieldSetFlags()[8] ? this.hot : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.not = fieldSetFlags()[9] ? this.not : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.notable = fieldSetFlags()[10] ? this.notable : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.upNext = fieldSetFlags()[11] ? this.upNext : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.theLead = fieldSetFlags()[12] ? this.theLead : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.goodMove = fieldSetFlags()[13] ? this.goodMove : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.badMove = fieldSetFlags()[14] ? this.badMove : (java.lang.CharSequence) defaultValue(fields()[14]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public Notebook.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public Notebook newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends Notebook implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'teamNotebook' field.
		   */
	  public java.lang.CharSequence getTeamNotebook() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'teamNotebook' field.
		   * @param value the value to set.
	   */
	  public void setTeamNotebook(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'teamNotebook' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTeamNotebookDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'notebookAuthor' field.
		   */
	  public java.lang.CharSequence getNotebookAuthor() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'notebookAuthor' field.
		   * @param value the value to set.
	   */
	  public void setNotebookAuthor(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'notebookAuthor' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isNotebookAuthorDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'publishingBody' field.
		   */
	  public java.lang.CharSequence getPublishingBody() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'publishingBody' field.
		   * @param value the value to set.
	   */
	  public void setPublishingBody(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'publishingBody' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPublishingBodyDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'postedDate' field.
		   */
	  public java.lang.CharSequence getPostedDate() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'postedDate' field.
		   * @param value the value to set.
	   */
	  public void setPostedDate(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'postedDate' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPostedDateDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'theFacts' field.
		   */
	  public java.lang.CharSequence getTheFacts() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'theFacts' field.
		   * @param value the value to set.
	   */
	  public void setTheFacts(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'theFacts' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTheFactsDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'theQuotes' field.
		   */
	  public java.util.List<java.lang.CharSequence> getTheQuotes() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'theQuotes' field.
		   * @param value the value to set.
	   */
	  public void setTheQuotes(java.util.List<java.lang.CharSequence> value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'theQuotes' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTheQuotesDirty(java.util.List<java.lang.CharSequence> value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'theStat' field.
		   */
	  public java.lang.CharSequence getTheStat() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'theStat' field.
		   * @param value the value to set.
	   */
	  public void setTheStat(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'theStat' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTheStatDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'theTurningPoint' field.
		   */
	  public java.lang.CharSequence getTheTurningPoint() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'theTurningPoint' field.
		   * @param value the value to set.
	   */
	  public void setTheTurningPoint(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'theTurningPoint' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTheTurningPointDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'hot' field.
		   */
	  public java.lang.CharSequence getHot() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'hot' field.
		   * @param value the value to set.
	   */
	  public void setHot(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'hot' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isHotDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'not' field.
		   */
	  public java.lang.CharSequence getNot() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'not' field.
		   * @param value the value to set.
	   */
	  public void setNot(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'not' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isNotDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'notable' field.
		   */
	  public java.lang.CharSequence getNotable() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'notable' field.
		   * @param value the value to set.
	   */
	  public void setNotable(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'notable' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isNotableDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'upNext' field.
		   */
	  public java.lang.CharSequence getUpNext() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'upNext' field.
		   * @param value the value to set.
	   */
	  public void setUpNext(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'upNext' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isUpNextDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'theLead' field.
		   */
	  public java.lang.CharSequence getTheLead() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'theLead' field.
		   * @param value the value to set.
	   */
	  public void setTheLead(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'theLead' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTheLeadDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'goodMove' field.
		   */
	  public java.lang.CharSequence getGoodMove() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'goodMove' field.
		   * @param value the value to set.
	   */
	  public void setGoodMove(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'goodMove' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGoodMoveDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'badMove' field.
		   */
	  public java.lang.CharSequence getBadMove() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'badMove' field.
		   * @param value the value to set.
	   */
	  public void setBadMove(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'badMove' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isBadMoveDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

