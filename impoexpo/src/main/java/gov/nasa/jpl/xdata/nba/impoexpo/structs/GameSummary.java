/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo.structs;  
@SuppressWarnings("all")
public class GameSummary extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GameSummary\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo.structs\",\"fields\":[{\"name\":\"gameSummaryDateEst\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gameSummarySequence\",\"type\":\"int\",\"default\":0},{\"name\":\"gameGameSummaryId\",\"type\":\"int\",\"default\":0},{\"name\":\"gameStatusId\",\"type\":\"int\",\"default\":0},{\"name\":\"gameStatusText\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gameCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"gameSummaryHomeTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"gameSummaryVisitorTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"season\",\"type\":\"int\",\"default\":0},{\"name\":\"livePeriod\",\"type\":\"int\",\"default\":0},{\"name\":\"livePcTime\",\"type\":\"int\",\"default\":0},{\"name\":\"natlTvBroadcasterAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"livePeriodTimeBcast\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"whStatus\",\"type\":\"int\",\"default\":0}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    GAME_SUMMARY_DATE_EST(0, "gameSummaryDateEst"),
    GAME_SUMMARY_SEQUENCE(1, "gameSummarySequence"),
    GAME_GAME_SUMMARY_ID(2, "gameGameSummaryId"),
    GAME_STATUS_ID(3, "gameStatusId"),
    GAME_STATUS_TEXT(4, "gameStatusText"),
    GAME_CODE(5, "gameCode"),
    GAME_SUMMARY_HOME_TEAM_ID(6, "gameSummaryHomeTeamId"),
    GAME_SUMMARY_VISITOR_TEAM_ID(7, "gameSummaryVisitorTeamId"),
    SEASON(8, "season"),
    LIVE_PERIOD(9, "livePeriod"),
    LIVE_PC_TIME(10, "livePcTime"),
    NATL_TV_BROADCASTER_ABBREVIATION(11, "natlTvBroadcasterAbbreviation"),
    LIVE_PERIOD_TIME_BCAST(12, "livePeriodTimeBcast"),
    WH_STATUS(13, "whStatus"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "gameSummaryDateEst",
  "gameSummarySequence",
  "gameGameSummaryId",
  "gameStatusId",
  "gameStatusText",
  "gameCode",
  "gameSummaryHomeTeamId",
  "gameSummaryVisitorTeamId",
  "season",
  "livePeriod",
  "livePcTime",
  "natlTvBroadcasterAbbreviation",
  "livePeriodTimeBcast",
  "whStatus",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return GameSummary._ALL_FIELDS.length;
  }

  private java.lang.CharSequence gameSummaryDateEst;
  private int gameSummarySequence;
  private int gameGameSummaryId;
  private int gameStatusId;
  private java.lang.CharSequence gameStatusText;
  private java.lang.CharSequence gameCode;
  private int gameSummaryHomeTeamId;
  private int gameSummaryVisitorTeamId;
  private int season;
  private int livePeriod;
  private int livePcTime;
  private java.lang.CharSequence natlTvBroadcasterAbbreviation;
  private java.lang.CharSequence livePeriodTimeBcast;
  private int whStatus;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gameSummaryDateEst;
    case 1: return gameSummarySequence;
    case 2: return gameGameSummaryId;
    case 3: return gameStatusId;
    case 4: return gameStatusText;
    case 5: return gameCode;
    case 6: return gameSummaryHomeTeamId;
    case 7: return gameSummaryVisitorTeamId;
    case 8: return season;
    case 9: return livePeriod;
    case 10: return livePcTime;
    case 11: return natlTvBroadcasterAbbreviation;
    case 12: return livePeriodTimeBcast;
    case 13: return whStatus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: gameSummaryDateEst = (java.lang.CharSequence)(value); break;
    case 1: gameSummarySequence = (java.lang.Integer)(value); break;
    case 2: gameGameSummaryId = (java.lang.Integer)(value); break;
    case 3: gameStatusId = (java.lang.Integer)(value); break;
    case 4: gameStatusText = (java.lang.CharSequence)(value); break;
    case 5: gameCode = (java.lang.CharSequence)(value); break;
    case 6: gameSummaryHomeTeamId = (java.lang.Integer)(value); break;
    case 7: gameSummaryVisitorTeamId = (java.lang.Integer)(value); break;
    case 8: season = (java.lang.Integer)(value); break;
    case 9: livePeriod = (java.lang.Integer)(value); break;
    case 10: livePcTime = (java.lang.Integer)(value); break;
    case 11: natlTvBroadcasterAbbreviation = (java.lang.CharSequence)(value); break;
    case 12: livePeriodTimeBcast = (java.lang.CharSequence)(value); break;
    case 13: whStatus = (java.lang.Integer)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'gameSummaryDateEst' field.
   */
  public java.lang.CharSequence getGameSummaryDateEst() {
    return gameSummaryDateEst;
  }

  /**
   * Sets the value of the 'gameSummaryDateEst' field.
   * @param value the value to set.
   */
  public void setGameSummaryDateEst(java.lang.CharSequence value) {
    this.gameSummaryDateEst = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'gameSummaryDateEst' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameSummaryDateEstDirty(java.lang.CharSequence value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'gameSummarySequence' field.
   */
  public java.lang.Integer getGameSummarySequence() {
    return gameSummarySequence;
  }

  /**
   * Sets the value of the 'gameSummarySequence' field.
   * @param value the value to set.
   */
  public void setGameSummarySequence(java.lang.Integer value) {
    this.gameSummarySequence = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'gameSummarySequence' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameSummarySequenceDirty(java.lang.Integer value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'gameGameSummaryId' field.
   */
  public java.lang.Integer getGameGameSummaryId() {
    return gameGameSummaryId;
  }

  /**
   * Sets the value of the 'gameGameSummaryId' field.
   * @param value the value to set.
   */
  public void setGameGameSummaryId(java.lang.Integer value) {
    this.gameGameSummaryId = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'gameGameSummaryId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameGameSummaryIdDirty(java.lang.Integer value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'gameStatusId' field.
   */
  public java.lang.Integer getGameStatusId() {
    return gameStatusId;
  }

  /**
   * Sets the value of the 'gameStatusId' field.
   * @param value the value to set.
   */
  public void setGameStatusId(java.lang.Integer value) {
    this.gameStatusId = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'gameStatusId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameStatusIdDirty(java.lang.Integer value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'gameStatusText' field.
   */
  public java.lang.CharSequence getGameStatusText() {
    return gameStatusText;
  }

  /**
   * Sets the value of the 'gameStatusText' field.
   * @param value the value to set.
   */
  public void setGameStatusText(java.lang.CharSequence value) {
    this.gameStatusText = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'gameStatusText' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameStatusTextDirty(java.lang.CharSequence value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'gameCode' field.
   */
  public java.lang.CharSequence getGameCode() {
    return gameCode;
  }

  /**
   * Sets the value of the 'gameCode' field.
   * @param value the value to set.
   */
  public void setGameCode(java.lang.CharSequence value) {
    this.gameCode = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'gameCode' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameCodeDirty(java.lang.CharSequence value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'gameSummaryHomeTeamId' field.
   */
  public java.lang.Integer getGameSummaryHomeTeamId() {
    return gameSummaryHomeTeamId;
  }

  /**
   * Sets the value of the 'gameSummaryHomeTeamId' field.
   * @param value the value to set.
   */
  public void setGameSummaryHomeTeamId(java.lang.Integer value) {
    this.gameSummaryHomeTeamId = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'gameSummaryHomeTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameSummaryHomeTeamIdDirty(java.lang.Integer value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'gameSummaryVisitorTeamId' field.
   */
  public java.lang.Integer getGameSummaryVisitorTeamId() {
    return gameSummaryVisitorTeamId;
  }

  /**
   * Sets the value of the 'gameSummaryVisitorTeamId' field.
   * @param value the value to set.
   */
  public void setGameSummaryVisitorTeamId(java.lang.Integer value) {
    this.gameSummaryVisitorTeamId = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'gameSummaryVisitorTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameSummaryVisitorTeamIdDirty(java.lang.Integer value) {
    return isDirty(7);
  }

  /**
   * Gets the value of the 'season' field.
   */
  public java.lang.Integer getSeason() {
    return season;
  }

  /**
   * Sets the value of the 'season' field.
   * @param value the value to set.
   */
  public void setSeason(java.lang.Integer value) {
    this.season = value;
    setDirty(8);
  }
  
  /**
   * Checks the dirty status of the 'season' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isSeasonDirty(java.lang.Integer value) {
    return isDirty(8);
  }

  /**
   * Gets the value of the 'livePeriod' field.
   */
  public java.lang.Integer getLivePeriod() {
    return livePeriod;
  }

  /**
   * Sets the value of the 'livePeriod' field.
   * @param value the value to set.
   */
  public void setLivePeriod(java.lang.Integer value) {
    this.livePeriod = value;
    setDirty(9);
  }
  
  /**
   * Checks the dirty status of the 'livePeriod' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLivePeriodDirty(java.lang.Integer value) {
    return isDirty(9);
  }

  /**
   * Gets the value of the 'livePcTime' field.
   */
  public java.lang.Integer getLivePcTime() {
    return livePcTime;
  }

  /**
   * Sets the value of the 'livePcTime' field.
   * @param value the value to set.
   */
  public void setLivePcTime(java.lang.Integer value) {
    this.livePcTime = value;
    setDirty(10);
  }
  
  /**
   * Checks the dirty status of the 'livePcTime' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLivePcTimeDirty(java.lang.Integer value) {
    return isDirty(10);
  }

  /**
   * Gets the value of the 'natlTvBroadcasterAbbreviation' field.
   */
  public java.lang.CharSequence getNatlTvBroadcasterAbbreviation() {
    return natlTvBroadcasterAbbreviation;
  }

  /**
   * Sets the value of the 'natlTvBroadcasterAbbreviation' field.
   * @param value the value to set.
   */
  public void setNatlTvBroadcasterAbbreviation(java.lang.CharSequence value) {
    this.natlTvBroadcasterAbbreviation = value;
    setDirty(11);
  }
  
  /**
   * Checks the dirty status of the 'natlTvBroadcasterAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isNatlTvBroadcasterAbbreviationDirty(java.lang.CharSequence value) {
    return isDirty(11);
  }

  /**
   * Gets the value of the 'livePeriodTimeBcast' field.
   */
  public java.lang.CharSequence getLivePeriodTimeBcast() {
    return livePeriodTimeBcast;
  }

  /**
   * Sets the value of the 'livePeriodTimeBcast' field.
   * @param value the value to set.
   */
  public void setLivePeriodTimeBcast(java.lang.CharSequence value) {
    this.livePeriodTimeBcast = value;
    setDirty(12);
  }
  
  /**
   * Checks the dirty status of the 'livePeriodTimeBcast' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLivePeriodTimeBcastDirty(java.lang.CharSequence value) {
    return isDirty(12);
  }

  /**
   * Gets the value of the 'whStatus' field.
   */
  public java.lang.Integer getWhStatus() {
    return whStatus;
  }

  /**
   * Sets the value of the 'whStatus' field.
   * @param value the value to set.
   */
  public void setWhStatus(java.lang.Integer value) {
    this.whStatus = value;
    setDirty(13);
  }
  
  /**
   * Checks the dirty status of the 'whStatus' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isWhStatusDirty(java.lang.Integer value) {
    return isDirty(13);
  }

  /** Creates a new GameSummary RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder();
  }
  
  /** Creates a new GameSummary RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder(other);
  }
  
  /** Creates a new GameSummary RecordBuilder by copying an existing GameSummary instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for GameSummary instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GameSummary>
    implements org.apache.avro.data.RecordBuilder<GameSummary> {

    private java.lang.CharSequence gameSummaryDateEst;
    private int gameSummarySequence;
    private int gameGameSummaryId;
    private int gameStatusId;
    private java.lang.CharSequence gameStatusText;
    private java.lang.CharSequence gameCode;
    private int gameSummaryHomeTeamId;
    private int gameSummaryVisitorTeamId;
    private int season;
    private int livePeriod;
    private int livePcTime;
    private java.lang.CharSequence natlTvBroadcasterAbbreviation;
    private java.lang.CharSequence livePeriodTimeBcast;
    private int whStatus;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing GameSummary instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.SCHEMA$);
      if (isValidValue(fields()[0], other.gameSummaryDateEst)) {
        this.gameSummaryDateEst = (java.lang.CharSequence) data().deepCopy(fields()[0].schema(), other.gameSummaryDateEst);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gameSummarySequence)) {
        this.gameSummarySequence = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.gameSummarySequence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gameGameSummaryId)) {
        this.gameGameSummaryId = (java.lang.Integer) data().deepCopy(fields()[2].schema(), other.gameGameSummaryId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gameStatusId)) {
        this.gameStatusId = (java.lang.Integer) data().deepCopy(fields()[3].schema(), other.gameStatusId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gameStatusText)) {
        this.gameStatusText = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.gameStatusText);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.gameCode)) {
        this.gameCode = (java.lang.CharSequence) data().deepCopy(fields()[5].schema(), other.gameCode);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.gameSummaryHomeTeamId)) {
        this.gameSummaryHomeTeamId = (java.lang.Integer) data().deepCopy(fields()[6].schema(), other.gameSummaryHomeTeamId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.gameSummaryVisitorTeamId)) {
        this.gameSummaryVisitorTeamId = (java.lang.Integer) data().deepCopy(fields()[7].schema(), other.gameSummaryVisitorTeamId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.season)) {
        this.season = (java.lang.Integer) data().deepCopy(fields()[8].schema(), other.season);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.livePeriod)) {
        this.livePeriod = (java.lang.Integer) data().deepCopy(fields()[9].schema(), other.livePeriod);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.livePcTime)) {
        this.livePcTime = (java.lang.Integer) data().deepCopy(fields()[10].schema(), other.livePcTime);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.natlTvBroadcasterAbbreviation)) {
        this.natlTvBroadcasterAbbreviation = (java.lang.CharSequence) data().deepCopy(fields()[11].schema(), other.natlTvBroadcasterAbbreviation);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.livePeriodTimeBcast)) {
        this.livePeriodTimeBcast = (java.lang.CharSequence) data().deepCopy(fields()[12].schema(), other.livePeriodTimeBcast);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.whStatus)) {
        this.whStatus = (java.lang.Integer) data().deepCopy(fields()[13].schema(), other.whStatus);
        fieldSetFlags()[13] = true;
      }
    }

    /** Gets the value of the 'gameSummaryDateEst' field */
    public java.lang.CharSequence getGameSummaryDateEst() {
      return gameSummaryDateEst;
    }
    
    /** Sets the value of the 'gameSummaryDateEst' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setGameSummaryDateEst(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.gameSummaryDateEst = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'gameSummaryDateEst' field has been set */
    public boolean hasGameSummaryDateEst() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'gameSummaryDateEst' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearGameSummaryDateEst() {
      gameSummaryDateEst = null;
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'gameSummarySequence' field */
    public java.lang.Integer getGameSummarySequence() {
      return gameSummarySequence;
    }
    
    /** Sets the value of the 'gameSummarySequence' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setGameSummarySequence(int value) {
      validate(fields()[1], value);
      this.gameSummarySequence = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'gameSummarySequence' field has been set */
    public boolean hasGameSummarySequence() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'gameSummarySequence' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearGameSummarySequence() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'gameGameSummaryId' field */
    public java.lang.Integer getGameGameSummaryId() {
      return gameGameSummaryId;
    }
    
    /** Sets the value of the 'gameGameSummaryId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setGameGameSummaryId(int value) {
      validate(fields()[2], value);
      this.gameGameSummaryId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'gameGameSummaryId' field has been set */
    public boolean hasGameGameSummaryId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'gameGameSummaryId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearGameGameSummaryId() {
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'gameStatusId' field */
    public java.lang.Integer getGameStatusId() {
      return gameStatusId;
    }
    
    /** Sets the value of the 'gameStatusId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setGameStatusId(int value) {
      validate(fields()[3], value);
      this.gameStatusId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'gameStatusId' field has been set */
    public boolean hasGameStatusId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'gameStatusId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearGameStatusId() {
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'gameStatusText' field */
    public java.lang.CharSequence getGameStatusText() {
      return gameStatusText;
    }
    
    /** Sets the value of the 'gameStatusText' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setGameStatusText(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.gameStatusText = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'gameStatusText' field has been set */
    public boolean hasGameStatusText() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'gameStatusText' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearGameStatusText() {
      gameStatusText = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'gameCode' field */
    public java.lang.CharSequence getGameCode() {
      return gameCode;
    }
    
    /** Sets the value of the 'gameCode' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setGameCode(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.gameCode = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'gameCode' field has been set */
    public boolean hasGameCode() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'gameCode' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearGameCode() {
      gameCode = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'gameSummaryHomeTeamId' field */
    public java.lang.Integer getGameSummaryHomeTeamId() {
      return gameSummaryHomeTeamId;
    }
    
    /** Sets the value of the 'gameSummaryHomeTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setGameSummaryHomeTeamId(int value) {
      validate(fields()[6], value);
      this.gameSummaryHomeTeamId = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'gameSummaryHomeTeamId' field has been set */
    public boolean hasGameSummaryHomeTeamId() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'gameSummaryHomeTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearGameSummaryHomeTeamId() {
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'gameSummaryVisitorTeamId' field */
    public java.lang.Integer getGameSummaryVisitorTeamId() {
      return gameSummaryVisitorTeamId;
    }
    
    /** Sets the value of the 'gameSummaryVisitorTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setGameSummaryVisitorTeamId(int value) {
      validate(fields()[7], value);
      this.gameSummaryVisitorTeamId = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'gameSummaryVisitorTeamId' field has been set */
    public boolean hasGameSummaryVisitorTeamId() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'gameSummaryVisitorTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearGameSummaryVisitorTeamId() {
      fieldSetFlags()[7] = false;
      return this;
    }
    
    /** Gets the value of the 'season' field */
    public java.lang.Integer getSeason() {
      return season;
    }
    
    /** Sets the value of the 'season' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setSeason(int value) {
      validate(fields()[8], value);
      this.season = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'season' field has been set */
    public boolean hasSeason() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'season' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearSeason() {
      fieldSetFlags()[8] = false;
      return this;
    }
    
    /** Gets the value of the 'livePeriod' field */
    public java.lang.Integer getLivePeriod() {
      return livePeriod;
    }
    
    /** Sets the value of the 'livePeriod' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setLivePeriod(int value) {
      validate(fields()[9], value);
      this.livePeriod = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'livePeriod' field has been set */
    public boolean hasLivePeriod() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'livePeriod' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearLivePeriod() {
      fieldSetFlags()[9] = false;
      return this;
    }
    
    /** Gets the value of the 'livePcTime' field */
    public java.lang.Integer getLivePcTime() {
      return livePcTime;
    }
    
    /** Sets the value of the 'livePcTime' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setLivePcTime(int value) {
      validate(fields()[10], value);
      this.livePcTime = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'livePcTime' field has been set */
    public boolean hasLivePcTime() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'livePcTime' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearLivePcTime() {
      fieldSetFlags()[10] = false;
      return this;
    }
    
    /** Gets the value of the 'natlTvBroadcasterAbbreviation' field */
    public java.lang.CharSequence getNatlTvBroadcasterAbbreviation() {
      return natlTvBroadcasterAbbreviation;
    }
    
    /** Sets the value of the 'natlTvBroadcasterAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setNatlTvBroadcasterAbbreviation(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.natlTvBroadcasterAbbreviation = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'natlTvBroadcasterAbbreviation' field has been set */
    public boolean hasNatlTvBroadcasterAbbreviation() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'natlTvBroadcasterAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearNatlTvBroadcasterAbbreviation() {
      natlTvBroadcasterAbbreviation = null;
      fieldSetFlags()[11] = false;
      return this;
    }
    
    /** Gets the value of the 'livePeriodTimeBcast' field */
    public java.lang.CharSequence getLivePeriodTimeBcast() {
      return livePeriodTimeBcast;
    }
    
    /** Sets the value of the 'livePeriodTimeBcast' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setLivePeriodTimeBcast(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.livePeriodTimeBcast = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'livePeriodTimeBcast' field has been set */
    public boolean hasLivePeriodTimeBcast() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'livePeriodTimeBcast' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearLivePeriodTimeBcast() {
      livePeriodTimeBcast = null;
      fieldSetFlags()[12] = false;
      return this;
    }
    
    /** Gets the value of the 'whStatus' field */
    public java.lang.Integer getWhStatus() {
      return whStatus;
    }
    
    /** Sets the value of the 'whStatus' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder setWhStatus(int value) {
      validate(fields()[13], value);
      this.whStatus = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'whStatus' field has been set */
    public boolean hasWhStatus() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'whStatus' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.GameSummary.Builder clearWhStatus() {
      fieldSetFlags()[13] = false;
      return this;
    }
    
    @Override
    public GameSummary build() {
      try {
        GameSummary record = new GameSummary();
        record.gameSummaryDateEst = fieldSetFlags()[0] ? this.gameSummaryDateEst : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.gameSummarySequence = fieldSetFlags()[1] ? this.gameSummarySequence : (java.lang.Integer) defaultValue(fields()[1]);
        record.gameGameSummaryId = fieldSetFlags()[2] ? this.gameGameSummaryId : (java.lang.Integer) defaultValue(fields()[2]);
        record.gameStatusId = fieldSetFlags()[3] ? this.gameStatusId : (java.lang.Integer) defaultValue(fields()[3]);
        record.gameStatusText = fieldSetFlags()[4] ? this.gameStatusText : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.gameCode = fieldSetFlags()[5] ? this.gameCode : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.gameSummaryHomeTeamId = fieldSetFlags()[6] ? this.gameSummaryHomeTeamId : (java.lang.Integer) defaultValue(fields()[6]);
        record.gameSummaryVisitorTeamId = fieldSetFlags()[7] ? this.gameSummaryVisitorTeamId : (java.lang.Integer) defaultValue(fields()[7]);
        record.season = fieldSetFlags()[8] ? this.season : (java.lang.Integer) defaultValue(fields()[8]);
        record.livePeriod = fieldSetFlags()[9] ? this.livePeriod : (java.lang.Integer) defaultValue(fields()[9]);
        record.livePcTime = fieldSetFlags()[10] ? this.livePcTime : (java.lang.Integer) defaultValue(fields()[10]);
        record.natlTvBroadcasterAbbreviation = fieldSetFlags()[11] ? this.natlTvBroadcasterAbbreviation : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.livePeriodTimeBcast = fieldSetFlags()[12] ? this.livePeriodTimeBcast : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.whStatus = fieldSetFlags()[13] ? this.whStatus : (java.lang.Integer) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public GameSummary.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public GameSummary newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends GameSummary implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'gameSummaryDateEst' field.
		   */
	  public java.lang.CharSequence getGameSummaryDateEst() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameSummaryDateEst' field.
		   * @param value the value to set.
	   */
	  public void setGameSummaryDateEst(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameSummaryDateEst' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameSummaryDateEstDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'gameSummarySequence' field.
		   */
	  public java.lang.Integer getGameSummarySequence() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameSummarySequence' field.
		   * @param value the value to set.
	   */
	  public void setGameSummarySequence(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameSummarySequence' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameSummarySequenceDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'gameGameSummaryId' field.
		   */
	  public java.lang.Integer getGameGameSummaryId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameGameSummaryId' field.
		   * @param value the value to set.
	   */
	  public void setGameGameSummaryId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameGameSummaryId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameGameSummaryIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'gameStatusId' field.
		   */
	  public java.lang.Integer getGameStatusId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameStatusId' field.
		   * @param value the value to set.
	   */
	  public void setGameStatusId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameStatusId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameStatusIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'gameStatusText' field.
		   */
	  public java.lang.CharSequence getGameStatusText() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameStatusText' field.
		   * @param value the value to set.
	   */
	  public void setGameStatusText(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameStatusText' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameStatusTextDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'gameCode' field.
		   */
	  public java.lang.CharSequence getGameCode() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameCode' field.
		   * @param value the value to set.
	   */
	  public void setGameCode(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameCode' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameCodeDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'gameSummaryHomeTeamId' field.
		   */
	  public java.lang.Integer getGameSummaryHomeTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameSummaryHomeTeamId' field.
		   * @param value the value to set.
	   */
	  public void setGameSummaryHomeTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameSummaryHomeTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameSummaryHomeTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'gameSummaryVisitorTeamId' field.
		   */
	  public java.lang.Integer getGameSummaryVisitorTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameSummaryVisitorTeamId' field.
		   * @param value the value to set.
	   */
	  public void setGameSummaryVisitorTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameSummaryVisitorTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameSummaryVisitorTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'season' field.
		   */
	  public java.lang.Integer getSeason() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'season' field.
		   * @param value the value to set.
	   */
	  public void setSeason(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'season' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isSeasonDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'livePeriod' field.
		   */
	  public java.lang.Integer getLivePeriod() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'livePeriod' field.
		   * @param value the value to set.
	   */
	  public void setLivePeriod(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'livePeriod' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLivePeriodDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'livePcTime' field.
		   */
	  public java.lang.Integer getLivePcTime() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'livePcTime' field.
		   * @param value the value to set.
	   */
	  public void setLivePcTime(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'livePcTime' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLivePcTimeDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'natlTvBroadcasterAbbreviation' field.
		   */
	  public java.lang.CharSequence getNatlTvBroadcasterAbbreviation() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'natlTvBroadcasterAbbreviation' field.
		   * @param value the value to set.
	   */
	  public void setNatlTvBroadcasterAbbreviation(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'natlTvBroadcasterAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isNatlTvBroadcasterAbbreviationDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'livePeriodTimeBcast' field.
		   */
	  public java.lang.CharSequence getLivePeriodTimeBcast() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'livePeriodTimeBcast' field.
		   * @param value the value to set.
	   */
	  public void setLivePeriodTimeBcast(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'livePeriodTimeBcast' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLivePeriodTimeBcastDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'whStatus' field.
		   */
	  public java.lang.Integer getWhStatus() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'whStatus' field.
		   * @param value the value to set.
	   */
	  public void setWhStatus(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'whStatus' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isWhStatusDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

