/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo.structs;  
@SuppressWarnings("all")
public class Officials extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Officials\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo.structs\",\"fields\":[{\"name\":\"__g__dirty\",\"type\":\"bytes\",\"doc\":\"Bytes used to represent weather or not a field is dirty.\",\"default\":\"AA==\"},{\"name\":\"officialId\",\"type\":\"long\",\"default\":0},{\"name\":\"officialFirstName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"officialLastName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"officialJerseyNum\",\"type\":\"long\",\"default\":0}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    __G__DIRTY(0, "__g__dirty"),
    OFFICIAL_ID(1, "officialId"),
    OFFICIAL_FIRST_NAME(2, "officialFirstName"),
    OFFICIAL_LAST_NAME(3, "officialLastName"),
    OFFICIAL_JERSEY_NUM(4, "officialJerseyNum"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "__g__dirty",
  "officialId",
  "officialFirstName",
  "officialLastName",
  "officialJerseyNum",
  };

  /** Bytes used to represent weather or not a field is dirty. */
  private java.nio.ByteBuffer __g__dirty = java.nio.ByteBuffer.wrap(new byte[1]);
  private long officialId;
  private java.lang.CharSequence officialFirstName;
  private java.lang.CharSequence officialLastName;
  private long officialJerseyNum;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return __g__dirty;
    case 1: return officialId;
    case 2: return officialFirstName;
    case 3: return officialLastName;
    case 4: return officialJerseyNum;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: __g__dirty = (java.nio.ByteBuffer)(value); break;
    case 1: officialId = (java.lang.Long)(value); break;
    case 2: officialFirstName = (java.lang.CharSequence)(value); break;
    case 3: officialLastName = (java.lang.CharSequence)(value); break;
    case 4: officialJerseyNum = (java.lang.Long)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'officialId' field.
   */
  public java.lang.Long getOfficialId() {
    return officialId;
  }

  /**
   * Sets the value of the 'officialId' field.
   * @param value the value to set.
   */
  public void setOfficialId(java.lang.Long value) {
    this.officialId = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'officialId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isOfficialIdDirty(java.lang.Long value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'officialFirstName' field.
   */
  public java.lang.CharSequence getOfficialFirstName() {
    return officialFirstName;
  }

  /**
   * Sets the value of the 'officialFirstName' field.
   * @param value the value to set.
   */
  public void setOfficialFirstName(java.lang.CharSequence value) {
    this.officialFirstName = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'officialFirstName' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isOfficialFirstNameDirty(java.lang.CharSequence value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'officialLastName' field.
   */
  public java.lang.CharSequence getOfficialLastName() {
    return officialLastName;
  }

  /**
   * Sets the value of the 'officialLastName' field.
   * @param value the value to set.
   */
  public void setOfficialLastName(java.lang.CharSequence value) {
    this.officialLastName = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'officialLastName' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isOfficialLastNameDirty(java.lang.CharSequence value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'officialJerseyNum' field.
   */
  public java.lang.Long getOfficialJerseyNum() {
    return officialJerseyNum;
  }

  /**
   * Sets the value of the 'officialJerseyNum' field.
   * @param value the value to set.
   */
  public void setOfficialJerseyNum(java.lang.Long value) {
    this.officialJerseyNum = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'officialJerseyNum' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isOfficialJerseyNumDirty(java.lang.Long value) {
    return isDirty(4);
  }

  /** Creates a new Officials RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder();
  }
  
  /** Creates a new Officials RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder(other);
  }
  
  /** Creates a new Officials RecordBuilder by copying an existing Officials instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for Officials instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Officials>
    implements org.apache.avro.data.RecordBuilder<Officials> {

    private java.nio.ByteBuffer __g__dirty;
    private long officialId;
    private java.lang.CharSequence officialFirstName;
    private java.lang.CharSequence officialLastName;
    private long officialJerseyNum;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Officials instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.SCHEMA$);
      if (isValidValue(fields()[0], other.__g__dirty)) {
        this.__g__dirty = (java.nio.ByteBuffer) data().deepCopy(fields()[0].schema(), other.__g__dirty);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.officialId)) {
        this.officialId = (java.lang.Long) data().deepCopy(fields()[1].schema(), other.officialId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.officialFirstName)) {
        this.officialFirstName = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.officialFirstName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.officialLastName)) {
        this.officialLastName = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.officialLastName);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.officialJerseyNum)) {
        this.officialJerseyNum = (java.lang.Long) data().deepCopy(fields()[4].schema(), other.officialJerseyNum);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'officialId' field */
    public java.lang.Long getOfficialId() {
      return officialId;
    }
    
    /** Sets the value of the 'officialId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder setOfficialId(long value) {
      validate(fields()[1], value);
      this.officialId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'officialId' field has been set */
    public boolean hasOfficialId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'officialId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder clearOfficialId() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'officialFirstName' field */
    public java.lang.CharSequence getOfficialFirstName() {
      return officialFirstName;
    }
    
    /** Sets the value of the 'officialFirstName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder setOfficialFirstName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.officialFirstName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'officialFirstName' field has been set */
    public boolean hasOfficialFirstName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'officialFirstName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder clearOfficialFirstName() {
      officialFirstName = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'officialLastName' field */
    public java.lang.CharSequence getOfficialLastName() {
      return officialLastName;
    }
    
    /** Sets the value of the 'officialLastName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder setOfficialLastName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.officialLastName = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'officialLastName' field has been set */
    public boolean hasOfficialLastName() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'officialLastName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder clearOfficialLastName() {
      officialLastName = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'officialJerseyNum' field */
    public java.lang.Long getOfficialJerseyNum() {
      return officialJerseyNum;
    }
    
    /** Sets the value of the 'officialJerseyNum' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder setOfficialJerseyNum(long value) {
      validate(fields()[4], value);
      this.officialJerseyNum = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'officialJerseyNum' field has been set */
    public boolean hasOfficialJerseyNum() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'officialJerseyNum' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.Officials.Builder clearOfficialJerseyNum() {
      fieldSetFlags()[4] = false;
      return this;
    }
    
    @Override
    public Officials build() {
      try {
        Officials record = new Officials();
        record.__g__dirty = fieldSetFlags()[0] ? this.__g__dirty : (java.nio.ByteBuffer) java.nio.ByteBuffer.wrap(new byte[1]);
        record.officialId = fieldSetFlags()[1] ? this.officialId : (java.lang.Long) defaultValue(fields()[1]);
        record.officialFirstName = fieldSetFlags()[2] ? this.officialFirstName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.officialLastName = fieldSetFlags()[3] ? this.officialLastName : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.officialJerseyNum = fieldSetFlags()[4] ? this.officialJerseyNum : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public Officials.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public Officials newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends Officials implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  				  /**
	   * Gets the value of the 'officialId' field.
		   */
	  public java.lang.Long getOfficialId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'officialId' field.
		   * @param value the value to set.
	   */
	  public void setOfficialId(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'officialId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isOfficialIdDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'officialFirstName' field.
		   */
	  public java.lang.CharSequence getOfficialFirstName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'officialFirstName' field.
		   * @param value the value to set.
	   */
	  public void setOfficialFirstName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'officialFirstName' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isOfficialFirstNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'officialLastName' field.
		   */
	  public java.lang.CharSequence getOfficialLastName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'officialLastName' field.
		   * @param value the value to set.
	   */
	  public void setOfficialLastName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'officialLastName' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isOfficialLastNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'officialJerseyNum' field.
		   */
	  public java.lang.Long getOfficialJerseyNum() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'officialJerseyNum' field.
		   * @param value the value to set.
	   */
	  public void setOfficialJerseyNum(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'officialJerseyNum' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isOfficialJerseyNumDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

