/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo.structs;  
@SuppressWarnings("all")
public class LastMeeting extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LastMeeting\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo.structs\",\"fields\":[{\"name\":\"gameLastMeetingId\",\"type\":\"int\",\"default\":0},{\"name\":\"lastGameId\",\"type\":\"int\",\"default\":0},{\"name\":\"lastGameDateEst\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameHomeTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"lastGameHomeTeamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameHomeTeamName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameHomeTeamAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameHomeTeamPoints\",\"type\":\"int\",\"default\":0},{\"name\":\"lastGameVisitorTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"lastGameVisitorTeamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameVisitorTeamName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameVisitorTeamCity1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastGameVisitorTeamPoints\",\"type\":\"int\",\"default\":0}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    GAME_LAST_MEETING_ID(0, "gameLastMeetingId"),
    LAST_GAME_ID(1, "lastGameId"),
    LAST_GAME_DATE_EST(2, "lastGameDateEst"),
    LAST_GAME_HOME_TEAM_ID(3, "lastGameHomeTeamId"),
    LAST_GAME_HOME_TEAM_CITY(4, "lastGameHomeTeamCity"),
    LAST_GAME_HOME_TEAM_NAME(5, "lastGameHomeTeamName"),
    LAST_GAME_HOME_TEAM_ABBREVIATION(6, "lastGameHomeTeamAbbreviation"),
    LAST_GAME_HOME_TEAM_POINTS(7, "lastGameHomeTeamPoints"),
    LAST_GAME_VISITOR_TEAM_ID(8, "lastGameVisitorTeamId"),
    LAST_GAME_VISITOR_TEAM_CITY(9, "lastGameVisitorTeamCity"),
    LAST_GAME_VISITOR_TEAM_NAME(10, "lastGameVisitorTeamName"),
    LAST_GAME_VISITOR_TEAM_CITY1(11, "lastGameVisitorTeamCity1"),
    LAST_GAME_VISITOR_TEAM_POINTS(12, "lastGameVisitorTeamPoints"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "gameLastMeetingId",
  "lastGameId",
  "lastGameDateEst",
  "lastGameHomeTeamId",
  "lastGameHomeTeamCity",
  "lastGameHomeTeamName",
  "lastGameHomeTeamAbbreviation",
  "lastGameHomeTeamPoints",
  "lastGameVisitorTeamId",
  "lastGameVisitorTeamCity",
  "lastGameVisitorTeamName",
  "lastGameVisitorTeamCity1",
  "lastGameVisitorTeamPoints",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return LastMeeting._ALL_FIELDS.length;
  }

  private int gameLastMeetingId;
  private int lastGameId;
  private java.lang.CharSequence lastGameDateEst;
  private int lastGameHomeTeamId;
  private java.lang.CharSequence lastGameHomeTeamCity;
  private java.lang.CharSequence lastGameHomeTeamName;
  private java.lang.CharSequence lastGameHomeTeamAbbreviation;
  private int lastGameHomeTeamPoints;
  private int lastGameVisitorTeamId;
  private java.lang.CharSequence lastGameVisitorTeamCity;
  private java.lang.CharSequence lastGameVisitorTeamName;
  private java.lang.CharSequence lastGameVisitorTeamCity1;
  private int lastGameVisitorTeamPoints;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gameLastMeetingId;
    case 1: return lastGameId;
    case 2: return lastGameDateEst;
    case 3: return lastGameHomeTeamId;
    case 4: return lastGameHomeTeamCity;
    case 5: return lastGameHomeTeamName;
    case 6: return lastGameHomeTeamAbbreviation;
    case 7: return lastGameHomeTeamPoints;
    case 8: return lastGameVisitorTeamId;
    case 9: return lastGameVisitorTeamCity;
    case 10: return lastGameVisitorTeamName;
    case 11: return lastGameVisitorTeamCity1;
    case 12: return lastGameVisitorTeamPoints;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: gameLastMeetingId = (java.lang.Integer)(value); break;
    case 1: lastGameId = (java.lang.Integer)(value); break;
    case 2: lastGameDateEst = (java.lang.CharSequence)(value); break;
    case 3: lastGameHomeTeamId = (java.lang.Integer)(value); break;
    case 4: lastGameHomeTeamCity = (java.lang.CharSequence)(value); break;
    case 5: lastGameHomeTeamName = (java.lang.CharSequence)(value); break;
    case 6: lastGameHomeTeamAbbreviation = (java.lang.CharSequence)(value); break;
    case 7: lastGameHomeTeamPoints = (java.lang.Integer)(value); break;
    case 8: lastGameVisitorTeamId = (java.lang.Integer)(value); break;
    case 9: lastGameVisitorTeamCity = (java.lang.CharSequence)(value); break;
    case 10: lastGameVisitorTeamName = (java.lang.CharSequence)(value); break;
    case 11: lastGameVisitorTeamCity1 = (java.lang.CharSequence)(value); break;
    case 12: lastGameVisitorTeamPoints = (java.lang.Integer)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'gameLastMeetingId' field.
   */
  public java.lang.Integer getGameLastMeetingId() {
    return gameLastMeetingId;
  }

  /**
   * Sets the value of the 'gameLastMeetingId' field.
   * @param value the value to set.
   */
  public void setGameLastMeetingId(java.lang.Integer value) {
    this.gameLastMeetingId = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'gameLastMeetingId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameLastMeetingIdDirty(java.lang.Integer value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'lastGameId' field.
   */
  public java.lang.Integer getLastGameId() {
    return lastGameId;
  }

  /**
   * Sets the value of the 'lastGameId' field.
   * @param value the value to set.
   */
  public void setLastGameId(java.lang.Integer value) {
    this.lastGameId = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'lastGameId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastGameIdDirty(java.lang.Integer value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'lastGameDateEst' field.
   */
  public java.lang.CharSequence getLastGameDateEst() {
    return lastGameDateEst;
  }

  /**
   * Sets the value of the 'lastGameDateEst' field.
   * @param value the value to set.
   */
  public void setLastGameDateEst(java.lang.CharSequence value) {
    this.lastGameDateEst = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'lastGameDateEst' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastGameDateEstDirty(java.lang.CharSequence value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'lastGameHomeTeamId' field.
   */
  public java.lang.Integer getLastGameHomeTeamId() {
    return lastGameHomeTeamId;
  }

  /**
   * Sets the value of the 'lastGameHomeTeamId' field.
   * @param value the value to set.
   */
  public void setLastGameHomeTeamId(java.lang.Integer value) {
    this.lastGameHomeTeamId = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'lastGameHomeTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastGameHomeTeamIdDirty(java.lang.Integer value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'lastGameHomeTeamCity' field.
   */
  public java.lang.CharSequence getLastGameHomeTeamCity() {
    return lastGameHomeTeamCity;
  }

  /**
   * Sets the value of the 'lastGameHomeTeamCity' field.
   * @param value the value to set.
   */
  public void setLastGameHomeTeamCity(java.lang.CharSequence value) {
    this.lastGameHomeTeamCity = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'lastGameHomeTeamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastGameHomeTeamCityDirty(java.lang.CharSequence value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'lastGameHomeTeamName' field.
   */
  public java.lang.CharSequence getLastGameHomeTeamName() {
    return lastGameHomeTeamName;
  }

  /**
   * Sets the value of the 'lastGameHomeTeamName' field.
   * @param value the value to set.
   */
  public void setLastGameHomeTeamName(java.lang.CharSequence value) {
    this.lastGameHomeTeamName = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'lastGameHomeTeamName' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastGameHomeTeamNameDirty(java.lang.CharSequence value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'lastGameHomeTeamAbbreviation' field.
   */
  public java.lang.CharSequence getLastGameHomeTeamAbbreviation() {
    return lastGameHomeTeamAbbreviation;
  }

  /**
   * Sets the value of the 'lastGameHomeTeamAbbreviation' field.
   * @param value the value to set.
   */
  public void setLastGameHomeTeamAbbreviation(java.lang.CharSequence value) {
    this.lastGameHomeTeamAbbreviation = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'lastGameHomeTeamAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastGameHomeTeamAbbreviationDirty(java.lang.CharSequence value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'lastGameHomeTeamPoints' field.
   */
  public java.lang.Integer getLastGameHomeTeamPoints() {
    return lastGameHomeTeamPoints;
  }

  /**
   * Sets the value of the 'lastGameHomeTeamPoints' field.
   * @param value the value to set.
   */
  public void setLastGameHomeTeamPoints(java.lang.Integer value) {
    this.lastGameHomeTeamPoints = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'lastGameHomeTeamPoints' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastGameHomeTeamPointsDirty(java.lang.Integer value) {
    return isDirty(7);
  }

  /**
   * Gets the value of the 'lastGameVisitorTeamId' field.
   */
  public java.lang.Integer getLastGameVisitorTeamId() {
    return lastGameVisitorTeamId;
  }

  /**
   * Sets the value of the 'lastGameVisitorTeamId' field.
   * @param value the value to set.
   */
  public void setLastGameVisitorTeamId(java.lang.Integer value) {
    this.lastGameVisitorTeamId = value;
    setDirty(8);
  }
  
  /**
   * Checks the dirty status of the 'lastGameVisitorTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastGameVisitorTeamIdDirty(java.lang.Integer value) {
    return isDirty(8);
  }

  /**
   * Gets the value of the 'lastGameVisitorTeamCity' field.
   */
  public java.lang.CharSequence getLastGameVisitorTeamCity() {
    return lastGameVisitorTeamCity;
  }

  /**
   * Sets the value of the 'lastGameVisitorTeamCity' field.
   * @param value the value to set.
   */
  public void setLastGameVisitorTeamCity(java.lang.CharSequence value) {
    this.lastGameVisitorTeamCity = value;
    setDirty(9);
  }
  
  /**
   * Checks the dirty status of the 'lastGameVisitorTeamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastGameVisitorTeamCityDirty(java.lang.CharSequence value) {
    return isDirty(9);
  }

  /**
   * Gets the value of the 'lastGameVisitorTeamName' field.
   */
  public java.lang.CharSequence getLastGameVisitorTeamName() {
    return lastGameVisitorTeamName;
  }

  /**
   * Sets the value of the 'lastGameVisitorTeamName' field.
   * @param value the value to set.
   */
  public void setLastGameVisitorTeamName(java.lang.CharSequence value) {
    this.lastGameVisitorTeamName = value;
    setDirty(10);
  }
  
  /**
   * Checks the dirty status of the 'lastGameVisitorTeamName' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastGameVisitorTeamNameDirty(java.lang.CharSequence value) {
    return isDirty(10);
  }

  /**
   * Gets the value of the 'lastGameVisitorTeamCity1' field.
   */
  public java.lang.CharSequence getLastGameVisitorTeamCity1() {
    return lastGameVisitorTeamCity1;
  }

  /**
   * Sets the value of the 'lastGameVisitorTeamCity1' field.
   * @param value the value to set.
   */
  public void setLastGameVisitorTeamCity1(java.lang.CharSequence value) {
    this.lastGameVisitorTeamCity1 = value;
    setDirty(11);
  }
  
  /**
   * Checks the dirty status of the 'lastGameVisitorTeamCity1' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastGameVisitorTeamCity1Dirty(java.lang.CharSequence value) {
    return isDirty(11);
  }

  /**
   * Gets the value of the 'lastGameVisitorTeamPoints' field.
   */
  public java.lang.Integer getLastGameVisitorTeamPoints() {
    return lastGameVisitorTeamPoints;
  }

  /**
   * Sets the value of the 'lastGameVisitorTeamPoints' field.
   * @param value the value to set.
   */
  public void setLastGameVisitorTeamPoints(java.lang.Integer value) {
    this.lastGameVisitorTeamPoints = value;
    setDirty(12);
  }
  
  /**
   * Checks the dirty status of the 'lastGameVisitorTeamPoints' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastGameVisitorTeamPointsDirty(java.lang.Integer value) {
    return isDirty(12);
  }

  /** Creates a new LastMeeting RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder();
  }
  
  /** Creates a new LastMeeting RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder(other);
  }
  
  /** Creates a new LastMeeting RecordBuilder by copying an existing LastMeeting instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for LastMeeting instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LastMeeting>
    implements org.apache.avro.data.RecordBuilder<LastMeeting> {

    private int gameLastMeetingId;
    private int lastGameId;
    private java.lang.CharSequence lastGameDateEst;
    private int lastGameHomeTeamId;
    private java.lang.CharSequence lastGameHomeTeamCity;
    private java.lang.CharSequence lastGameHomeTeamName;
    private java.lang.CharSequence lastGameHomeTeamAbbreviation;
    private int lastGameHomeTeamPoints;
    private int lastGameVisitorTeamId;
    private java.lang.CharSequence lastGameVisitorTeamCity;
    private java.lang.CharSequence lastGameVisitorTeamName;
    private java.lang.CharSequence lastGameVisitorTeamCity1;
    private int lastGameVisitorTeamPoints;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing LastMeeting instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.SCHEMA$);
      if (isValidValue(fields()[0], other.gameLastMeetingId)) {
        this.gameLastMeetingId = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.gameLastMeetingId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastGameId)) {
        this.lastGameId = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.lastGameId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastGameDateEst)) {
        this.lastGameDateEst = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.lastGameDateEst);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastGameHomeTeamId)) {
        this.lastGameHomeTeamId = (java.lang.Integer) data().deepCopy(fields()[3].schema(), other.lastGameHomeTeamId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.lastGameHomeTeamCity)) {
        this.lastGameHomeTeamCity = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.lastGameHomeTeamCity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lastGameHomeTeamName)) {
        this.lastGameHomeTeamName = (java.lang.CharSequence) data().deepCopy(fields()[5].schema(), other.lastGameHomeTeamName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.lastGameHomeTeamAbbreviation)) {
        this.lastGameHomeTeamAbbreviation = (java.lang.CharSequence) data().deepCopy(fields()[6].schema(), other.lastGameHomeTeamAbbreviation);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.lastGameHomeTeamPoints)) {
        this.lastGameHomeTeamPoints = (java.lang.Integer) data().deepCopy(fields()[7].schema(), other.lastGameHomeTeamPoints);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.lastGameVisitorTeamId)) {
        this.lastGameVisitorTeamId = (java.lang.Integer) data().deepCopy(fields()[8].schema(), other.lastGameVisitorTeamId);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.lastGameVisitorTeamCity)) {
        this.lastGameVisitorTeamCity = (java.lang.CharSequence) data().deepCopy(fields()[9].schema(), other.lastGameVisitorTeamCity);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.lastGameVisitorTeamName)) {
        this.lastGameVisitorTeamName = (java.lang.CharSequence) data().deepCopy(fields()[10].schema(), other.lastGameVisitorTeamName);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.lastGameVisitorTeamCity1)) {
        this.lastGameVisitorTeamCity1 = (java.lang.CharSequence) data().deepCopy(fields()[11].schema(), other.lastGameVisitorTeamCity1);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.lastGameVisitorTeamPoints)) {
        this.lastGameVisitorTeamPoints = (java.lang.Integer) data().deepCopy(fields()[12].schema(), other.lastGameVisitorTeamPoints);
        fieldSetFlags()[12] = true;
      }
    }

    /** Gets the value of the 'gameLastMeetingId' field */
    public java.lang.Integer getGameLastMeetingId() {
      return gameLastMeetingId;
    }
    
    /** Sets the value of the 'gameLastMeetingId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setGameLastMeetingId(int value) {
      validate(fields()[0], value);
      this.gameLastMeetingId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'gameLastMeetingId' field has been set */
    public boolean hasGameLastMeetingId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'gameLastMeetingId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearGameLastMeetingId() {
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'lastGameId' field */
    public java.lang.Integer getLastGameId() {
      return lastGameId;
    }
    
    /** Sets the value of the 'lastGameId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setLastGameId(int value) {
      validate(fields()[1], value);
      this.lastGameId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'lastGameId' field has been set */
    public boolean hasLastGameId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'lastGameId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearLastGameId() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'lastGameDateEst' field */
    public java.lang.CharSequence getLastGameDateEst() {
      return lastGameDateEst;
    }
    
    /** Sets the value of the 'lastGameDateEst' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setLastGameDateEst(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.lastGameDateEst = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'lastGameDateEst' field has been set */
    public boolean hasLastGameDateEst() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'lastGameDateEst' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearLastGameDateEst() {
      lastGameDateEst = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'lastGameHomeTeamId' field */
    public java.lang.Integer getLastGameHomeTeamId() {
      return lastGameHomeTeamId;
    }
    
    /** Sets the value of the 'lastGameHomeTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setLastGameHomeTeamId(int value) {
      validate(fields()[3], value);
      this.lastGameHomeTeamId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'lastGameHomeTeamId' field has been set */
    public boolean hasLastGameHomeTeamId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'lastGameHomeTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearLastGameHomeTeamId() {
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'lastGameHomeTeamCity' field */
    public java.lang.CharSequence getLastGameHomeTeamCity() {
      return lastGameHomeTeamCity;
    }
    
    /** Sets the value of the 'lastGameHomeTeamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setLastGameHomeTeamCity(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.lastGameHomeTeamCity = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'lastGameHomeTeamCity' field has been set */
    public boolean hasLastGameHomeTeamCity() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'lastGameHomeTeamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearLastGameHomeTeamCity() {
      lastGameHomeTeamCity = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'lastGameHomeTeamName' field */
    public java.lang.CharSequence getLastGameHomeTeamName() {
      return lastGameHomeTeamName;
    }
    
    /** Sets the value of the 'lastGameHomeTeamName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setLastGameHomeTeamName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.lastGameHomeTeamName = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'lastGameHomeTeamName' field has been set */
    public boolean hasLastGameHomeTeamName() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'lastGameHomeTeamName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearLastGameHomeTeamName() {
      lastGameHomeTeamName = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'lastGameHomeTeamAbbreviation' field */
    public java.lang.CharSequence getLastGameHomeTeamAbbreviation() {
      return lastGameHomeTeamAbbreviation;
    }
    
    /** Sets the value of the 'lastGameHomeTeamAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setLastGameHomeTeamAbbreviation(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.lastGameHomeTeamAbbreviation = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'lastGameHomeTeamAbbreviation' field has been set */
    public boolean hasLastGameHomeTeamAbbreviation() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'lastGameHomeTeamAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearLastGameHomeTeamAbbreviation() {
      lastGameHomeTeamAbbreviation = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'lastGameHomeTeamPoints' field */
    public java.lang.Integer getLastGameHomeTeamPoints() {
      return lastGameHomeTeamPoints;
    }
    
    /** Sets the value of the 'lastGameHomeTeamPoints' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setLastGameHomeTeamPoints(int value) {
      validate(fields()[7], value);
      this.lastGameHomeTeamPoints = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'lastGameHomeTeamPoints' field has been set */
    public boolean hasLastGameHomeTeamPoints() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'lastGameHomeTeamPoints' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearLastGameHomeTeamPoints() {
      fieldSetFlags()[7] = false;
      return this;
    }
    
    /** Gets the value of the 'lastGameVisitorTeamId' field */
    public java.lang.Integer getLastGameVisitorTeamId() {
      return lastGameVisitorTeamId;
    }
    
    /** Sets the value of the 'lastGameVisitorTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setLastGameVisitorTeamId(int value) {
      validate(fields()[8], value);
      this.lastGameVisitorTeamId = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'lastGameVisitorTeamId' field has been set */
    public boolean hasLastGameVisitorTeamId() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'lastGameVisitorTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearLastGameVisitorTeamId() {
      fieldSetFlags()[8] = false;
      return this;
    }
    
    /** Gets the value of the 'lastGameVisitorTeamCity' field */
    public java.lang.CharSequence getLastGameVisitorTeamCity() {
      return lastGameVisitorTeamCity;
    }
    
    /** Sets the value of the 'lastGameVisitorTeamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setLastGameVisitorTeamCity(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.lastGameVisitorTeamCity = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'lastGameVisitorTeamCity' field has been set */
    public boolean hasLastGameVisitorTeamCity() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'lastGameVisitorTeamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearLastGameVisitorTeamCity() {
      lastGameVisitorTeamCity = null;
      fieldSetFlags()[9] = false;
      return this;
    }
    
    /** Gets the value of the 'lastGameVisitorTeamName' field */
    public java.lang.CharSequence getLastGameVisitorTeamName() {
      return lastGameVisitorTeamName;
    }
    
    /** Sets the value of the 'lastGameVisitorTeamName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setLastGameVisitorTeamName(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.lastGameVisitorTeamName = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'lastGameVisitorTeamName' field has been set */
    public boolean hasLastGameVisitorTeamName() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'lastGameVisitorTeamName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearLastGameVisitorTeamName() {
      lastGameVisitorTeamName = null;
      fieldSetFlags()[10] = false;
      return this;
    }
    
    /** Gets the value of the 'lastGameVisitorTeamCity1' field */
    public java.lang.CharSequence getLastGameVisitorTeamCity1() {
      return lastGameVisitorTeamCity1;
    }
    
    /** Sets the value of the 'lastGameVisitorTeamCity1' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setLastGameVisitorTeamCity1(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.lastGameVisitorTeamCity1 = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'lastGameVisitorTeamCity1' field has been set */
    public boolean hasLastGameVisitorTeamCity1() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'lastGameVisitorTeamCity1' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearLastGameVisitorTeamCity1() {
      lastGameVisitorTeamCity1 = null;
      fieldSetFlags()[11] = false;
      return this;
    }
    
    /** Gets the value of the 'lastGameVisitorTeamPoints' field */
    public java.lang.Integer getLastGameVisitorTeamPoints() {
      return lastGameVisitorTeamPoints;
    }
    
    /** Sets the value of the 'lastGameVisitorTeamPoints' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder setLastGameVisitorTeamPoints(int value) {
      validate(fields()[12], value);
      this.lastGameVisitorTeamPoints = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'lastGameVisitorTeamPoints' field has been set */
    public boolean hasLastGameVisitorTeamPoints() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'lastGameVisitorTeamPoints' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.LastMeeting.Builder clearLastGameVisitorTeamPoints() {
      fieldSetFlags()[12] = false;
      return this;
    }
    
    @Override
    public LastMeeting build() {
      try {
        LastMeeting record = new LastMeeting();
        record.gameLastMeetingId = fieldSetFlags()[0] ? this.gameLastMeetingId : (java.lang.Integer) defaultValue(fields()[0]);
        record.lastGameId = fieldSetFlags()[1] ? this.lastGameId : (java.lang.Integer) defaultValue(fields()[1]);
        record.lastGameDateEst = fieldSetFlags()[2] ? this.lastGameDateEst : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.lastGameHomeTeamId = fieldSetFlags()[3] ? this.lastGameHomeTeamId : (java.lang.Integer) defaultValue(fields()[3]);
        record.lastGameHomeTeamCity = fieldSetFlags()[4] ? this.lastGameHomeTeamCity : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.lastGameHomeTeamName = fieldSetFlags()[5] ? this.lastGameHomeTeamName : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.lastGameHomeTeamAbbreviation = fieldSetFlags()[6] ? this.lastGameHomeTeamAbbreviation : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.lastGameHomeTeamPoints = fieldSetFlags()[7] ? this.lastGameHomeTeamPoints : (java.lang.Integer) defaultValue(fields()[7]);
        record.lastGameVisitorTeamId = fieldSetFlags()[8] ? this.lastGameVisitorTeamId : (java.lang.Integer) defaultValue(fields()[8]);
        record.lastGameVisitorTeamCity = fieldSetFlags()[9] ? this.lastGameVisitorTeamCity : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.lastGameVisitorTeamName = fieldSetFlags()[10] ? this.lastGameVisitorTeamName : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.lastGameVisitorTeamCity1 = fieldSetFlags()[11] ? this.lastGameVisitorTeamCity1 : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.lastGameVisitorTeamPoints = fieldSetFlags()[12] ? this.lastGameVisitorTeamPoints : (java.lang.Integer) defaultValue(fields()[12]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public LastMeeting.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public LastMeeting newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends LastMeeting implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'gameLastMeetingId' field.
		   */
	  public java.lang.Integer getGameLastMeetingId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameLastMeetingId' field.
		   * @param value the value to set.
	   */
	  public void setGameLastMeetingId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameLastMeetingId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameLastMeetingIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastGameId' field.
		   */
	  public java.lang.Integer getLastGameId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastGameId' field.
		   * @param value the value to set.
	   */
	  public void setLastGameId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastGameId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastGameIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastGameDateEst' field.
		   */
	  public java.lang.CharSequence getLastGameDateEst() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastGameDateEst' field.
		   * @param value the value to set.
	   */
	  public void setLastGameDateEst(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastGameDateEst' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastGameDateEstDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastGameHomeTeamId' field.
		   */
	  public java.lang.Integer getLastGameHomeTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastGameHomeTeamId' field.
		   * @param value the value to set.
	   */
	  public void setLastGameHomeTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastGameHomeTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastGameHomeTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastGameHomeTeamCity' field.
		   */
	  public java.lang.CharSequence getLastGameHomeTeamCity() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastGameHomeTeamCity' field.
		   * @param value the value to set.
	   */
	  public void setLastGameHomeTeamCity(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastGameHomeTeamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastGameHomeTeamCityDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastGameHomeTeamName' field.
		   */
	  public java.lang.CharSequence getLastGameHomeTeamName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastGameHomeTeamName' field.
		   * @param value the value to set.
	   */
	  public void setLastGameHomeTeamName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastGameHomeTeamName' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastGameHomeTeamNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastGameHomeTeamAbbreviation' field.
		   */
	  public java.lang.CharSequence getLastGameHomeTeamAbbreviation() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastGameHomeTeamAbbreviation' field.
		   * @param value the value to set.
	   */
	  public void setLastGameHomeTeamAbbreviation(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastGameHomeTeamAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastGameHomeTeamAbbreviationDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastGameHomeTeamPoints' field.
		   */
	  public java.lang.Integer getLastGameHomeTeamPoints() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastGameHomeTeamPoints' field.
		   * @param value the value to set.
	   */
	  public void setLastGameHomeTeamPoints(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastGameHomeTeamPoints' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastGameHomeTeamPointsDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastGameVisitorTeamId' field.
		   */
	  public java.lang.Integer getLastGameVisitorTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastGameVisitorTeamId' field.
		   * @param value the value to set.
	   */
	  public void setLastGameVisitorTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastGameVisitorTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastGameVisitorTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastGameVisitorTeamCity' field.
		   */
	  public java.lang.CharSequence getLastGameVisitorTeamCity() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastGameVisitorTeamCity' field.
		   * @param value the value to set.
	   */
	  public void setLastGameVisitorTeamCity(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastGameVisitorTeamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastGameVisitorTeamCityDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastGameVisitorTeamName' field.
		   */
	  public java.lang.CharSequence getLastGameVisitorTeamName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastGameVisitorTeamName' field.
		   * @param value the value to set.
	   */
	  public void setLastGameVisitorTeamName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastGameVisitorTeamName' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastGameVisitorTeamNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastGameVisitorTeamCity1' field.
		   */
	  public java.lang.CharSequence getLastGameVisitorTeamCity1() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastGameVisitorTeamCity1' field.
		   * @param value the value to set.
	   */
	  public void setLastGameVisitorTeamCity1(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastGameVisitorTeamCity1' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastGameVisitorTeamCity1Dirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastGameVisitorTeamPoints' field.
		   */
	  public java.lang.Integer getLastGameVisitorTeamPoints() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastGameVisitorTeamPoints' field.
		   * @param value the value to set.
	   */
	  public void setLastGameVisitorTeamPoints(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastGameVisitorTeamPoints' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastGameVisitorTeamPointsDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

