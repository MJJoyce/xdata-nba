/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo;  
@SuppressWarnings("all")
public class PlayByPlay extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlayByPlay\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo\",\"fields\":[{\"name\":\"__g__dirty\",\"type\":\"bytes\",\"doc\":\"Bytes used to represent weather or not a field is dirty.\",\"default\":\"AAA=\"},{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"game_id\",\"type\":\"int\",\"default\":0},{\"name\":\"event_num\",\"type\":\"int\",\"default\":0},{\"name\":\"event_msg_type\",\"type\":\"int\",\"default\":0},{\"name\":\"event_msg_action_type\",\"type\":\"int\",\"default\":0},{\"name\":\"period\",\"type\":\"int\",\"default\":0},{\"name\":\"wc_time_str\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"pc_time_str\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"home_desc\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"neutral_desc\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"visitor_desc\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"score\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"score_margin\",\"type\":\"int\",\"default\":0}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    __G__DIRTY(0, "__g__dirty"),
    ID(1, "id"),
    GAME_ID(2, "game_id"),
    EVENT_NUM(3, "event_num"),
    EVENT_MSG_TYPE(4, "event_msg_type"),
    EVENT_MSG_ACTION_TYPE(5, "event_msg_action_type"),
    PERIOD(6, "period"),
    WC_TIME_STR(7, "wc_time_str"),
    PC_TIME_STR(8, "pc_time_str"),
    HOME_DESC(9, "home_desc"),
    NEUTRAL_DESC(10, "neutral_desc"),
    VISITOR_DESC(11, "visitor_desc"),
    SCORE(12, "score"),
    SCORE_MARGIN(13, "score_margin"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "__g__dirty",
  "id",
  "game_id",
  "event_num",
  "event_msg_type",
  "event_msg_action_type",
  "period",
  "wc_time_str",
  "pc_time_str",
  "home_desc",
  "neutral_desc",
  "visitor_desc",
  "score",
  "score_margin",
  };

  /** Bytes used to represent weather or not a field is dirty. */
  private java.nio.ByteBuffer __g__dirty = java.nio.ByteBuffer.wrap(new byte[2]);
  private java.lang.CharSequence id;
  private int game_id;
  private int event_num;
  private int event_msg_type;
  private int event_msg_action_type;
  private int period;
  private java.lang.CharSequence wc_time_str;
  private java.lang.CharSequence pc_time_str;
  private java.lang.CharSequence home_desc;
  private java.lang.CharSequence neutral_desc;
  private java.lang.CharSequence visitor_desc;
  private java.lang.CharSequence score;
  private int score_margin;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return __g__dirty;
    case 1: return id;
    case 2: return game_id;
    case 3: return event_num;
    case 4: return event_msg_type;
    case 5: return event_msg_action_type;
    case 6: return period;
    case 7: return wc_time_str;
    case 8: return pc_time_str;
    case 9: return home_desc;
    case 10: return neutral_desc;
    case 11: return visitor_desc;
    case 12: return score;
    case 13: return score_margin;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: __g__dirty = (java.nio.ByteBuffer)(value); break;
    case 1: id = (java.lang.CharSequence)(value); break;
    case 2: game_id = (java.lang.Integer)(value); break;
    case 3: event_num = (java.lang.Integer)(value); break;
    case 4: event_msg_type = (java.lang.Integer)(value); break;
    case 5: event_msg_action_type = (java.lang.Integer)(value); break;
    case 6: period = (java.lang.Integer)(value); break;
    case 7: wc_time_str = (java.lang.CharSequence)(value); break;
    case 8: pc_time_str = (java.lang.CharSequence)(value); break;
    case 9: home_desc = (java.lang.CharSequence)(value); break;
    case 10: neutral_desc = (java.lang.CharSequence)(value); break;
    case 11: visitor_desc = (java.lang.CharSequence)(value); break;
    case 12: score = (java.lang.CharSequence)(value); break;
    case 13: score_margin = (java.lang.Integer)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'id' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isIdDirty(java.lang.CharSequence value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'game_id' field.
   */
  public java.lang.Integer getGameId() {
    return game_id;
  }

  /**
   * Sets the value of the 'game_id' field.
   * @param value the value to set.
   */
  public void setGameId(java.lang.Integer value) {
    this.game_id = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'game_id' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameIdDirty(java.lang.Integer value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'event_num' field.
   */
  public java.lang.Integer getEventNum() {
    return event_num;
  }

  /**
   * Sets the value of the 'event_num' field.
   * @param value the value to set.
   */
  public void setEventNum(java.lang.Integer value) {
    this.event_num = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'event_num' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isEventNumDirty(java.lang.Integer value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'event_msg_type' field.
   */
  public java.lang.Integer getEventMsgType() {
    return event_msg_type;
  }

  /**
   * Sets the value of the 'event_msg_type' field.
   * @param value the value to set.
   */
  public void setEventMsgType(java.lang.Integer value) {
    this.event_msg_type = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'event_msg_type' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isEventMsgTypeDirty(java.lang.Integer value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'event_msg_action_type' field.
   */
  public java.lang.Integer getEventMsgActionType() {
    return event_msg_action_type;
  }

  /**
   * Sets the value of the 'event_msg_action_type' field.
   * @param value the value to set.
   */
  public void setEventMsgActionType(java.lang.Integer value) {
    this.event_msg_action_type = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'event_msg_action_type' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isEventMsgActionTypeDirty(java.lang.Integer value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'period' field.
   */
  public java.lang.Integer getPeriod() {
    return period;
  }

  /**
   * Sets the value of the 'period' field.
   * @param value the value to set.
   */
  public void setPeriod(java.lang.Integer value) {
    this.period = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'period' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPeriodDirty(java.lang.Integer value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'wc_time_str' field.
   */
  public java.lang.CharSequence getWcTimeStr() {
    return wc_time_str;
  }

  /**
   * Sets the value of the 'wc_time_str' field.
   * @param value the value to set.
   */
  public void setWcTimeStr(java.lang.CharSequence value) {
    this.wc_time_str = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'wc_time_str' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isWcTimeStrDirty(java.lang.CharSequence value) {
    return isDirty(7);
  }

  /**
   * Gets the value of the 'pc_time_str' field.
   */
  public java.lang.CharSequence getPcTimeStr() {
    return pc_time_str;
  }

  /**
   * Sets the value of the 'pc_time_str' field.
   * @param value the value to set.
   */
  public void setPcTimeStr(java.lang.CharSequence value) {
    this.pc_time_str = value;
    setDirty(8);
  }
  
  /**
   * Checks the dirty status of the 'pc_time_str' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPcTimeStrDirty(java.lang.CharSequence value) {
    return isDirty(8);
  }

  /**
   * Gets the value of the 'home_desc' field.
   */
  public java.lang.CharSequence getHomeDesc() {
    return home_desc;
  }

  /**
   * Sets the value of the 'home_desc' field.
   * @param value the value to set.
   */
  public void setHomeDesc(java.lang.CharSequence value) {
    this.home_desc = value;
    setDirty(9);
  }
  
  /**
   * Checks the dirty status of the 'home_desc' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isHomeDescDirty(java.lang.CharSequence value) {
    return isDirty(9);
  }

  /**
   * Gets the value of the 'neutral_desc' field.
   */
  public java.lang.CharSequence getNeutralDesc() {
    return neutral_desc;
  }

  /**
   * Sets the value of the 'neutral_desc' field.
   * @param value the value to set.
   */
  public void setNeutralDesc(java.lang.CharSequence value) {
    this.neutral_desc = value;
    setDirty(10);
  }
  
  /**
   * Checks the dirty status of the 'neutral_desc' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isNeutralDescDirty(java.lang.CharSequence value) {
    return isDirty(10);
  }

  /**
   * Gets the value of the 'visitor_desc' field.
   */
  public java.lang.CharSequence getVisitorDesc() {
    return visitor_desc;
  }

  /**
   * Sets the value of the 'visitor_desc' field.
   * @param value the value to set.
   */
  public void setVisitorDesc(java.lang.CharSequence value) {
    this.visitor_desc = value;
    setDirty(11);
  }
  
  /**
   * Checks the dirty status of the 'visitor_desc' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isVisitorDescDirty(java.lang.CharSequence value) {
    return isDirty(11);
  }

  /**
   * Gets the value of the 'score' field.
   */
  public java.lang.CharSequence getScore() {
    return score;
  }

  /**
   * Sets the value of the 'score' field.
   * @param value the value to set.
   */
  public void setScore(java.lang.CharSequence value) {
    this.score = value;
    setDirty(12);
  }
  
  /**
   * Checks the dirty status of the 'score' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isScoreDirty(java.lang.CharSequence value) {
    return isDirty(12);
  }

  /**
   * Gets the value of the 'score_margin' field.
   */
  public java.lang.Integer getScoreMargin() {
    return score_margin;
  }

  /**
   * Sets the value of the 'score_margin' field.
   * @param value the value to set.
   */
  public void setScoreMargin(java.lang.Integer value) {
    this.score_margin = value;
    setDirty(13);
  }
  
  /**
   * Checks the dirty status of the 'score_margin' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isScoreMarginDirty(java.lang.Integer value) {
    return isDirty(13);
  }

  /** Creates a new PlayByPlay RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder();
  }
  
  /** Creates a new PlayByPlay RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder(other);
  }
  
  /** Creates a new PlayByPlay RecordBuilder by copying an existing PlayByPlay instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for PlayByPlay instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlayByPlay>
    implements org.apache.avro.data.RecordBuilder<PlayByPlay> {

    private java.nio.ByteBuffer __g__dirty;
    private java.lang.CharSequence id;
    private int game_id;
    private int event_num;
    private int event_msg_type;
    private int event_msg_action_type;
    private int period;
    private java.lang.CharSequence wc_time_str;
    private java.lang.CharSequence pc_time_str;
    private java.lang.CharSequence home_desc;
    private java.lang.CharSequence neutral_desc;
    private java.lang.CharSequence visitor_desc;
    private java.lang.CharSequence score;
    private int score_margin;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing PlayByPlay instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.SCHEMA$);
      if (isValidValue(fields()[0], other.__g__dirty)) {
        this.__g__dirty = (java.nio.ByteBuffer) data().deepCopy(fields()[0].schema(), other.__g__dirty);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.game_id)) {
        this.game_id = (java.lang.Integer) data().deepCopy(fields()[2].schema(), other.game_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.event_num)) {
        this.event_num = (java.lang.Integer) data().deepCopy(fields()[3].schema(), other.event_num);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.event_msg_type)) {
        this.event_msg_type = (java.lang.Integer) data().deepCopy(fields()[4].schema(), other.event_msg_type);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.event_msg_action_type)) {
        this.event_msg_action_type = (java.lang.Integer) data().deepCopy(fields()[5].schema(), other.event_msg_action_type);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.period)) {
        this.period = (java.lang.Integer) data().deepCopy(fields()[6].schema(), other.period);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.wc_time_str)) {
        this.wc_time_str = (java.lang.CharSequence) data().deepCopy(fields()[7].schema(), other.wc_time_str);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.pc_time_str)) {
        this.pc_time_str = (java.lang.CharSequence) data().deepCopy(fields()[8].schema(), other.pc_time_str);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.home_desc)) {
        this.home_desc = (java.lang.CharSequence) data().deepCopy(fields()[9].schema(), other.home_desc);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.neutral_desc)) {
        this.neutral_desc = (java.lang.CharSequence) data().deepCopy(fields()[10].schema(), other.neutral_desc);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.visitor_desc)) {
        this.visitor_desc = (java.lang.CharSequence) data().deepCopy(fields()[11].schema(), other.visitor_desc);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.score)) {
        this.score = (java.lang.CharSequence) data().deepCopy(fields()[12].schema(), other.score);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.score_margin)) {
        this.score_margin = (java.lang.Integer) data().deepCopy(fields()[13].schema(), other.score_margin);
        fieldSetFlags()[13] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'id' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearId() {
      id = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'game_id' field */
    public java.lang.Integer getGameId() {
      return game_id;
    }
    
    /** Sets the value of the 'game_id' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setGameId(int value) {
      validate(fields()[2], value);
      this.game_id = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'game_id' field has been set */
    public boolean hasGameId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'game_id' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearGameId() {
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'event_num' field */
    public java.lang.Integer getEventNum() {
      return event_num;
    }
    
    /** Sets the value of the 'event_num' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setEventNum(int value) {
      validate(fields()[3], value);
      this.event_num = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'event_num' field has been set */
    public boolean hasEventNum() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'event_num' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearEventNum() {
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'event_msg_type' field */
    public java.lang.Integer getEventMsgType() {
      return event_msg_type;
    }
    
    /** Sets the value of the 'event_msg_type' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setEventMsgType(int value) {
      validate(fields()[4], value);
      this.event_msg_type = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'event_msg_type' field has been set */
    public boolean hasEventMsgType() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'event_msg_type' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearEventMsgType() {
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'event_msg_action_type' field */
    public java.lang.Integer getEventMsgActionType() {
      return event_msg_action_type;
    }
    
    /** Sets the value of the 'event_msg_action_type' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setEventMsgActionType(int value) {
      validate(fields()[5], value);
      this.event_msg_action_type = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'event_msg_action_type' field has been set */
    public boolean hasEventMsgActionType() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'event_msg_action_type' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearEventMsgActionType() {
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'period' field */
    public java.lang.Integer getPeriod() {
      return period;
    }
    
    /** Sets the value of the 'period' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setPeriod(int value) {
      validate(fields()[6], value);
      this.period = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'period' field has been set */
    public boolean hasPeriod() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'period' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearPeriod() {
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'wc_time_str' field */
    public java.lang.CharSequence getWcTimeStr() {
      return wc_time_str;
    }
    
    /** Sets the value of the 'wc_time_str' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setWcTimeStr(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.wc_time_str = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'wc_time_str' field has been set */
    public boolean hasWcTimeStr() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'wc_time_str' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearWcTimeStr() {
      wc_time_str = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    /** Gets the value of the 'pc_time_str' field */
    public java.lang.CharSequence getPcTimeStr() {
      return pc_time_str;
    }
    
    /** Sets the value of the 'pc_time_str' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setPcTimeStr(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.pc_time_str = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'pc_time_str' field has been set */
    public boolean hasPcTimeStr() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'pc_time_str' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearPcTimeStr() {
      pc_time_str = null;
      fieldSetFlags()[8] = false;
      return this;
    }
    
    /** Gets the value of the 'home_desc' field */
    public java.lang.CharSequence getHomeDesc() {
      return home_desc;
    }
    
    /** Sets the value of the 'home_desc' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setHomeDesc(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.home_desc = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'home_desc' field has been set */
    public boolean hasHomeDesc() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'home_desc' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearHomeDesc() {
      home_desc = null;
      fieldSetFlags()[9] = false;
      return this;
    }
    
    /** Gets the value of the 'neutral_desc' field */
    public java.lang.CharSequence getNeutralDesc() {
      return neutral_desc;
    }
    
    /** Sets the value of the 'neutral_desc' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setNeutralDesc(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.neutral_desc = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'neutral_desc' field has been set */
    public boolean hasNeutralDesc() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'neutral_desc' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearNeutralDesc() {
      neutral_desc = null;
      fieldSetFlags()[10] = false;
      return this;
    }
    
    /** Gets the value of the 'visitor_desc' field */
    public java.lang.CharSequence getVisitorDesc() {
      return visitor_desc;
    }
    
    /** Sets the value of the 'visitor_desc' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setVisitorDesc(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.visitor_desc = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'visitor_desc' field has been set */
    public boolean hasVisitorDesc() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'visitor_desc' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearVisitorDesc() {
      visitor_desc = null;
      fieldSetFlags()[11] = false;
      return this;
    }
    
    /** Gets the value of the 'score' field */
    public java.lang.CharSequence getScore() {
      return score;
    }
    
    /** Sets the value of the 'score' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setScore(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.score = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'score' field has been set */
    public boolean hasScore() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'score' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearScore() {
      score = null;
      fieldSetFlags()[12] = false;
      return this;
    }
    
    /** Gets the value of the 'score_margin' field */
    public java.lang.Integer getScoreMargin() {
      return score_margin;
    }
    
    /** Sets the value of the 'score_margin' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder setScoreMargin(int value) {
      validate(fields()[13], value);
      this.score_margin = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'score_margin' field has been set */
    public boolean hasScoreMargin() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'score_margin' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.PlayByPlay.Builder clearScoreMargin() {
      fieldSetFlags()[13] = false;
      return this;
    }
    
    @Override
    public PlayByPlay build() {
      try {
        PlayByPlay record = new PlayByPlay();
        record.__g__dirty = fieldSetFlags()[0] ? this.__g__dirty : (java.nio.ByteBuffer) java.nio.ByteBuffer.wrap(new byte[2]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.game_id = fieldSetFlags()[2] ? this.game_id : (java.lang.Integer) defaultValue(fields()[2]);
        record.event_num = fieldSetFlags()[3] ? this.event_num : (java.lang.Integer) defaultValue(fields()[3]);
        record.event_msg_type = fieldSetFlags()[4] ? this.event_msg_type : (java.lang.Integer) defaultValue(fields()[4]);
        record.event_msg_action_type = fieldSetFlags()[5] ? this.event_msg_action_type : (java.lang.Integer) defaultValue(fields()[5]);
        record.period = fieldSetFlags()[6] ? this.period : (java.lang.Integer) defaultValue(fields()[6]);
        record.wc_time_str = fieldSetFlags()[7] ? this.wc_time_str : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.pc_time_str = fieldSetFlags()[8] ? this.pc_time_str : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.home_desc = fieldSetFlags()[9] ? this.home_desc : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.neutral_desc = fieldSetFlags()[10] ? this.neutral_desc : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.visitor_desc = fieldSetFlags()[11] ? this.visitor_desc : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.score = fieldSetFlags()[12] ? this.score : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.score_margin = fieldSetFlags()[13] ? this.score_margin : (java.lang.Integer) defaultValue(fields()[13]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public PlayByPlay.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public PlayByPlay newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends PlayByPlay implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  				  /**
	   * Gets the value of the 'id' field.
		   */
	  public java.lang.CharSequence getId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'id' field.
		   * @param value the value to set.
	   */
	  public void setId(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'id' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isIdDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'game_id' field.
		   */
	  public java.lang.Integer getGameId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'game_id' field.
		   * @param value the value to set.
	   */
	  public void setGameId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'game_id' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'event_num' field.
		   */
	  public java.lang.Integer getEventNum() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'event_num' field.
		   * @param value the value to set.
	   */
	  public void setEventNum(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'event_num' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isEventNumDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'event_msg_type' field.
		   */
	  public java.lang.Integer getEventMsgType() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'event_msg_type' field.
		   * @param value the value to set.
	   */
	  public void setEventMsgType(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'event_msg_type' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isEventMsgTypeDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'event_msg_action_type' field.
		   */
	  public java.lang.Integer getEventMsgActionType() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'event_msg_action_type' field.
		   * @param value the value to set.
	   */
	  public void setEventMsgActionType(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'event_msg_action_type' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isEventMsgActionTypeDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'period' field.
		   */
	  public java.lang.Integer getPeriod() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'period' field.
		   * @param value the value to set.
	   */
	  public void setPeriod(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'period' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPeriodDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'wc_time_str' field.
		   */
	  public java.lang.CharSequence getWcTimeStr() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'wc_time_str' field.
		   * @param value the value to set.
	   */
	  public void setWcTimeStr(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'wc_time_str' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isWcTimeStrDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'pc_time_str' field.
		   */
	  public java.lang.CharSequence getPcTimeStr() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'pc_time_str' field.
		   * @param value the value to set.
	   */
	  public void setPcTimeStr(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'pc_time_str' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPcTimeStrDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'home_desc' field.
		   */
	  public java.lang.CharSequence getHomeDesc() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'home_desc' field.
		   * @param value the value to set.
	   */
	  public void setHomeDesc(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'home_desc' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isHomeDescDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'neutral_desc' field.
		   */
	  public java.lang.CharSequence getNeutralDesc() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'neutral_desc' field.
		   * @param value the value to set.
	   */
	  public void setNeutralDesc(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'neutral_desc' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isNeutralDescDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'visitor_desc' field.
		   */
	  public java.lang.CharSequence getVisitorDesc() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'visitor_desc' field.
		   * @param value the value to set.
	   */
	  public void setVisitorDesc(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'visitor_desc' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isVisitorDescDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'score' field.
		   */
	  public java.lang.CharSequence getScore() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'score' field.
		   * @param value the value to set.
	   */
	  public void setScore(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'score' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isScoreDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'score_margin' field.
		   */
	  public java.lang.Integer getScoreMargin() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'score_margin' field.
		   * @param value the value to set.
	   */
	  public void setScoreMargin(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'score_margin' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isScoreMarginDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

