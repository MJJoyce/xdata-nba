/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo.structs;  
@SuppressWarnings("all")
public class SeasonSeries extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SeasonSeries\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo.structs\",\"fields\":[{\"name\":\"gameSeasonSeriesId\",\"type\":\"int\",\"default\":0},{\"name\":\"seasonSeriesHomeTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"seasonSeriesVisitorTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"gameSeasonSeriesDateEst\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"homeTeamWins\",\"type\":\"int\",\"default\":0},{\"name\":\"homeTeamLosses\",\"type\":\"int\",\"default\":0},{\"name\":\"seriesLeader\",\"type\":[\"null\",\"string\"],\"default\":null}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    GAME_SEASON_SERIES_ID(0, "gameSeasonSeriesId"),
    SEASON_SERIES_HOME_TEAM_ID(1, "seasonSeriesHomeTeamId"),
    SEASON_SERIES_VISITOR_TEAM_ID(2, "seasonSeriesVisitorTeamId"),
    GAME_SEASON_SERIES_DATE_EST(3, "gameSeasonSeriesDateEst"),
    HOME_TEAM_WINS(4, "homeTeamWins"),
    HOME_TEAM_LOSSES(5, "homeTeamLosses"),
    SERIES_LEADER(6, "seriesLeader"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "gameSeasonSeriesId",
  "seasonSeriesHomeTeamId",
  "seasonSeriesVisitorTeamId",
  "gameSeasonSeriesDateEst",
  "homeTeamWins",
  "homeTeamLosses",
  "seriesLeader",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return SeasonSeries._ALL_FIELDS.length;
  }

  private int gameSeasonSeriesId;
  private int seasonSeriesHomeTeamId;
  private int seasonSeriesVisitorTeamId;
  private java.lang.CharSequence gameSeasonSeriesDateEst;
  private int homeTeamWins;
  private int homeTeamLosses;
  private java.lang.CharSequence seriesLeader;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gameSeasonSeriesId;
    case 1: return seasonSeriesHomeTeamId;
    case 2: return seasonSeriesVisitorTeamId;
    case 3: return gameSeasonSeriesDateEst;
    case 4: return homeTeamWins;
    case 5: return homeTeamLosses;
    case 6: return seriesLeader;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: gameSeasonSeriesId = (java.lang.Integer)(value); break;
    case 1: seasonSeriesHomeTeamId = (java.lang.Integer)(value); break;
    case 2: seasonSeriesVisitorTeamId = (java.lang.Integer)(value); break;
    case 3: gameSeasonSeriesDateEst = (java.lang.CharSequence)(value); break;
    case 4: homeTeamWins = (java.lang.Integer)(value); break;
    case 5: homeTeamLosses = (java.lang.Integer)(value); break;
    case 6: seriesLeader = (java.lang.CharSequence)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'gameSeasonSeriesId' field.
   */
  public java.lang.Integer getGameSeasonSeriesId() {
    return gameSeasonSeriesId;
  }

  /**
   * Sets the value of the 'gameSeasonSeriesId' field.
   * @param value the value to set.
   */
  public void setGameSeasonSeriesId(java.lang.Integer value) {
    this.gameSeasonSeriesId = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'gameSeasonSeriesId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameSeasonSeriesIdDirty(java.lang.Integer value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'seasonSeriesHomeTeamId' field.
   */
  public java.lang.Integer getSeasonSeriesHomeTeamId() {
    return seasonSeriesHomeTeamId;
  }

  /**
   * Sets the value of the 'seasonSeriesHomeTeamId' field.
   * @param value the value to set.
   */
  public void setSeasonSeriesHomeTeamId(java.lang.Integer value) {
    this.seasonSeriesHomeTeamId = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'seasonSeriesHomeTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isSeasonSeriesHomeTeamIdDirty(java.lang.Integer value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'seasonSeriesVisitorTeamId' field.
   */
  public java.lang.Integer getSeasonSeriesVisitorTeamId() {
    return seasonSeriesVisitorTeamId;
  }

  /**
   * Sets the value of the 'seasonSeriesVisitorTeamId' field.
   * @param value the value to set.
   */
  public void setSeasonSeriesVisitorTeamId(java.lang.Integer value) {
    this.seasonSeriesVisitorTeamId = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'seasonSeriesVisitorTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isSeasonSeriesVisitorTeamIdDirty(java.lang.Integer value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'gameSeasonSeriesDateEst' field.
   */
  public java.lang.CharSequence getGameSeasonSeriesDateEst() {
    return gameSeasonSeriesDateEst;
  }

  /**
   * Sets the value of the 'gameSeasonSeriesDateEst' field.
   * @param value the value to set.
   */
  public void setGameSeasonSeriesDateEst(java.lang.CharSequence value) {
    this.gameSeasonSeriesDateEst = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'gameSeasonSeriesDateEst' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameSeasonSeriesDateEstDirty(java.lang.CharSequence value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'homeTeamWins' field.
   */
  public java.lang.Integer getHomeTeamWins() {
    return homeTeamWins;
  }

  /**
   * Sets the value of the 'homeTeamWins' field.
   * @param value the value to set.
   */
  public void setHomeTeamWins(java.lang.Integer value) {
    this.homeTeamWins = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'homeTeamWins' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isHomeTeamWinsDirty(java.lang.Integer value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'homeTeamLosses' field.
   */
  public java.lang.Integer getHomeTeamLosses() {
    return homeTeamLosses;
  }

  /**
   * Sets the value of the 'homeTeamLosses' field.
   * @param value the value to set.
   */
  public void setHomeTeamLosses(java.lang.Integer value) {
    this.homeTeamLosses = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'homeTeamLosses' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isHomeTeamLossesDirty(java.lang.Integer value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'seriesLeader' field.
   */
  public java.lang.CharSequence getSeriesLeader() {
    return seriesLeader;
  }

  /**
   * Sets the value of the 'seriesLeader' field.
   * @param value the value to set.
   */
  public void setSeriesLeader(java.lang.CharSequence value) {
    this.seriesLeader = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'seriesLeader' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isSeriesLeaderDirty(java.lang.CharSequence value) {
    return isDirty(6);
  }

  /** Creates a new SeasonSeries RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder();
  }
  
  /** Creates a new SeasonSeries RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder(other);
  }
  
  /** Creates a new SeasonSeries RecordBuilder by copying an existing SeasonSeries instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for SeasonSeries instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SeasonSeries>
    implements org.apache.avro.data.RecordBuilder<SeasonSeries> {

    private int gameSeasonSeriesId;
    private int seasonSeriesHomeTeamId;
    private int seasonSeriesVisitorTeamId;
    private java.lang.CharSequence gameSeasonSeriesDateEst;
    private int homeTeamWins;
    private int homeTeamLosses;
    private java.lang.CharSequence seriesLeader;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing SeasonSeries instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.SCHEMA$);
      if (isValidValue(fields()[0], other.gameSeasonSeriesId)) {
        this.gameSeasonSeriesId = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.gameSeasonSeriesId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.seasonSeriesHomeTeamId)) {
        this.seasonSeriesHomeTeamId = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.seasonSeriesHomeTeamId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.seasonSeriesVisitorTeamId)) {
        this.seasonSeriesVisitorTeamId = (java.lang.Integer) data().deepCopy(fields()[2].schema(), other.seasonSeriesVisitorTeamId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.gameSeasonSeriesDateEst)) {
        this.gameSeasonSeriesDateEst = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.gameSeasonSeriesDateEst);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.homeTeamWins)) {
        this.homeTeamWins = (java.lang.Integer) data().deepCopy(fields()[4].schema(), other.homeTeamWins);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.homeTeamLosses)) {
        this.homeTeamLosses = (java.lang.Integer) data().deepCopy(fields()[5].schema(), other.homeTeamLosses);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.seriesLeader)) {
        this.seriesLeader = (java.lang.CharSequence) data().deepCopy(fields()[6].schema(), other.seriesLeader);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'gameSeasonSeriesId' field */
    public java.lang.Integer getGameSeasonSeriesId() {
      return gameSeasonSeriesId;
    }
    
    /** Sets the value of the 'gameSeasonSeriesId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder setGameSeasonSeriesId(int value) {
      validate(fields()[0], value);
      this.gameSeasonSeriesId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'gameSeasonSeriesId' field has been set */
    public boolean hasGameSeasonSeriesId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'gameSeasonSeriesId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder clearGameSeasonSeriesId() {
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'seasonSeriesHomeTeamId' field */
    public java.lang.Integer getSeasonSeriesHomeTeamId() {
      return seasonSeriesHomeTeamId;
    }
    
    /** Sets the value of the 'seasonSeriesHomeTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder setSeasonSeriesHomeTeamId(int value) {
      validate(fields()[1], value);
      this.seasonSeriesHomeTeamId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'seasonSeriesHomeTeamId' field has been set */
    public boolean hasSeasonSeriesHomeTeamId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'seasonSeriesHomeTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder clearSeasonSeriesHomeTeamId() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'seasonSeriesVisitorTeamId' field */
    public java.lang.Integer getSeasonSeriesVisitorTeamId() {
      return seasonSeriesVisitorTeamId;
    }
    
    /** Sets the value of the 'seasonSeriesVisitorTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder setSeasonSeriesVisitorTeamId(int value) {
      validate(fields()[2], value);
      this.seasonSeriesVisitorTeamId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'seasonSeriesVisitorTeamId' field has been set */
    public boolean hasSeasonSeriesVisitorTeamId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'seasonSeriesVisitorTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder clearSeasonSeriesVisitorTeamId() {
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'gameSeasonSeriesDateEst' field */
    public java.lang.CharSequence getGameSeasonSeriesDateEst() {
      return gameSeasonSeriesDateEst;
    }
    
    /** Sets the value of the 'gameSeasonSeriesDateEst' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder setGameSeasonSeriesDateEst(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.gameSeasonSeriesDateEst = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'gameSeasonSeriesDateEst' field has been set */
    public boolean hasGameSeasonSeriesDateEst() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'gameSeasonSeriesDateEst' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder clearGameSeasonSeriesDateEst() {
      gameSeasonSeriesDateEst = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'homeTeamWins' field */
    public java.lang.Integer getHomeTeamWins() {
      return homeTeamWins;
    }
    
    /** Sets the value of the 'homeTeamWins' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder setHomeTeamWins(int value) {
      validate(fields()[4], value);
      this.homeTeamWins = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'homeTeamWins' field has been set */
    public boolean hasHomeTeamWins() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'homeTeamWins' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder clearHomeTeamWins() {
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'homeTeamLosses' field */
    public java.lang.Integer getHomeTeamLosses() {
      return homeTeamLosses;
    }
    
    /** Sets the value of the 'homeTeamLosses' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder setHomeTeamLosses(int value) {
      validate(fields()[5], value);
      this.homeTeamLosses = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'homeTeamLosses' field has been set */
    public boolean hasHomeTeamLosses() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'homeTeamLosses' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder clearHomeTeamLosses() {
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'seriesLeader' field */
    public java.lang.CharSequence getSeriesLeader() {
      return seriesLeader;
    }
    
    /** Sets the value of the 'seriesLeader' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder setSeriesLeader(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.seriesLeader = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'seriesLeader' field has been set */
    public boolean hasSeriesLeader() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'seriesLeader' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.SeasonSeries.Builder clearSeriesLeader() {
      seriesLeader = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    @Override
    public SeasonSeries build() {
      try {
        SeasonSeries record = new SeasonSeries();
        record.gameSeasonSeriesId = fieldSetFlags()[0] ? this.gameSeasonSeriesId : (java.lang.Integer) defaultValue(fields()[0]);
        record.seasonSeriesHomeTeamId = fieldSetFlags()[1] ? this.seasonSeriesHomeTeamId : (java.lang.Integer) defaultValue(fields()[1]);
        record.seasonSeriesVisitorTeamId = fieldSetFlags()[2] ? this.seasonSeriesVisitorTeamId : (java.lang.Integer) defaultValue(fields()[2]);
        record.gameSeasonSeriesDateEst = fieldSetFlags()[3] ? this.gameSeasonSeriesDateEst : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.homeTeamWins = fieldSetFlags()[4] ? this.homeTeamWins : (java.lang.Integer) defaultValue(fields()[4]);
        record.homeTeamLosses = fieldSetFlags()[5] ? this.homeTeamLosses : (java.lang.Integer) defaultValue(fields()[5]);
        record.seriesLeader = fieldSetFlags()[6] ? this.seriesLeader : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public SeasonSeries.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public SeasonSeries newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends SeasonSeries implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'gameSeasonSeriesId' field.
		   */
	  public java.lang.Integer getGameSeasonSeriesId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameSeasonSeriesId' field.
		   * @param value the value to set.
	   */
	  public void setGameSeasonSeriesId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameSeasonSeriesId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameSeasonSeriesIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'seasonSeriesHomeTeamId' field.
		   */
	  public java.lang.Integer getSeasonSeriesHomeTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'seasonSeriesHomeTeamId' field.
		   * @param value the value to set.
	   */
	  public void setSeasonSeriesHomeTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'seasonSeriesHomeTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isSeasonSeriesHomeTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'seasonSeriesVisitorTeamId' field.
		   */
	  public java.lang.Integer getSeasonSeriesVisitorTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'seasonSeriesVisitorTeamId' field.
		   * @param value the value to set.
	   */
	  public void setSeasonSeriesVisitorTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'seasonSeriesVisitorTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isSeasonSeriesVisitorTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'gameSeasonSeriesDateEst' field.
		   */
	  public java.lang.CharSequence getGameSeasonSeriesDateEst() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameSeasonSeriesDateEst' field.
		   * @param value the value to set.
	   */
	  public void setGameSeasonSeriesDateEst(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameSeasonSeriesDateEst' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameSeasonSeriesDateEstDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'homeTeamWins' field.
		   */
	  public java.lang.Integer getHomeTeamWins() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'homeTeamWins' field.
		   * @param value the value to set.
	   */
	  public void setHomeTeamWins(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'homeTeamWins' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isHomeTeamWinsDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'homeTeamLosses' field.
		   */
	  public java.lang.Integer getHomeTeamLosses() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'homeTeamLosses' field.
		   * @param value the value to set.
	   */
	  public void setHomeTeamLosses(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'homeTeamLosses' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isHomeTeamLossesDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'seriesLeader' field.
		   */
	  public java.lang.CharSequence getSeriesLeader() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'seriesLeader' field.
		   * @param value the value to set.
	   */
	  public void setSeriesLeader(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'seriesLeader' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isSeriesLeaderDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

