/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo.structs;  
@SuppressWarnings("all")
public class OtherStats extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OtherStats\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo.structs\",\"fields\":[{\"name\":\"leagueId\",\"type\":\"int\",\"default\":0},{\"name\":\"seasonId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"teamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ptsPaint\",\"type\":\"int\",\"default\":0},{\"name\":\"pts2ndChance\",\"type\":\"int\",\"default\":0},{\"name\":\"ptsFb\",\"type\":\"long\",\"default\":0},{\"name\":\"largestLead\",\"type\":\"int\",\"default\":0},{\"name\":\"leadChanges\",\"type\":\"int\",\"default\":0},{\"name\":\"timesTied\",\"type\":\"long\",\"default\":0}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    LEAGUE_ID(0, "leagueId"),
    SEASON_ID(1, "seasonId"),
    TEAM_ID(2, "teamId"),
    TEAM_ABBREVIATION(3, "teamAbbreviation"),
    TEAM_CITY(4, "teamCity"),
    PTS_PAINT(5, "ptsPaint"),
    PTS2ND_CHANCE(6, "pts2ndChance"),
    PTS_FB(7, "ptsFb"),
    LARGEST_LEAD(8, "largestLead"),
    LEAD_CHANGES(9, "leadChanges"),
    TIMES_TIED(10, "timesTied"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "leagueId",
  "seasonId",
  "teamId",
  "teamAbbreviation",
  "teamCity",
  "ptsPaint",
  "pts2ndChance",
  "ptsFb",
  "largestLead",
  "leadChanges",
  "timesTied",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return OtherStats._ALL_FIELDS.length;
  }

  private int leagueId;
  private int seasonId;
  private int teamId;
  private java.lang.CharSequence teamAbbreviation;
  private java.lang.CharSequence teamCity;
  private int ptsPaint;
  private int pts2ndChance;
  private long ptsFb;
  private int largestLead;
  private int leadChanges;
  private long timesTied;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return leagueId;
    case 1: return seasonId;
    case 2: return teamId;
    case 3: return teamAbbreviation;
    case 4: return teamCity;
    case 5: return ptsPaint;
    case 6: return pts2ndChance;
    case 7: return ptsFb;
    case 8: return largestLead;
    case 9: return leadChanges;
    case 10: return timesTied;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: leagueId = (java.lang.Integer)(value); break;
    case 1: seasonId = (java.lang.Integer)(value); break;
    case 2: teamId = (java.lang.Integer)(value); break;
    case 3: teamAbbreviation = (java.lang.CharSequence)(value); break;
    case 4: teamCity = (java.lang.CharSequence)(value); break;
    case 5: ptsPaint = (java.lang.Integer)(value); break;
    case 6: pts2ndChance = (java.lang.Integer)(value); break;
    case 7: ptsFb = (java.lang.Long)(value); break;
    case 8: largestLead = (java.lang.Integer)(value); break;
    case 9: leadChanges = (java.lang.Integer)(value); break;
    case 10: timesTied = (java.lang.Long)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'leagueId' field.
   */
  public java.lang.Integer getLeagueId() {
    return leagueId;
  }

  /**
   * Sets the value of the 'leagueId' field.
   * @param value the value to set.
   */
  public void setLeagueId(java.lang.Integer value) {
    this.leagueId = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'leagueId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLeagueIdDirty(java.lang.Integer value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'seasonId' field.
   */
  public java.lang.Integer getSeasonId() {
    return seasonId;
  }

  /**
   * Sets the value of the 'seasonId' field.
   * @param value the value to set.
   */
  public void setSeasonId(java.lang.Integer value) {
    this.seasonId = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'seasonId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isSeasonIdDirty(java.lang.Integer value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'teamId' field.
   */
  public java.lang.Integer getTeamId() {
    return teamId;
  }

  /**
   * Sets the value of the 'teamId' field.
   * @param value the value to set.
   */
  public void setTeamId(java.lang.Integer value) {
    this.teamId = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'teamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTeamIdDirty(java.lang.Integer value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'teamAbbreviation' field.
   */
  public java.lang.CharSequence getTeamAbbreviation() {
    return teamAbbreviation;
  }

  /**
   * Sets the value of the 'teamAbbreviation' field.
   * @param value the value to set.
   */
  public void setTeamAbbreviation(java.lang.CharSequence value) {
    this.teamAbbreviation = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'teamAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTeamAbbreviationDirty(java.lang.CharSequence value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'teamCity' field.
   */
  public java.lang.CharSequence getTeamCity() {
    return teamCity;
  }

  /**
   * Sets the value of the 'teamCity' field.
   * @param value the value to set.
   */
  public void setTeamCity(java.lang.CharSequence value) {
    this.teamCity = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'teamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTeamCityDirty(java.lang.CharSequence value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'ptsPaint' field.
   */
  public java.lang.Integer getPtsPaint() {
    return ptsPaint;
  }

  /**
   * Sets the value of the 'ptsPaint' field.
   * @param value the value to set.
   */
  public void setPtsPaint(java.lang.Integer value) {
    this.ptsPaint = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'ptsPaint' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPtsPaintDirty(java.lang.Integer value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'pts2ndChance' field.
   */
  public java.lang.Integer getPts2ndChance() {
    return pts2ndChance;
  }

  /**
   * Sets the value of the 'pts2ndChance' field.
   * @param value the value to set.
   */
  public void setPts2ndChance(java.lang.Integer value) {
    this.pts2ndChance = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'pts2ndChance' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPts2ndChanceDirty(java.lang.Integer value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'ptsFb' field.
   */
  public java.lang.Long getPtsFb() {
    return ptsFb;
  }

  /**
   * Sets the value of the 'ptsFb' field.
   * @param value the value to set.
   */
  public void setPtsFb(java.lang.Long value) {
    this.ptsFb = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'ptsFb' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPtsFbDirty(java.lang.Long value) {
    return isDirty(7);
  }

  /**
   * Gets the value of the 'largestLead' field.
   */
  public java.lang.Integer getLargestLead() {
    return largestLead;
  }

  /**
   * Sets the value of the 'largestLead' field.
   * @param value the value to set.
   */
  public void setLargestLead(java.lang.Integer value) {
    this.largestLead = value;
    setDirty(8);
  }
  
  /**
   * Checks the dirty status of the 'largestLead' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLargestLeadDirty(java.lang.Integer value) {
    return isDirty(8);
  }

  /**
   * Gets the value of the 'leadChanges' field.
   */
  public java.lang.Integer getLeadChanges() {
    return leadChanges;
  }

  /**
   * Sets the value of the 'leadChanges' field.
   * @param value the value to set.
   */
  public void setLeadChanges(java.lang.Integer value) {
    this.leadChanges = value;
    setDirty(9);
  }
  
  /**
   * Checks the dirty status of the 'leadChanges' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLeadChangesDirty(java.lang.Integer value) {
    return isDirty(9);
  }

  /**
   * Gets the value of the 'timesTied' field.
   */
  public java.lang.Long getTimesTied() {
    return timesTied;
  }

  /**
   * Sets the value of the 'timesTied' field.
   * @param value the value to set.
   */
  public void setTimesTied(java.lang.Long value) {
    this.timesTied = value;
    setDirty(10);
  }
  
  /**
   * Checks the dirty status of the 'timesTied' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTimesTiedDirty(java.lang.Long value) {
    return isDirty(10);
  }

  /** Creates a new OtherStats RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder();
  }
  
  /** Creates a new OtherStats RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder(other);
  }
  
  /** Creates a new OtherStats RecordBuilder by copying an existing OtherStats instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for OtherStats instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OtherStats>
    implements org.apache.avro.data.RecordBuilder<OtherStats> {

    private int leagueId;
    private int seasonId;
    private int teamId;
    private java.lang.CharSequence teamAbbreviation;
    private java.lang.CharSequence teamCity;
    private int ptsPaint;
    private int pts2ndChance;
    private long ptsFb;
    private int largestLead;
    private int leadChanges;
    private long timesTied;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing OtherStats instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.SCHEMA$);
      if (isValidValue(fields()[0], other.leagueId)) {
        this.leagueId = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.leagueId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.seasonId)) {
        this.seasonId = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.seasonId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.teamId)) {
        this.teamId = (java.lang.Integer) data().deepCopy(fields()[2].schema(), other.teamId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.teamAbbreviation)) {
        this.teamAbbreviation = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.teamAbbreviation);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.teamCity)) {
        this.teamCity = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.teamCity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.ptsPaint)) {
        this.ptsPaint = (java.lang.Integer) data().deepCopy(fields()[5].schema(), other.ptsPaint);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pts2ndChance)) {
        this.pts2ndChance = (java.lang.Integer) data().deepCopy(fields()[6].schema(), other.pts2ndChance);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.ptsFb)) {
        this.ptsFb = (java.lang.Long) data().deepCopy(fields()[7].schema(), other.ptsFb);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.largestLead)) {
        this.largestLead = (java.lang.Integer) data().deepCopy(fields()[8].schema(), other.largestLead);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.leadChanges)) {
        this.leadChanges = (java.lang.Integer) data().deepCopy(fields()[9].schema(), other.leadChanges);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.timesTied)) {
        this.timesTied = (java.lang.Long) data().deepCopy(fields()[10].schema(), other.timesTied);
        fieldSetFlags()[10] = true;
      }
    }

    /** Gets the value of the 'leagueId' field */
    public java.lang.Integer getLeagueId() {
      return leagueId;
    }
    
    /** Sets the value of the 'leagueId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder setLeagueId(int value) {
      validate(fields()[0], value);
      this.leagueId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'leagueId' field has been set */
    public boolean hasLeagueId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'leagueId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder clearLeagueId() {
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'seasonId' field */
    public java.lang.Integer getSeasonId() {
      return seasonId;
    }
    
    /** Sets the value of the 'seasonId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder setSeasonId(int value) {
      validate(fields()[1], value);
      this.seasonId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'seasonId' field has been set */
    public boolean hasSeasonId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'seasonId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder clearSeasonId() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'teamId' field */
    public java.lang.Integer getTeamId() {
      return teamId;
    }
    
    /** Sets the value of the 'teamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder setTeamId(int value) {
      validate(fields()[2], value);
      this.teamId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'teamId' field has been set */
    public boolean hasTeamId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'teamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder clearTeamId() {
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'teamAbbreviation' field */
    public java.lang.CharSequence getTeamAbbreviation() {
      return teamAbbreviation;
    }
    
    /** Sets the value of the 'teamAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder setTeamAbbreviation(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.teamAbbreviation = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'teamAbbreviation' field has been set */
    public boolean hasTeamAbbreviation() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'teamAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder clearTeamAbbreviation() {
      teamAbbreviation = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'teamCity' field */
    public java.lang.CharSequence getTeamCity() {
      return teamCity;
    }
    
    /** Sets the value of the 'teamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder setTeamCity(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.teamCity = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'teamCity' field has been set */
    public boolean hasTeamCity() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'teamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder clearTeamCity() {
      teamCity = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'ptsPaint' field */
    public java.lang.Integer getPtsPaint() {
      return ptsPaint;
    }
    
    /** Sets the value of the 'ptsPaint' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder setPtsPaint(int value) {
      validate(fields()[5], value);
      this.ptsPaint = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'ptsPaint' field has been set */
    public boolean hasPtsPaint() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'ptsPaint' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder clearPtsPaint() {
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'pts2ndChance' field */
    public java.lang.Integer getPts2ndChance() {
      return pts2ndChance;
    }
    
    /** Sets the value of the 'pts2ndChance' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder setPts2ndChance(int value) {
      validate(fields()[6], value);
      this.pts2ndChance = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'pts2ndChance' field has been set */
    public boolean hasPts2ndChance() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'pts2ndChance' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder clearPts2ndChance() {
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'ptsFb' field */
    public java.lang.Long getPtsFb() {
      return ptsFb;
    }
    
    /** Sets the value of the 'ptsFb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder setPtsFb(long value) {
      validate(fields()[7], value);
      this.ptsFb = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'ptsFb' field has been set */
    public boolean hasPtsFb() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'ptsFb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder clearPtsFb() {
      fieldSetFlags()[7] = false;
      return this;
    }
    
    /** Gets the value of the 'largestLead' field */
    public java.lang.Integer getLargestLead() {
      return largestLead;
    }
    
    /** Sets the value of the 'largestLead' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder setLargestLead(int value) {
      validate(fields()[8], value);
      this.largestLead = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'largestLead' field has been set */
    public boolean hasLargestLead() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'largestLead' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder clearLargestLead() {
      fieldSetFlags()[8] = false;
      return this;
    }
    
    /** Gets the value of the 'leadChanges' field */
    public java.lang.Integer getLeadChanges() {
      return leadChanges;
    }
    
    /** Sets the value of the 'leadChanges' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder setLeadChanges(int value) {
      validate(fields()[9], value);
      this.leadChanges = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'leadChanges' field has been set */
    public boolean hasLeadChanges() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'leadChanges' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder clearLeadChanges() {
      fieldSetFlags()[9] = false;
      return this;
    }
    
    /** Gets the value of the 'timesTied' field */
    public java.lang.Long getTimesTied() {
      return timesTied;
    }
    
    /** Sets the value of the 'timesTied' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder setTimesTied(long value) {
      validate(fields()[10], value);
      this.timesTied = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'timesTied' field has been set */
    public boolean hasTimesTied() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'timesTied' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.OtherStats.Builder clearTimesTied() {
      fieldSetFlags()[10] = false;
      return this;
    }
    
    @Override
    public OtherStats build() {
      try {
        OtherStats record = new OtherStats();
        record.leagueId = fieldSetFlags()[0] ? this.leagueId : (java.lang.Integer) defaultValue(fields()[0]);
        record.seasonId = fieldSetFlags()[1] ? this.seasonId : (java.lang.Integer) defaultValue(fields()[1]);
        record.teamId = fieldSetFlags()[2] ? this.teamId : (java.lang.Integer) defaultValue(fields()[2]);
        record.teamAbbreviation = fieldSetFlags()[3] ? this.teamAbbreviation : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.teamCity = fieldSetFlags()[4] ? this.teamCity : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.ptsPaint = fieldSetFlags()[5] ? this.ptsPaint : (java.lang.Integer) defaultValue(fields()[5]);
        record.pts2ndChance = fieldSetFlags()[6] ? this.pts2ndChance : (java.lang.Integer) defaultValue(fields()[6]);
        record.ptsFb = fieldSetFlags()[7] ? this.ptsFb : (java.lang.Long) defaultValue(fields()[7]);
        record.largestLead = fieldSetFlags()[8] ? this.largestLead : (java.lang.Integer) defaultValue(fields()[8]);
        record.leadChanges = fieldSetFlags()[9] ? this.leadChanges : (java.lang.Integer) defaultValue(fields()[9]);
        record.timesTied = fieldSetFlags()[10] ? this.timesTied : (java.lang.Long) defaultValue(fields()[10]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public OtherStats.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public OtherStats newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends OtherStats implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'leagueId' field.
		   */
	  public java.lang.Integer getLeagueId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'leagueId' field.
		   * @param value the value to set.
	   */
	  public void setLeagueId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'leagueId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLeagueIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'seasonId' field.
		   */
	  public java.lang.Integer getSeasonId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'seasonId' field.
		   * @param value the value to set.
	   */
	  public void setSeasonId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'seasonId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isSeasonIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'teamId' field.
		   */
	  public java.lang.Integer getTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'teamId' field.
		   * @param value the value to set.
	   */
	  public void setTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'teamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'teamAbbreviation' field.
		   */
	  public java.lang.CharSequence getTeamAbbreviation() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'teamAbbreviation' field.
		   * @param value the value to set.
	   */
	  public void setTeamAbbreviation(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'teamAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTeamAbbreviationDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'teamCity' field.
		   */
	  public java.lang.CharSequence getTeamCity() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'teamCity' field.
		   * @param value the value to set.
	   */
	  public void setTeamCity(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'teamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTeamCityDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'ptsPaint' field.
		   */
	  public java.lang.Integer getPtsPaint() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'ptsPaint' field.
		   * @param value the value to set.
	   */
	  public void setPtsPaint(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'ptsPaint' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPtsPaintDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'pts2ndChance' field.
		   */
	  public java.lang.Integer getPts2ndChance() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'pts2ndChance' field.
		   * @param value the value to set.
	   */
	  public void setPts2ndChance(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'pts2ndChance' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPts2ndChanceDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'ptsFb' field.
		   */
	  public java.lang.Long getPtsFb() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'ptsFb' field.
		   * @param value the value to set.
	   */
	  public void setPtsFb(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'ptsFb' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPtsFbDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'largestLead' field.
		   */
	  public java.lang.Integer getLargestLead() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'largestLead' field.
		   * @param value the value to set.
	   */
	  public void setLargestLead(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'largestLead' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLargestLeadDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'leadChanges' field.
		   */
	  public java.lang.Integer getLeadChanges() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'leadChanges' field.
		   * @param value the value to set.
	   */
	  public void setLeadChanges(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'leadChanges' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLeadChangesDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'timesTied' field.
		   */
	  public java.lang.Long getTimesTied() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'timesTied' field.
		   * @param value the value to set.
	   */
	  public void setTimesTied(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'timesTied' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTimesTiedDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

