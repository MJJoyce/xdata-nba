/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo;  
@SuppressWarnings("all")
public class SeasonSeries extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SeasonSeries\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo\",\"fields\":[{\"name\":\"__g__dirty\",\"type\":\"bytes\",\"doc\":\"Bytes used to represent weather or not a field is dirty.\",\"default\":\"AA==\"},{\"name\":\"gameId\",\"type\":\"int\",\"default\":0},{\"name\":\"homeTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"visitorTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"gameDateEst\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"homeTeamWins\",\"type\":\"int\",\"default\":0},{\"name\":\"homeTeamLosses\",\"type\":\"int\",\"default\":0},{\"name\":\"seriesLeader\",\"type\":[\"null\",\"string\"],\"default\":null}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    __G__DIRTY(0, "__g__dirty"),
    GAME_ID(1, "gameId"),
    HOME_TEAM_ID(2, "homeTeamId"),
    VISITOR_TEAM_ID(3, "visitorTeamId"),
    GAME_DATE_EST(4, "gameDateEst"),
    HOME_TEAM_WINS(5, "homeTeamWins"),
    HOME_TEAM_LOSSES(6, "homeTeamLosses"),
    SERIES_LEADER(7, "seriesLeader"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "__g__dirty",
  "gameId",
  "homeTeamId",
  "visitorTeamId",
  "gameDateEst",
  "homeTeamWins",
  "homeTeamLosses",
  "seriesLeader",
  };

  /** Bytes used to represent weather or not a field is dirty. */
  private java.nio.ByteBuffer __g__dirty = java.nio.ByteBuffer.wrap(new byte[2]);
  private int gameId;
  private int homeTeamId;
  private int visitorTeamId;
  private java.lang.CharSequence gameDateEst;
  private int homeTeamWins;
  private int homeTeamLosses;
  private java.lang.CharSequence seriesLeader;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return __g__dirty;
    case 1: return gameId;
    case 2: return homeTeamId;
    case 3: return visitorTeamId;
    case 4: return gameDateEst;
    case 5: return homeTeamWins;
    case 6: return homeTeamLosses;
    case 7: return seriesLeader;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: __g__dirty = (java.nio.ByteBuffer)(value); break;
    case 1: gameId = (java.lang.Integer)(value); break;
    case 2: homeTeamId = (java.lang.Integer)(value); break;
    case 3: visitorTeamId = (java.lang.Integer)(value); break;
    case 4: gameDateEst = (java.lang.CharSequence)(value); break;
    case 5: homeTeamWins = (java.lang.Integer)(value); break;
    case 6: homeTeamLosses = (java.lang.Integer)(value); break;
    case 7: seriesLeader = (java.lang.CharSequence)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'gameId' field.
   */
  public java.lang.Integer getGameId() {
    return gameId;
  }

  /**
   * Sets the value of the 'gameId' field.
   * @param value the value to set.
   */
  public void setGameId(java.lang.Integer value) {
    this.gameId = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'gameId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameIdDirty(java.lang.Integer value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'homeTeamId' field.
   */
  public java.lang.Integer getHomeTeamId() {
    return homeTeamId;
  }

  /**
   * Sets the value of the 'homeTeamId' field.
   * @param value the value to set.
   */
  public void setHomeTeamId(java.lang.Integer value) {
    this.homeTeamId = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'homeTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isHomeTeamIdDirty(java.lang.Integer value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'visitorTeamId' field.
   */
  public java.lang.Integer getVisitorTeamId() {
    return visitorTeamId;
  }

  /**
   * Sets the value of the 'visitorTeamId' field.
   * @param value the value to set.
   */
  public void setVisitorTeamId(java.lang.Integer value) {
    this.visitorTeamId = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'visitorTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isVisitorTeamIdDirty(java.lang.Integer value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'gameDateEst' field.
   */
  public java.lang.CharSequence getGameDateEst() {
    return gameDateEst;
  }

  /**
   * Sets the value of the 'gameDateEst' field.
   * @param value the value to set.
   */
  public void setGameDateEst(java.lang.CharSequence value) {
    this.gameDateEst = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'gameDateEst' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameDateEstDirty(java.lang.CharSequence value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'homeTeamWins' field.
   */
  public java.lang.Integer getHomeTeamWins() {
    return homeTeamWins;
  }

  /**
   * Sets the value of the 'homeTeamWins' field.
   * @param value the value to set.
   */
  public void setHomeTeamWins(java.lang.Integer value) {
    this.homeTeamWins = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'homeTeamWins' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isHomeTeamWinsDirty(java.lang.Integer value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'homeTeamLosses' field.
   */
  public java.lang.Integer getHomeTeamLosses() {
    return homeTeamLosses;
  }

  /**
   * Sets the value of the 'homeTeamLosses' field.
   * @param value the value to set.
   */
  public void setHomeTeamLosses(java.lang.Integer value) {
    this.homeTeamLosses = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'homeTeamLosses' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isHomeTeamLossesDirty(java.lang.Integer value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'seriesLeader' field.
   */
  public java.lang.CharSequence getSeriesLeader() {
    return seriesLeader;
  }

  /**
   * Sets the value of the 'seriesLeader' field.
   * @param value the value to set.
   */
  public void setSeriesLeader(java.lang.CharSequence value) {
    this.seriesLeader = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'seriesLeader' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isSeriesLeaderDirty(java.lang.CharSequence value) {
    return isDirty(7);
  }

  /** Creates a new SeasonSeries RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder();
  }
  
  /** Creates a new SeasonSeries RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder(other);
  }
  
  /** Creates a new SeasonSeries RecordBuilder by copying an existing SeasonSeries instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToWriteOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for SeasonSeries instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SeasonSeries>
    implements org.apache.avro.data.RecordBuilder<SeasonSeries> {

    private java.nio.ByteBuffer __g__dirty;
    private int gameId;
    private int homeTeamId;
    private int visitorTeamId;
    private java.lang.CharSequence gameDateEst;
    private int homeTeamWins;
    private int homeTeamLosses;
    private java.lang.CharSequence seriesLeader;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing SeasonSeries instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.SCHEMA$);
      if (isValidValue(fields()[0], other.__g__dirty)) {
        this.__g__dirty = (java.nio.ByteBuffer) data().deepCopy(fields()[0].schema(), other.__g__dirty);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gameId)) {
        this.gameId = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.gameId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.homeTeamId)) {
        this.homeTeamId = (java.lang.Integer) data().deepCopy(fields()[2].schema(), other.homeTeamId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.visitorTeamId)) {
        this.visitorTeamId = (java.lang.Integer) data().deepCopy(fields()[3].schema(), other.visitorTeamId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.gameDateEst)) {
        this.gameDateEst = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.gameDateEst);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.homeTeamWins)) {
        this.homeTeamWins = (java.lang.Integer) data().deepCopy(fields()[5].schema(), other.homeTeamWins);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.homeTeamLosses)) {
        this.homeTeamLosses = (java.lang.Integer) data().deepCopy(fields()[6].schema(), other.homeTeamLosses);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.seriesLeader)) {
        this.seriesLeader = (java.lang.CharSequence) data().deepCopy(fields()[7].schema(), other.seriesLeader);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'gameId' field */
    public java.lang.Integer getGameId() {
      return gameId;
    }
    
    /** Sets the value of the 'gameId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder setGameId(int value) {
      validate(fields()[1], value);
      this.gameId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'gameId' field has been set */
    public boolean hasGameId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'gameId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder clearGameId() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'homeTeamId' field */
    public java.lang.Integer getHomeTeamId() {
      return homeTeamId;
    }
    
    /** Sets the value of the 'homeTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder setHomeTeamId(int value) {
      validate(fields()[2], value);
      this.homeTeamId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'homeTeamId' field has been set */
    public boolean hasHomeTeamId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'homeTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder clearHomeTeamId() {
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'visitorTeamId' field */
    public java.lang.Integer getVisitorTeamId() {
      return visitorTeamId;
    }
    
    /** Sets the value of the 'visitorTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder setVisitorTeamId(int value) {
      validate(fields()[3], value);
      this.visitorTeamId = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'visitorTeamId' field has been set */
    public boolean hasVisitorTeamId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'visitorTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder clearVisitorTeamId() {
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'gameDateEst' field */
    public java.lang.CharSequence getGameDateEst() {
      return gameDateEst;
    }
    
    /** Sets the value of the 'gameDateEst' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder setGameDateEst(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.gameDateEst = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'gameDateEst' field has been set */
    public boolean hasGameDateEst() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'gameDateEst' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder clearGameDateEst() {
      gameDateEst = null;
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'homeTeamWins' field */
    public java.lang.Integer getHomeTeamWins() {
      return homeTeamWins;
    }
    
    /** Sets the value of the 'homeTeamWins' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder setHomeTeamWins(int value) {
      validate(fields()[5], value);
      this.homeTeamWins = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'homeTeamWins' field has been set */
    public boolean hasHomeTeamWins() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'homeTeamWins' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder clearHomeTeamWins() {
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'homeTeamLosses' field */
    public java.lang.Integer getHomeTeamLosses() {
      return homeTeamLosses;
    }
    
    /** Sets the value of the 'homeTeamLosses' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder setHomeTeamLosses(int value) {
      validate(fields()[6], value);
      this.homeTeamLosses = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'homeTeamLosses' field has been set */
    public boolean hasHomeTeamLosses() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'homeTeamLosses' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder clearHomeTeamLosses() {
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'seriesLeader' field */
    public java.lang.CharSequence getSeriesLeader() {
      return seriesLeader;
    }
    
    /** Sets the value of the 'seriesLeader' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder setSeriesLeader(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.seriesLeader = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'seriesLeader' field has been set */
    public boolean hasSeriesLeader() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'seriesLeader' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.SeasonSeries.Builder clearSeriesLeader() {
      seriesLeader = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    @Override
    public SeasonSeries build() {
      try {
        SeasonSeries record = new SeasonSeries();
        record.__g__dirty = fieldSetFlags()[0] ? this.__g__dirty : (java.nio.ByteBuffer) java.nio.ByteBuffer.wrap(new byte[2]);
        record.gameId = fieldSetFlags()[1] ? this.gameId : (java.lang.Integer) defaultValue(fields()[1]);
        record.homeTeamId = fieldSetFlags()[2] ? this.homeTeamId : (java.lang.Integer) defaultValue(fields()[2]);
        record.visitorTeamId = fieldSetFlags()[3] ? this.visitorTeamId : (java.lang.Integer) defaultValue(fields()[3]);
        record.gameDateEst = fieldSetFlags()[4] ? this.gameDateEst : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.homeTeamWins = fieldSetFlags()[5] ? this.homeTeamWins : (java.lang.Integer) defaultValue(fields()[5]);
        record.homeTeamLosses = fieldSetFlags()[6] ? this.homeTeamLosses : (java.lang.Integer) defaultValue(fields()[6]);
        record.seriesLeader = fieldSetFlags()[7] ? this.seriesLeader : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public SeasonSeries.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public SeasonSeries newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends SeasonSeries implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  				  /**
	   * Gets the value of the 'gameId' field.
		   */
	  public java.lang.Integer getGameId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameId' field.
		   * @param value the value to set.
	   */
	  public void setGameId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'homeTeamId' field.
		   */
	  public java.lang.Integer getHomeTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'homeTeamId' field.
		   * @param value the value to set.
	   */
	  public void setHomeTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'homeTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isHomeTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'visitorTeamId' field.
		   */
	  public java.lang.Integer getVisitorTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'visitorTeamId' field.
		   * @param value the value to set.
	   */
	  public void setVisitorTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'visitorTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isVisitorTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'gameDateEst' field.
		   */
	  public java.lang.CharSequence getGameDateEst() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameDateEst' field.
		   * @param value the value to set.
	   */
	  public void setGameDateEst(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameDateEst' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameDateEstDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'homeTeamWins' field.
		   */
	  public java.lang.Integer getHomeTeamWins() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'homeTeamWins' field.
		   * @param value the value to set.
	   */
	  public void setHomeTeamWins(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'homeTeamWins' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isHomeTeamWinsDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'homeTeamLosses' field.
		   */
	  public java.lang.Integer getHomeTeamLosses() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'homeTeamLosses' field.
		   * @param value the value to set.
	   */
	  public void setHomeTeamLosses(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'homeTeamLosses' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isHomeTeamLossesDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'seriesLeader' field.
		   */
	  public java.lang.CharSequence getSeriesLeader() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'seriesLeader' field.
		   * @param value the value to set.
	   */
	  public void setSeriesLeader(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'seriesLeader' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isSeriesLeaderDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}