/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo.structs;  
@SuppressWarnings("all")
public class InactivePlayers extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InactivePlayers\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo.structs\",\"fields\":[{\"name\":\"playerId\",\"type\":\"int\",\"default\":0},{\"name\":\"firstName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"lastName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"jerseyNum\",\"type\":\"int\",\"default\":0},{\"name\":\"teamId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"teamName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"teamAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    PLAYER_ID(0, "playerId"),
    FIRST_NAME(1, "firstName"),
    LAST_NAME(2, "lastName"),
    JERSEY_NUM(3, "jerseyNum"),
    TEAM_ID(4, "teamId"),
    TEAM_CITY(5, "teamCity"),
    TEAM_NAME(6, "teamName"),
    TEAM_ABBREVIATION(7, "teamAbbreviation"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "playerId",
  "firstName",
  "lastName",
  "jerseyNum",
  "teamId",
  "teamCity",
  "teamName",
  "teamAbbreviation",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return InactivePlayers._ALL_FIELDS.length;
  }

  private int playerId;
  private java.lang.CharSequence firstName;
  private java.lang.CharSequence lastName;
  private int jerseyNum;
  private int teamId;
  private java.lang.CharSequence teamCity;
  private java.lang.CharSequence teamName;
  private java.lang.CharSequence teamAbbreviation;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return playerId;
    case 1: return firstName;
    case 2: return lastName;
    case 3: return jerseyNum;
    case 4: return teamId;
    case 5: return teamCity;
    case 6: return teamName;
    case 7: return teamAbbreviation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: playerId = (java.lang.Integer)(value); break;
    case 1: firstName = (java.lang.CharSequence)(value); break;
    case 2: lastName = (java.lang.CharSequence)(value); break;
    case 3: jerseyNum = (java.lang.Integer)(value); break;
    case 4: teamId = (java.lang.Integer)(value); break;
    case 5: teamCity = (java.lang.CharSequence)(value); break;
    case 6: teamName = (java.lang.CharSequence)(value); break;
    case 7: teamAbbreviation = (java.lang.CharSequence)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'playerId' field.
   */
  public java.lang.Integer getPlayerId() {
    return playerId;
  }

  /**
   * Sets the value of the 'playerId' field.
   * @param value the value to set.
   */
  public void setPlayerId(java.lang.Integer value) {
    this.playerId = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'playerId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerIdDirty(java.lang.Integer value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'firstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }

  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'firstName' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFirstNameDirty(java.lang.CharSequence value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'lastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }

  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'lastName' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isLastNameDirty(java.lang.CharSequence value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'jerseyNum' field.
   */
  public java.lang.Integer getJerseyNum() {
    return jerseyNum;
  }

  /**
   * Sets the value of the 'jerseyNum' field.
   * @param value the value to set.
   */
  public void setJerseyNum(java.lang.Integer value) {
    this.jerseyNum = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'jerseyNum' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isJerseyNumDirty(java.lang.Integer value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'teamId' field.
   */
  public java.lang.Integer getTeamId() {
    return teamId;
  }

  /**
   * Sets the value of the 'teamId' field.
   * @param value the value to set.
   */
  public void setTeamId(java.lang.Integer value) {
    this.teamId = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'teamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTeamIdDirty(java.lang.Integer value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'teamCity' field.
   */
  public java.lang.CharSequence getTeamCity() {
    return teamCity;
  }

  /**
   * Sets the value of the 'teamCity' field.
   * @param value the value to set.
   */
  public void setTeamCity(java.lang.CharSequence value) {
    this.teamCity = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'teamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTeamCityDirty(java.lang.CharSequence value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'teamName' field.
   */
  public java.lang.CharSequence getTeamName() {
    return teamName;
  }

  /**
   * Sets the value of the 'teamName' field.
   * @param value the value to set.
   */
  public void setTeamName(java.lang.CharSequence value) {
    this.teamName = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'teamName' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTeamNameDirty(java.lang.CharSequence value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'teamAbbreviation' field.
   */
  public java.lang.CharSequence getTeamAbbreviation() {
    return teamAbbreviation;
  }

  /**
   * Sets the value of the 'teamAbbreviation' field.
   * @param value the value to set.
   */
  public void setTeamAbbreviation(java.lang.CharSequence value) {
    this.teamAbbreviation = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'teamAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTeamAbbreviationDirty(java.lang.CharSequence value) {
    return isDirty(7);
  }

  /** Creates a new InactivePlayers RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder();
  }
  
  /** Creates a new InactivePlayers RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder(other);
  }
  
  /** Creates a new InactivePlayers RecordBuilder by copying an existing InactivePlayers instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for InactivePlayers instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InactivePlayers>
    implements org.apache.avro.data.RecordBuilder<InactivePlayers> {

    private int playerId;
    private java.lang.CharSequence firstName;
    private java.lang.CharSequence lastName;
    private int jerseyNum;
    private int teamId;
    private java.lang.CharSequence teamCity;
    private java.lang.CharSequence teamName;
    private java.lang.CharSequence teamAbbreviation;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing InactivePlayers instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.SCHEMA$);
      if (isValidValue(fields()[0], other.playerId)) {
        this.playerId = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.playerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.firstName)) {
        this.firstName = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.firstName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lastName)) {
        this.lastName = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.lastName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.jerseyNum)) {
        this.jerseyNum = (java.lang.Integer) data().deepCopy(fields()[3].schema(), other.jerseyNum);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.teamId)) {
        this.teamId = (java.lang.Integer) data().deepCopy(fields()[4].schema(), other.teamId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.teamCity)) {
        this.teamCity = (java.lang.CharSequence) data().deepCopy(fields()[5].schema(), other.teamCity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.teamName)) {
        this.teamName = (java.lang.CharSequence) data().deepCopy(fields()[6].schema(), other.teamName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.teamAbbreviation)) {
        this.teamAbbreviation = (java.lang.CharSequence) data().deepCopy(fields()[7].schema(), other.teamAbbreviation);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'playerId' field */
    public java.lang.Integer getPlayerId() {
      return playerId;
    }
    
    /** Sets the value of the 'playerId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setPlayerId(int value) {
      validate(fields()[0], value);
      this.playerId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'playerId' field has been set */
    public boolean hasPlayerId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'playerId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearPlayerId() {
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'firstName' field */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }
    
    /** Sets the value of the 'firstName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.firstName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'firstName' field has been set */
    public boolean hasFirstName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'firstName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'lastName' field */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }
    
    /** Sets the value of the 'lastName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.lastName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'lastName' field has been set */
    public boolean hasLastName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'lastName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'jerseyNum' field */
    public java.lang.Integer getJerseyNum() {
      return jerseyNum;
    }
    
    /** Sets the value of the 'jerseyNum' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setJerseyNum(int value) {
      validate(fields()[3], value);
      this.jerseyNum = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'jerseyNum' field has been set */
    public boolean hasJerseyNum() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'jerseyNum' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearJerseyNum() {
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'teamId' field */
    public java.lang.Integer getTeamId() {
      return teamId;
    }
    
    /** Sets the value of the 'teamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setTeamId(int value) {
      validate(fields()[4], value);
      this.teamId = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'teamId' field has been set */
    public boolean hasTeamId() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'teamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearTeamId() {
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'teamCity' field */
    public java.lang.CharSequence getTeamCity() {
      return teamCity;
    }
    
    /** Sets the value of the 'teamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setTeamCity(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.teamCity = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'teamCity' field has been set */
    public boolean hasTeamCity() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'teamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearTeamCity() {
      teamCity = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'teamName' field */
    public java.lang.CharSequence getTeamName() {
      return teamName;
    }
    
    /** Sets the value of the 'teamName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setTeamName(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.teamName = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'teamName' field has been set */
    public boolean hasTeamName() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'teamName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearTeamName() {
      teamName = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'teamAbbreviation' field */
    public java.lang.CharSequence getTeamAbbreviation() {
      return teamAbbreviation;
    }
    
    /** Sets the value of the 'teamAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setTeamAbbreviation(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.teamAbbreviation = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'teamAbbreviation' field has been set */
    public boolean hasTeamAbbreviation() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'teamAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearTeamAbbreviation() {
      teamAbbreviation = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    @Override
    public InactivePlayers build() {
      try {
        InactivePlayers record = new InactivePlayers();
        record.playerId = fieldSetFlags()[0] ? this.playerId : (java.lang.Integer) defaultValue(fields()[0]);
        record.firstName = fieldSetFlags()[1] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lastName = fieldSetFlags()[2] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.jerseyNum = fieldSetFlags()[3] ? this.jerseyNum : (java.lang.Integer) defaultValue(fields()[3]);
        record.teamId = fieldSetFlags()[4] ? this.teamId : (java.lang.Integer) defaultValue(fields()[4]);
        record.teamCity = fieldSetFlags()[5] ? this.teamCity : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.teamName = fieldSetFlags()[6] ? this.teamName : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.teamAbbreviation = fieldSetFlags()[7] ? this.teamAbbreviation : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public InactivePlayers.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public InactivePlayers newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends InactivePlayers implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'playerId' field.
		   */
	  public java.lang.Integer getPlayerId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerId' field.
		   * @param value the value to set.
	   */
	  public void setPlayerId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'firstName' field.
		   */
	  public java.lang.CharSequence getFirstName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'firstName' field.
		   * @param value the value to set.
	   */
	  public void setFirstName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'firstName' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFirstNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'lastName' field.
		   */
	  public java.lang.CharSequence getLastName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'lastName' field.
		   * @param value the value to set.
	   */
	  public void setLastName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'lastName' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isLastNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'jerseyNum' field.
		   */
	  public java.lang.Integer getJerseyNum() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'jerseyNum' field.
		   * @param value the value to set.
	   */
	  public void setJerseyNum(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'jerseyNum' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isJerseyNumDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'teamId' field.
		   */
	  public java.lang.Integer getTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'teamId' field.
		   * @param value the value to set.
	   */
	  public void setTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'teamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'teamCity' field.
		   */
	  public java.lang.CharSequence getTeamCity() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'teamCity' field.
		   * @param value the value to set.
	   */
	  public void setTeamCity(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'teamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTeamCityDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'teamName' field.
		   */
	  public java.lang.CharSequence getTeamName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'teamName' field.
		   * @param value the value to set.
	   */
	  public void setTeamName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'teamName' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTeamNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'teamAbbreviation' field.
		   */
	  public java.lang.CharSequence getTeamAbbreviation() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'teamAbbreviation' field.
		   * @param value the value to set.
	   */
	  public void setTeamAbbreviation(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'teamAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTeamAbbreviationDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

