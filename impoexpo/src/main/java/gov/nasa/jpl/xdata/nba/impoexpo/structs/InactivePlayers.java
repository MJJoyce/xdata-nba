/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo.structs;  
@SuppressWarnings("all")
public class InactivePlayers extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InactivePlayers\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo.structs\",\"fields\":[{\"name\":\"inactivePlayersPlayerId\",\"type\":\"int\",\"default\":0},{\"name\":\"inactivePlayersFirstName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"inactivePlayersLastName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"inactivePlayersJerseyNum\",\"type\":\"int\",\"default\":0},{\"name\":\"inactivePlayersTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"inactivePLayersTeamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"inactivePlayersTeamName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"inactivePlayersTeamAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    INACTIVE_PLAYERS_PLAYER_ID(0, "inactivePlayersPlayerId"),
    INACTIVE_PLAYERS_FIRST_NAME(1, "inactivePlayersFirstName"),
    INACTIVE_PLAYERS_LAST_NAME(2, "inactivePlayersLastName"),
    INACTIVE_PLAYERS_JERSEY_NUM(3, "inactivePlayersJerseyNum"),
    INACTIVE_PLAYERS_TEAM_ID(4, "inactivePlayersTeamId"),
    INACTIVE_PLAYERS_TEAM_CITY(5, "inactivePLayersTeamCity"),
    INACTIVE_PLAYERS_TEAM_NAME(6, "inactivePlayersTeamName"),
    INACTIVE_PLAYERS_TEAM_ABBREVIATION(7, "inactivePlayersTeamAbbreviation"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "inactivePlayersPlayerId",
  "inactivePlayersFirstName",
  "inactivePlayersLastName",
  "inactivePlayersJerseyNum",
  "inactivePlayersTeamId",
  "inactivePLayersTeamCity",
  "inactivePlayersTeamName",
  "inactivePlayersTeamAbbreviation",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return InactivePlayers._ALL_FIELDS.length;
  }

  private int inactivePlayersPlayerId;
  private java.lang.CharSequence inactivePlayersFirstName;
  private java.lang.CharSequence inactivePlayersLastName;
  private int inactivePlayersJerseyNum;
  private int inactivePlayersTeamId;
  private java.lang.CharSequence inactivePLayersTeamCity;
  private java.lang.CharSequence inactivePlayersTeamName;
  private java.lang.CharSequence inactivePlayersTeamAbbreviation;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return inactivePlayersPlayerId;
    case 1: return inactivePlayersFirstName;
    case 2: return inactivePlayersLastName;
    case 3: return inactivePlayersJerseyNum;
    case 4: return inactivePlayersTeamId;
    case 5: return inactivePLayersTeamCity;
    case 6: return inactivePlayersTeamName;
    case 7: return inactivePlayersTeamAbbreviation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: inactivePlayersPlayerId = (java.lang.Integer)(value); break;
    case 1: inactivePlayersFirstName = (java.lang.CharSequence)(value); break;
    case 2: inactivePlayersLastName = (java.lang.CharSequence)(value); break;
    case 3: inactivePlayersJerseyNum = (java.lang.Integer)(value); break;
    case 4: inactivePlayersTeamId = (java.lang.Integer)(value); break;
    case 5: inactivePLayersTeamCity = (java.lang.CharSequence)(value); break;
    case 6: inactivePlayersTeamName = (java.lang.CharSequence)(value); break;
    case 7: inactivePlayersTeamAbbreviation = (java.lang.CharSequence)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'inactivePlayersPlayerId' field.
   */
  public java.lang.Integer getInactivePlayersPlayerId() {
    return inactivePlayersPlayerId;
  }

  /**
   * Sets the value of the 'inactivePlayersPlayerId' field.
   * @param value the value to set.
   */
  public void setInactivePlayersPlayerId(java.lang.Integer value) {
    this.inactivePlayersPlayerId = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'inactivePlayersPlayerId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isInactivePlayersPlayerIdDirty(java.lang.Integer value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'inactivePlayersFirstName' field.
   */
  public java.lang.CharSequence getInactivePlayersFirstName() {
    return inactivePlayersFirstName;
  }

  /**
   * Sets the value of the 'inactivePlayersFirstName' field.
   * @param value the value to set.
   */
  public void setInactivePlayersFirstName(java.lang.CharSequence value) {
    this.inactivePlayersFirstName = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'inactivePlayersFirstName' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isInactivePlayersFirstNameDirty(java.lang.CharSequence value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'inactivePlayersLastName' field.
   */
  public java.lang.CharSequence getInactivePlayersLastName() {
    return inactivePlayersLastName;
  }

  /**
   * Sets the value of the 'inactivePlayersLastName' field.
   * @param value the value to set.
   */
  public void setInactivePlayersLastName(java.lang.CharSequence value) {
    this.inactivePlayersLastName = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'inactivePlayersLastName' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isInactivePlayersLastNameDirty(java.lang.CharSequence value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'inactivePlayersJerseyNum' field.
   */
  public java.lang.Integer getInactivePlayersJerseyNum() {
    return inactivePlayersJerseyNum;
  }

  /**
   * Sets the value of the 'inactivePlayersJerseyNum' field.
   * @param value the value to set.
   */
  public void setInactivePlayersJerseyNum(java.lang.Integer value) {
    this.inactivePlayersJerseyNum = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'inactivePlayersJerseyNum' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isInactivePlayersJerseyNumDirty(java.lang.Integer value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'inactivePlayersTeamId' field.
   */
  public java.lang.Integer getInactivePlayersTeamId() {
    return inactivePlayersTeamId;
  }

  /**
   * Sets the value of the 'inactivePlayersTeamId' field.
   * @param value the value to set.
   */
  public void setInactivePlayersTeamId(java.lang.Integer value) {
    this.inactivePlayersTeamId = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'inactivePlayersTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isInactivePlayersTeamIdDirty(java.lang.Integer value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'inactivePLayersTeamCity' field.
   */
  public java.lang.CharSequence getInactivePLayersTeamCity() {
    return inactivePLayersTeamCity;
  }

  /**
   * Sets the value of the 'inactivePLayersTeamCity' field.
   * @param value the value to set.
   */
  public void setInactivePLayersTeamCity(java.lang.CharSequence value) {
    this.inactivePLayersTeamCity = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'inactivePLayersTeamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isInactivePLayersTeamCityDirty(java.lang.CharSequence value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'inactivePlayersTeamName' field.
   */
  public java.lang.CharSequence getInactivePlayersTeamName() {
    return inactivePlayersTeamName;
  }

  /**
   * Sets the value of the 'inactivePlayersTeamName' field.
   * @param value the value to set.
   */
  public void setInactivePlayersTeamName(java.lang.CharSequence value) {
    this.inactivePlayersTeamName = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'inactivePlayersTeamName' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isInactivePlayersTeamNameDirty(java.lang.CharSequence value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'inactivePlayersTeamAbbreviation' field.
   */
  public java.lang.CharSequence getInactivePlayersTeamAbbreviation() {
    return inactivePlayersTeamAbbreviation;
  }

  /**
   * Sets the value of the 'inactivePlayersTeamAbbreviation' field.
   * @param value the value to set.
   */
  public void setInactivePlayersTeamAbbreviation(java.lang.CharSequence value) {
    this.inactivePlayersTeamAbbreviation = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'inactivePlayersTeamAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isInactivePlayersTeamAbbreviationDirty(java.lang.CharSequence value) {
    return isDirty(7);
  }

  /** Creates a new InactivePlayers RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder();
  }
  
  /** Creates a new InactivePlayers RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder(other);
  }
  
  /** Creates a new InactivePlayers RecordBuilder by copying an existing InactivePlayers instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for InactivePlayers instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InactivePlayers>
    implements org.apache.avro.data.RecordBuilder<InactivePlayers> {

    private int inactivePlayersPlayerId;
    private java.lang.CharSequence inactivePlayersFirstName;
    private java.lang.CharSequence inactivePlayersLastName;
    private int inactivePlayersJerseyNum;
    private int inactivePlayersTeamId;
    private java.lang.CharSequence inactivePLayersTeamCity;
    private java.lang.CharSequence inactivePlayersTeamName;
    private java.lang.CharSequence inactivePlayersTeamAbbreviation;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing InactivePlayers instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.SCHEMA$);
      if (isValidValue(fields()[0], other.inactivePlayersPlayerId)) {
        this.inactivePlayersPlayerId = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.inactivePlayersPlayerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.inactivePlayersFirstName)) {
        this.inactivePlayersFirstName = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.inactivePlayersFirstName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.inactivePlayersLastName)) {
        this.inactivePlayersLastName = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.inactivePlayersLastName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.inactivePlayersJerseyNum)) {
        this.inactivePlayersJerseyNum = (java.lang.Integer) data().deepCopy(fields()[3].schema(), other.inactivePlayersJerseyNum);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.inactivePlayersTeamId)) {
        this.inactivePlayersTeamId = (java.lang.Integer) data().deepCopy(fields()[4].schema(), other.inactivePlayersTeamId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.inactivePLayersTeamCity)) {
        this.inactivePLayersTeamCity = (java.lang.CharSequence) data().deepCopy(fields()[5].schema(), other.inactivePLayersTeamCity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.inactivePlayersTeamName)) {
        this.inactivePlayersTeamName = (java.lang.CharSequence) data().deepCopy(fields()[6].schema(), other.inactivePlayersTeamName);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.inactivePlayersTeamAbbreviation)) {
        this.inactivePlayersTeamAbbreviation = (java.lang.CharSequence) data().deepCopy(fields()[7].schema(), other.inactivePlayersTeamAbbreviation);
        fieldSetFlags()[7] = true;
      }
    }

    /** Gets the value of the 'inactivePlayersPlayerId' field */
    public java.lang.Integer getInactivePlayersPlayerId() {
      return inactivePlayersPlayerId;
    }
    
    /** Sets the value of the 'inactivePlayersPlayerId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setInactivePlayersPlayerId(int value) {
      validate(fields()[0], value);
      this.inactivePlayersPlayerId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'inactivePlayersPlayerId' field has been set */
    public boolean hasInactivePlayersPlayerId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'inactivePlayersPlayerId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearInactivePlayersPlayerId() {
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'inactivePlayersFirstName' field */
    public java.lang.CharSequence getInactivePlayersFirstName() {
      return inactivePlayersFirstName;
    }
    
    /** Sets the value of the 'inactivePlayersFirstName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setInactivePlayersFirstName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.inactivePlayersFirstName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'inactivePlayersFirstName' field has been set */
    public boolean hasInactivePlayersFirstName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'inactivePlayersFirstName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearInactivePlayersFirstName() {
      inactivePlayersFirstName = null;
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'inactivePlayersLastName' field */
    public java.lang.CharSequence getInactivePlayersLastName() {
      return inactivePlayersLastName;
    }
    
    /** Sets the value of the 'inactivePlayersLastName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setInactivePlayersLastName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.inactivePlayersLastName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'inactivePlayersLastName' field has been set */
    public boolean hasInactivePlayersLastName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'inactivePlayersLastName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearInactivePlayersLastName() {
      inactivePlayersLastName = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'inactivePlayersJerseyNum' field */
    public java.lang.Integer getInactivePlayersJerseyNum() {
      return inactivePlayersJerseyNum;
    }
    
    /** Sets the value of the 'inactivePlayersJerseyNum' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setInactivePlayersJerseyNum(int value) {
      validate(fields()[3], value);
      this.inactivePlayersJerseyNum = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'inactivePlayersJerseyNum' field has been set */
    public boolean hasInactivePlayersJerseyNum() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'inactivePlayersJerseyNum' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearInactivePlayersJerseyNum() {
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'inactivePlayersTeamId' field */
    public java.lang.Integer getInactivePlayersTeamId() {
      return inactivePlayersTeamId;
    }
    
    /** Sets the value of the 'inactivePlayersTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setInactivePlayersTeamId(int value) {
      validate(fields()[4], value);
      this.inactivePlayersTeamId = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'inactivePlayersTeamId' field has been set */
    public boolean hasInactivePlayersTeamId() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'inactivePlayersTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearInactivePlayersTeamId() {
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'inactivePLayersTeamCity' field */
    public java.lang.CharSequence getInactivePLayersTeamCity() {
      return inactivePLayersTeamCity;
    }
    
    /** Sets the value of the 'inactivePLayersTeamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setInactivePLayersTeamCity(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.inactivePLayersTeamCity = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'inactivePLayersTeamCity' field has been set */
    public boolean hasInactivePLayersTeamCity() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'inactivePLayersTeamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearInactivePLayersTeamCity() {
      inactivePLayersTeamCity = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'inactivePlayersTeamName' field */
    public java.lang.CharSequence getInactivePlayersTeamName() {
      return inactivePlayersTeamName;
    }
    
    /** Sets the value of the 'inactivePlayersTeamName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setInactivePlayersTeamName(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.inactivePlayersTeamName = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'inactivePlayersTeamName' field has been set */
    public boolean hasInactivePlayersTeamName() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'inactivePlayersTeamName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearInactivePlayersTeamName() {
      inactivePlayersTeamName = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'inactivePlayersTeamAbbreviation' field */
    public java.lang.CharSequence getInactivePlayersTeamAbbreviation() {
      return inactivePlayersTeamAbbreviation;
    }
    
    /** Sets the value of the 'inactivePlayersTeamAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder setInactivePlayersTeamAbbreviation(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.inactivePlayersTeamAbbreviation = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'inactivePlayersTeamAbbreviation' field has been set */
    public boolean hasInactivePlayersTeamAbbreviation() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'inactivePlayersTeamAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.InactivePlayers.Builder clearInactivePlayersTeamAbbreviation() {
      inactivePlayersTeamAbbreviation = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    @Override
    public InactivePlayers build() {
      try {
        InactivePlayers record = new InactivePlayers();
        record.inactivePlayersPlayerId = fieldSetFlags()[0] ? this.inactivePlayersPlayerId : (java.lang.Integer) defaultValue(fields()[0]);
        record.inactivePlayersFirstName = fieldSetFlags()[1] ? this.inactivePlayersFirstName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.inactivePlayersLastName = fieldSetFlags()[2] ? this.inactivePlayersLastName : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.inactivePlayersJerseyNum = fieldSetFlags()[3] ? this.inactivePlayersJerseyNum : (java.lang.Integer) defaultValue(fields()[3]);
        record.inactivePlayersTeamId = fieldSetFlags()[4] ? this.inactivePlayersTeamId : (java.lang.Integer) defaultValue(fields()[4]);
        record.inactivePLayersTeamCity = fieldSetFlags()[5] ? this.inactivePLayersTeamCity : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.inactivePlayersTeamName = fieldSetFlags()[6] ? this.inactivePlayersTeamName : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.inactivePlayersTeamAbbreviation = fieldSetFlags()[7] ? this.inactivePlayersTeamAbbreviation : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public InactivePlayers.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public InactivePlayers newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends InactivePlayers implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'inactivePlayersPlayerId' field.
		   */
	  public java.lang.Integer getInactivePlayersPlayerId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'inactivePlayersPlayerId' field.
		   * @param value the value to set.
	   */
	  public void setInactivePlayersPlayerId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'inactivePlayersPlayerId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isInactivePlayersPlayerIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'inactivePlayersFirstName' field.
		   */
	  public java.lang.CharSequence getInactivePlayersFirstName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'inactivePlayersFirstName' field.
		   * @param value the value to set.
	   */
	  public void setInactivePlayersFirstName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'inactivePlayersFirstName' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isInactivePlayersFirstNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'inactivePlayersLastName' field.
		   */
	  public java.lang.CharSequence getInactivePlayersLastName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'inactivePlayersLastName' field.
		   * @param value the value to set.
	   */
	  public void setInactivePlayersLastName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'inactivePlayersLastName' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isInactivePlayersLastNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'inactivePlayersJerseyNum' field.
		   */
	  public java.lang.Integer getInactivePlayersJerseyNum() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'inactivePlayersJerseyNum' field.
		   * @param value the value to set.
	   */
	  public void setInactivePlayersJerseyNum(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'inactivePlayersJerseyNum' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isInactivePlayersJerseyNumDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'inactivePlayersTeamId' field.
		   */
	  public java.lang.Integer getInactivePlayersTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'inactivePlayersTeamId' field.
		   * @param value the value to set.
	   */
	  public void setInactivePlayersTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'inactivePlayersTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isInactivePlayersTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'inactivePLayersTeamCity' field.
		   */
	  public java.lang.CharSequence getInactivePLayersTeamCity() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'inactivePLayersTeamCity' field.
		   * @param value the value to set.
	   */
	  public void setInactivePLayersTeamCity(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'inactivePLayersTeamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isInactivePLayersTeamCityDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'inactivePlayersTeamName' field.
		   */
	  public java.lang.CharSequence getInactivePlayersTeamName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'inactivePlayersTeamName' field.
		   * @param value the value to set.
	   */
	  public void setInactivePlayersTeamName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'inactivePlayersTeamName' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isInactivePlayersTeamNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'inactivePlayersTeamAbbreviation' field.
		   */
	  public java.lang.CharSequence getInactivePlayersTeamAbbreviation() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'inactivePlayersTeamAbbreviation' field.
		   * @param value the value to set.
	   */
	  public void setInactivePlayersTeamAbbreviation(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'inactivePlayersTeamAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isInactivePlayersTeamAbbreviationDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

