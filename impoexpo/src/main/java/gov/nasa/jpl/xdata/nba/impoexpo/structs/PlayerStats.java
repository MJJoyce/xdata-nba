/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo.structs;  
@SuppressWarnings("all")
public class PlayerStats extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlayerStats\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo.structs\",\"fields\":[{\"name\":\"gamePlayerStatsId\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsTeamId\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsTeamAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"playerStatsTeamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"playerStatsPlayerId\",\"type\":\"int\",\"default\":0},{\"name\":\"playerName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"startPosition\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"comment\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"playerStatsMin\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"playerStatsFgm\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsFga\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsfgPct\",\"type\":\"long\",\"default\":0},{\"name\":\"playerStatsfg3m\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsfg3a\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsfg3Pct\",\"type\":\"long\",\"default\":0},{\"name\":\"playerStatsftm\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsfta\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsftPct\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsoreb\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsdreb\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsreb\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsast\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsstl\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsblk\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsto\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatspf\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsPts\",\"type\":\"int\",\"default\":0},{\"name\":\"playerStatsPlusMinus\",\"type\":\"int\",\"default\":0}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    GAME_PLAYER_STATS_ID(0, "gamePlayerStatsId"),
    PLAYER_STATS_TEAM_ID(1, "playerStatsTeamId"),
    PLAYER_STATS_TEAM_ABBREVIATION(2, "playerStatsTeamAbbreviation"),
    PLAYER_STATS_TEAM_CITY(3, "playerStatsTeamCity"),
    PLAYER_STATS_PLAYER_ID(4, "playerStatsPlayerId"),
    PLAYER_NAME(5, "playerName"),
    START_POSITION(6, "startPosition"),
    COMMENT(7, "comment"),
    PLAYER_STATS_MIN(8, "playerStatsMin"),
    PLAYER_STATS_FGM(9, "playerStatsFgm"),
    PLAYER_STATS_FGA(10, "playerStatsFga"),
    PLAYER_STATSFG_PCT(11, "playerStatsfgPct"),
    PLAYER_STATSFG3M(12, "playerStatsfg3m"),
    PLAYER_STATSFG3A(13, "playerStatsfg3a"),
    PLAYER_STATSFG3PCT(14, "playerStatsfg3Pct"),
    PLAYER_STATSFTM(15, "playerStatsftm"),
    PLAYER_STATSFTA(16, "playerStatsfta"),
    PLAYER_STATSFT_PCT(17, "playerStatsftPct"),
    PLAYER_STATSOREB(18, "playerStatsoreb"),
    PLAYER_STATSDREB(19, "playerStatsdreb"),
    PLAYER_STATSREB(20, "playerStatsreb"),
    PLAYER_STATSAST(21, "playerStatsast"),
    PLAYER_STATSSTL(22, "playerStatsstl"),
    PLAYER_STATSBLK(23, "playerStatsblk"),
    PLAYER_STATSTO(24, "playerStatsto"),
    PLAYER_STATSPF(25, "playerStatspf"),
    PLAYER_STATS_PTS(26, "playerStatsPts"),
    PLAYER_STATS_PLUS_MINUS(27, "playerStatsPlusMinus"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "gamePlayerStatsId",
  "playerStatsTeamId",
  "playerStatsTeamAbbreviation",
  "playerStatsTeamCity",
  "playerStatsPlayerId",
  "playerName",
  "startPosition",
  "comment",
  "playerStatsMin",
  "playerStatsFgm",
  "playerStatsFga",
  "playerStatsfgPct",
  "playerStatsfg3m",
  "playerStatsfg3a",
  "playerStatsfg3Pct",
  "playerStatsftm",
  "playerStatsfta",
  "playerStatsftPct",
  "playerStatsoreb",
  "playerStatsdreb",
  "playerStatsreb",
  "playerStatsast",
  "playerStatsstl",
  "playerStatsblk",
  "playerStatsto",
  "playerStatspf",
  "playerStatsPts",
  "playerStatsPlusMinus",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return PlayerStats._ALL_FIELDS.length;
  }

  private int gamePlayerStatsId;
  private int playerStatsTeamId;
  private java.lang.CharSequence playerStatsTeamAbbreviation;
  private java.lang.CharSequence playerStatsTeamCity;
  private int playerStatsPlayerId;
  private java.lang.CharSequence playerName;
  private java.lang.CharSequence startPosition;
  private java.lang.CharSequence comment;
  private java.lang.CharSequence playerStatsMin;
  private int playerStatsFgm;
  private int playerStatsFga;
  private long playerStatsfgPct;
  private int playerStatsfg3m;
  private int playerStatsfg3a;
  private long playerStatsfg3Pct;
  private int playerStatsftm;
  private int playerStatsfta;
  private int playerStatsftPct;
  private int playerStatsoreb;
  private int playerStatsdreb;
  private int playerStatsreb;
  private int playerStatsast;
  private int playerStatsstl;
  private int playerStatsblk;
  private int playerStatsto;
  private int playerStatspf;
  private int playerStatsPts;
  private int playerStatsPlusMinus;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gamePlayerStatsId;
    case 1: return playerStatsTeamId;
    case 2: return playerStatsTeamAbbreviation;
    case 3: return playerStatsTeamCity;
    case 4: return playerStatsPlayerId;
    case 5: return playerName;
    case 6: return startPosition;
    case 7: return comment;
    case 8: return playerStatsMin;
    case 9: return playerStatsFgm;
    case 10: return playerStatsFga;
    case 11: return playerStatsfgPct;
    case 12: return playerStatsfg3m;
    case 13: return playerStatsfg3a;
    case 14: return playerStatsfg3Pct;
    case 15: return playerStatsftm;
    case 16: return playerStatsfta;
    case 17: return playerStatsftPct;
    case 18: return playerStatsoreb;
    case 19: return playerStatsdreb;
    case 20: return playerStatsreb;
    case 21: return playerStatsast;
    case 22: return playerStatsstl;
    case 23: return playerStatsblk;
    case 24: return playerStatsto;
    case 25: return playerStatspf;
    case 26: return playerStatsPts;
    case 27: return playerStatsPlusMinus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: gamePlayerStatsId = (java.lang.Integer)(value); break;
    case 1: playerStatsTeamId = (java.lang.Integer)(value); break;
    case 2: playerStatsTeamAbbreviation = (java.lang.CharSequence)(value); break;
    case 3: playerStatsTeamCity = (java.lang.CharSequence)(value); break;
    case 4: playerStatsPlayerId = (java.lang.Integer)(value); break;
    case 5: playerName = (java.lang.CharSequence)(value); break;
    case 6: startPosition = (java.lang.CharSequence)(value); break;
    case 7: comment = (java.lang.CharSequence)(value); break;
    case 8: playerStatsMin = (java.lang.CharSequence)(value); break;
    case 9: playerStatsFgm = (java.lang.Integer)(value); break;
    case 10: playerStatsFga = (java.lang.Integer)(value); break;
    case 11: playerStatsfgPct = (java.lang.Long)(value); break;
    case 12: playerStatsfg3m = (java.lang.Integer)(value); break;
    case 13: playerStatsfg3a = (java.lang.Integer)(value); break;
    case 14: playerStatsfg3Pct = (java.lang.Long)(value); break;
    case 15: playerStatsftm = (java.lang.Integer)(value); break;
    case 16: playerStatsfta = (java.lang.Integer)(value); break;
    case 17: playerStatsftPct = (java.lang.Integer)(value); break;
    case 18: playerStatsoreb = (java.lang.Integer)(value); break;
    case 19: playerStatsdreb = (java.lang.Integer)(value); break;
    case 20: playerStatsreb = (java.lang.Integer)(value); break;
    case 21: playerStatsast = (java.lang.Integer)(value); break;
    case 22: playerStatsstl = (java.lang.Integer)(value); break;
    case 23: playerStatsblk = (java.lang.Integer)(value); break;
    case 24: playerStatsto = (java.lang.Integer)(value); break;
    case 25: playerStatspf = (java.lang.Integer)(value); break;
    case 26: playerStatsPts = (java.lang.Integer)(value); break;
    case 27: playerStatsPlusMinus = (java.lang.Integer)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'gamePlayerStatsId' field.
   */
  public java.lang.Integer getGamePlayerStatsId() {
    return gamePlayerStatsId;
  }

  /**
   * Sets the value of the 'gamePlayerStatsId' field.
   * @param value the value to set.
   */
  public void setGamePlayerStatsId(java.lang.Integer value) {
    this.gamePlayerStatsId = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'gamePlayerStatsId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGamePlayerStatsIdDirty(java.lang.Integer value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'playerStatsTeamId' field.
   */
  public java.lang.Integer getPlayerStatsTeamId() {
    return playerStatsTeamId;
  }

  /**
   * Sets the value of the 'playerStatsTeamId' field.
   * @param value the value to set.
   */
  public void setPlayerStatsTeamId(java.lang.Integer value) {
    this.playerStatsTeamId = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsTeamIdDirty(java.lang.Integer value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'playerStatsTeamAbbreviation' field.
   */
  public java.lang.CharSequence getPlayerStatsTeamAbbreviation() {
    return playerStatsTeamAbbreviation;
  }

  /**
   * Sets the value of the 'playerStatsTeamAbbreviation' field.
   * @param value the value to set.
   */
  public void setPlayerStatsTeamAbbreviation(java.lang.CharSequence value) {
    this.playerStatsTeamAbbreviation = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsTeamAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsTeamAbbreviationDirty(java.lang.CharSequence value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'playerStatsTeamCity' field.
   */
  public java.lang.CharSequence getPlayerStatsTeamCity() {
    return playerStatsTeamCity;
  }

  /**
   * Sets the value of the 'playerStatsTeamCity' field.
   * @param value the value to set.
   */
  public void setPlayerStatsTeamCity(java.lang.CharSequence value) {
    this.playerStatsTeamCity = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsTeamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsTeamCityDirty(java.lang.CharSequence value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'playerStatsPlayerId' field.
   */
  public java.lang.Integer getPlayerStatsPlayerId() {
    return playerStatsPlayerId;
  }

  /**
   * Sets the value of the 'playerStatsPlayerId' field.
   * @param value the value to set.
   */
  public void setPlayerStatsPlayerId(java.lang.Integer value) {
    this.playerStatsPlayerId = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsPlayerId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsPlayerIdDirty(java.lang.Integer value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'playerName' field.
   */
  public java.lang.CharSequence getPlayerName() {
    return playerName;
  }

  /**
   * Sets the value of the 'playerName' field.
   * @param value the value to set.
   */
  public void setPlayerName(java.lang.CharSequence value) {
    this.playerName = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'playerName' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerNameDirty(java.lang.CharSequence value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'startPosition' field.
   */
  public java.lang.CharSequence getStartPosition() {
    return startPosition;
  }

  /**
   * Sets the value of the 'startPosition' field.
   * @param value the value to set.
   */
  public void setStartPosition(java.lang.CharSequence value) {
    this.startPosition = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'startPosition' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isStartPositionDirty(java.lang.CharSequence value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'comment' field.
   */
  public java.lang.CharSequence getComment() {
    return comment;
  }

  /**
   * Sets the value of the 'comment' field.
   * @param value the value to set.
   */
  public void setComment(java.lang.CharSequence value) {
    this.comment = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'comment' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isCommentDirty(java.lang.CharSequence value) {
    return isDirty(7);
  }

  /**
   * Gets the value of the 'playerStatsMin' field.
   */
  public java.lang.CharSequence getPlayerStatsMin() {
    return playerStatsMin;
  }

  /**
   * Sets the value of the 'playerStatsMin' field.
   * @param value the value to set.
   */
  public void setPlayerStatsMin(java.lang.CharSequence value) {
    this.playerStatsMin = value;
    setDirty(8);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsMin' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsMinDirty(java.lang.CharSequence value) {
    return isDirty(8);
  }

  /**
   * Gets the value of the 'playerStatsFgm' field.
   */
  public java.lang.Integer getPlayerStatsFgm() {
    return playerStatsFgm;
  }

  /**
   * Sets the value of the 'playerStatsFgm' field.
   * @param value the value to set.
   */
  public void setPlayerStatsFgm(java.lang.Integer value) {
    this.playerStatsFgm = value;
    setDirty(9);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsFgm' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsFgmDirty(java.lang.Integer value) {
    return isDirty(9);
  }

  /**
   * Gets the value of the 'playerStatsFga' field.
   */
  public java.lang.Integer getPlayerStatsFga() {
    return playerStatsFga;
  }

  /**
   * Sets the value of the 'playerStatsFga' field.
   * @param value the value to set.
   */
  public void setPlayerStatsFga(java.lang.Integer value) {
    this.playerStatsFga = value;
    setDirty(10);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsFga' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsFgaDirty(java.lang.Integer value) {
    return isDirty(10);
  }

  /**
   * Gets the value of the 'playerStatsfgPct' field.
   */
  public java.lang.Long getPlayerStatsfgPct() {
    return playerStatsfgPct;
  }

  /**
   * Sets the value of the 'playerStatsfgPct' field.
   * @param value the value to set.
   */
  public void setPlayerStatsfgPct(java.lang.Long value) {
    this.playerStatsfgPct = value;
    setDirty(11);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsfgPct' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsfgPctDirty(java.lang.Long value) {
    return isDirty(11);
  }

  /**
   * Gets the value of the 'playerStatsfg3m' field.
   */
  public java.lang.Integer getPlayerStatsfg3m() {
    return playerStatsfg3m;
  }

  /**
   * Sets the value of the 'playerStatsfg3m' field.
   * @param value the value to set.
   */
  public void setPlayerStatsfg3m(java.lang.Integer value) {
    this.playerStatsfg3m = value;
    setDirty(12);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsfg3m' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsfg3mDirty(java.lang.Integer value) {
    return isDirty(12);
  }

  /**
   * Gets the value of the 'playerStatsfg3a' field.
   */
  public java.lang.Integer getPlayerStatsfg3a() {
    return playerStatsfg3a;
  }

  /**
   * Sets the value of the 'playerStatsfg3a' field.
   * @param value the value to set.
   */
  public void setPlayerStatsfg3a(java.lang.Integer value) {
    this.playerStatsfg3a = value;
    setDirty(13);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsfg3a' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsfg3aDirty(java.lang.Integer value) {
    return isDirty(13);
  }

  /**
   * Gets the value of the 'playerStatsfg3Pct' field.
   */
  public java.lang.Long getPlayerStatsfg3Pct() {
    return playerStatsfg3Pct;
  }

  /**
   * Sets the value of the 'playerStatsfg3Pct' field.
   * @param value the value to set.
   */
  public void setPlayerStatsfg3Pct(java.lang.Long value) {
    this.playerStatsfg3Pct = value;
    setDirty(14);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsfg3Pct' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsfg3PctDirty(java.lang.Long value) {
    return isDirty(14);
  }

  /**
   * Gets the value of the 'playerStatsftm' field.
   */
  public java.lang.Integer getPlayerStatsftm() {
    return playerStatsftm;
  }

  /**
   * Sets the value of the 'playerStatsftm' field.
   * @param value the value to set.
   */
  public void setPlayerStatsftm(java.lang.Integer value) {
    this.playerStatsftm = value;
    setDirty(15);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsftm' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsftmDirty(java.lang.Integer value) {
    return isDirty(15);
  }

  /**
   * Gets the value of the 'playerStatsfta' field.
   */
  public java.lang.Integer getPlayerStatsfta() {
    return playerStatsfta;
  }

  /**
   * Sets the value of the 'playerStatsfta' field.
   * @param value the value to set.
   */
  public void setPlayerStatsfta(java.lang.Integer value) {
    this.playerStatsfta = value;
    setDirty(16);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsfta' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsftaDirty(java.lang.Integer value) {
    return isDirty(16);
  }

  /**
   * Gets the value of the 'playerStatsftPct' field.
   */
  public java.lang.Integer getPlayerStatsftPct() {
    return playerStatsftPct;
  }

  /**
   * Sets the value of the 'playerStatsftPct' field.
   * @param value the value to set.
   */
  public void setPlayerStatsftPct(java.lang.Integer value) {
    this.playerStatsftPct = value;
    setDirty(17);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsftPct' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsftPctDirty(java.lang.Integer value) {
    return isDirty(17);
  }

  /**
   * Gets the value of the 'playerStatsoreb' field.
   */
  public java.lang.Integer getPlayerStatsoreb() {
    return playerStatsoreb;
  }

  /**
   * Sets the value of the 'playerStatsoreb' field.
   * @param value the value to set.
   */
  public void setPlayerStatsoreb(java.lang.Integer value) {
    this.playerStatsoreb = value;
    setDirty(18);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsoreb' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsorebDirty(java.lang.Integer value) {
    return isDirty(18);
  }

  /**
   * Gets the value of the 'playerStatsdreb' field.
   */
  public java.lang.Integer getPlayerStatsdreb() {
    return playerStatsdreb;
  }

  /**
   * Sets the value of the 'playerStatsdreb' field.
   * @param value the value to set.
   */
  public void setPlayerStatsdreb(java.lang.Integer value) {
    this.playerStatsdreb = value;
    setDirty(19);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsdreb' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsdrebDirty(java.lang.Integer value) {
    return isDirty(19);
  }

  /**
   * Gets the value of the 'playerStatsreb' field.
   */
  public java.lang.Integer getPlayerStatsreb() {
    return playerStatsreb;
  }

  /**
   * Sets the value of the 'playerStatsreb' field.
   * @param value the value to set.
   */
  public void setPlayerStatsreb(java.lang.Integer value) {
    this.playerStatsreb = value;
    setDirty(20);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsreb' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsrebDirty(java.lang.Integer value) {
    return isDirty(20);
  }

  /**
   * Gets the value of the 'playerStatsast' field.
   */
  public java.lang.Integer getPlayerStatsast() {
    return playerStatsast;
  }

  /**
   * Sets the value of the 'playerStatsast' field.
   * @param value the value to set.
   */
  public void setPlayerStatsast(java.lang.Integer value) {
    this.playerStatsast = value;
    setDirty(21);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsast' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsastDirty(java.lang.Integer value) {
    return isDirty(21);
  }

  /**
   * Gets the value of the 'playerStatsstl' field.
   */
  public java.lang.Integer getPlayerStatsstl() {
    return playerStatsstl;
  }

  /**
   * Sets the value of the 'playerStatsstl' field.
   * @param value the value to set.
   */
  public void setPlayerStatsstl(java.lang.Integer value) {
    this.playerStatsstl = value;
    setDirty(22);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsstl' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsstlDirty(java.lang.Integer value) {
    return isDirty(22);
  }

  /**
   * Gets the value of the 'playerStatsblk' field.
   */
  public java.lang.Integer getPlayerStatsblk() {
    return playerStatsblk;
  }

  /**
   * Sets the value of the 'playerStatsblk' field.
   * @param value the value to set.
   */
  public void setPlayerStatsblk(java.lang.Integer value) {
    this.playerStatsblk = value;
    setDirty(23);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsblk' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsblkDirty(java.lang.Integer value) {
    return isDirty(23);
  }

  /**
   * Gets the value of the 'playerStatsto' field.
   */
  public java.lang.Integer getPlayerStatsto() {
    return playerStatsto;
  }

  /**
   * Sets the value of the 'playerStatsto' field.
   * @param value the value to set.
   */
  public void setPlayerStatsto(java.lang.Integer value) {
    this.playerStatsto = value;
    setDirty(24);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsto' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatstoDirty(java.lang.Integer value) {
    return isDirty(24);
  }

  /**
   * Gets the value of the 'playerStatspf' field.
   */
  public java.lang.Integer getPlayerStatspf() {
    return playerStatspf;
  }

  /**
   * Sets the value of the 'playerStatspf' field.
   * @param value the value to set.
   */
  public void setPlayerStatspf(java.lang.Integer value) {
    this.playerStatspf = value;
    setDirty(25);
  }
  
  /**
   * Checks the dirty status of the 'playerStatspf' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatspfDirty(java.lang.Integer value) {
    return isDirty(25);
  }

  /**
   * Gets the value of the 'playerStatsPts' field.
   */
  public java.lang.Integer getPlayerStatsPts() {
    return playerStatsPts;
  }

  /**
   * Sets the value of the 'playerStatsPts' field.
   * @param value the value to set.
   */
  public void setPlayerStatsPts(java.lang.Integer value) {
    this.playerStatsPts = value;
    setDirty(26);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsPts' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsPtsDirty(java.lang.Integer value) {
    return isDirty(26);
  }

  /**
   * Gets the value of the 'playerStatsPlusMinus' field.
   */
  public java.lang.Integer getPlayerStatsPlusMinus() {
    return playerStatsPlusMinus;
  }

  /**
   * Sets the value of the 'playerStatsPlusMinus' field.
   * @param value the value to set.
   */
  public void setPlayerStatsPlusMinus(java.lang.Integer value) {
    this.playerStatsPlusMinus = value;
    setDirty(27);
  }
  
  /**
   * Checks the dirty status of the 'playerStatsPlusMinus' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerStatsPlusMinusDirty(java.lang.Integer value) {
    return isDirty(27);
  }

  /** Creates a new PlayerStats RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder();
  }
  
  /** Creates a new PlayerStats RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder(other);
  }
  
  /** Creates a new PlayerStats RecordBuilder by copying an existing PlayerStats instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for PlayerStats instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlayerStats>
    implements org.apache.avro.data.RecordBuilder<PlayerStats> {

    private int gamePlayerStatsId;
    private int playerStatsTeamId;
    private java.lang.CharSequence playerStatsTeamAbbreviation;
    private java.lang.CharSequence playerStatsTeamCity;
    private int playerStatsPlayerId;
    private java.lang.CharSequence playerName;
    private java.lang.CharSequence startPosition;
    private java.lang.CharSequence comment;
    private java.lang.CharSequence playerStatsMin;
    private int playerStatsFgm;
    private int playerStatsFga;
    private long playerStatsfgPct;
    private int playerStatsfg3m;
    private int playerStatsfg3a;
    private long playerStatsfg3Pct;
    private int playerStatsftm;
    private int playerStatsfta;
    private int playerStatsftPct;
    private int playerStatsoreb;
    private int playerStatsdreb;
    private int playerStatsreb;
    private int playerStatsast;
    private int playerStatsstl;
    private int playerStatsblk;
    private int playerStatsto;
    private int playerStatspf;
    private int playerStatsPts;
    private int playerStatsPlusMinus;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing PlayerStats instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.SCHEMA$);
      if (isValidValue(fields()[0], other.gamePlayerStatsId)) {
        this.gamePlayerStatsId = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.gamePlayerStatsId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.playerStatsTeamId)) {
        this.playerStatsTeamId = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.playerStatsTeamId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.playerStatsTeamAbbreviation)) {
        this.playerStatsTeamAbbreviation = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.playerStatsTeamAbbreviation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.playerStatsTeamCity)) {
        this.playerStatsTeamCity = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.playerStatsTeamCity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.playerStatsPlayerId)) {
        this.playerStatsPlayerId = (java.lang.Integer) data().deepCopy(fields()[4].schema(), other.playerStatsPlayerId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.playerName)) {
        this.playerName = (java.lang.CharSequence) data().deepCopy(fields()[5].schema(), other.playerName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.startPosition)) {
        this.startPosition = (java.lang.CharSequence) data().deepCopy(fields()[6].schema(), other.startPosition);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.comment)) {
        this.comment = (java.lang.CharSequence) data().deepCopy(fields()[7].schema(), other.comment);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.playerStatsMin)) {
        this.playerStatsMin = (java.lang.CharSequence) data().deepCopy(fields()[8].schema(), other.playerStatsMin);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.playerStatsFgm)) {
        this.playerStatsFgm = (java.lang.Integer) data().deepCopy(fields()[9].schema(), other.playerStatsFgm);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.playerStatsFga)) {
        this.playerStatsFga = (java.lang.Integer) data().deepCopy(fields()[10].schema(), other.playerStatsFga);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.playerStatsfgPct)) {
        this.playerStatsfgPct = (java.lang.Long) data().deepCopy(fields()[11].schema(), other.playerStatsfgPct);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.playerStatsfg3m)) {
        this.playerStatsfg3m = (java.lang.Integer) data().deepCopy(fields()[12].schema(), other.playerStatsfg3m);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.playerStatsfg3a)) {
        this.playerStatsfg3a = (java.lang.Integer) data().deepCopy(fields()[13].schema(), other.playerStatsfg3a);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.playerStatsfg3Pct)) {
        this.playerStatsfg3Pct = (java.lang.Long) data().deepCopy(fields()[14].schema(), other.playerStatsfg3Pct);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.playerStatsftm)) {
        this.playerStatsftm = (java.lang.Integer) data().deepCopy(fields()[15].schema(), other.playerStatsftm);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.playerStatsfta)) {
        this.playerStatsfta = (java.lang.Integer) data().deepCopy(fields()[16].schema(), other.playerStatsfta);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.playerStatsftPct)) {
        this.playerStatsftPct = (java.lang.Integer) data().deepCopy(fields()[17].schema(), other.playerStatsftPct);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.playerStatsoreb)) {
        this.playerStatsoreb = (java.lang.Integer) data().deepCopy(fields()[18].schema(), other.playerStatsoreb);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.playerStatsdreb)) {
        this.playerStatsdreb = (java.lang.Integer) data().deepCopy(fields()[19].schema(), other.playerStatsdreb);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.playerStatsreb)) {
        this.playerStatsreb = (java.lang.Integer) data().deepCopy(fields()[20].schema(), other.playerStatsreb);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.playerStatsast)) {
        this.playerStatsast = (java.lang.Integer) data().deepCopy(fields()[21].schema(), other.playerStatsast);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.playerStatsstl)) {
        this.playerStatsstl = (java.lang.Integer) data().deepCopy(fields()[22].schema(), other.playerStatsstl);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.playerStatsblk)) {
        this.playerStatsblk = (java.lang.Integer) data().deepCopy(fields()[23].schema(), other.playerStatsblk);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.playerStatsto)) {
        this.playerStatsto = (java.lang.Integer) data().deepCopy(fields()[24].schema(), other.playerStatsto);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.playerStatspf)) {
        this.playerStatspf = (java.lang.Integer) data().deepCopy(fields()[25].schema(), other.playerStatspf);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.playerStatsPts)) {
        this.playerStatsPts = (java.lang.Integer) data().deepCopy(fields()[26].schema(), other.playerStatsPts);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.playerStatsPlusMinus)) {
        this.playerStatsPlusMinus = (java.lang.Integer) data().deepCopy(fields()[27].schema(), other.playerStatsPlusMinus);
        fieldSetFlags()[27] = true;
      }
    }

    /** Gets the value of the 'gamePlayerStatsId' field */
    public java.lang.Integer getGamePlayerStatsId() {
      return gamePlayerStatsId;
    }
    
    /** Sets the value of the 'gamePlayerStatsId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setGamePlayerStatsId(int value) {
      validate(fields()[0], value);
      this.gamePlayerStatsId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'gamePlayerStatsId' field has been set */
    public boolean hasGamePlayerStatsId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'gamePlayerStatsId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearGamePlayerStatsId() {
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsTeamId' field */
    public java.lang.Integer getPlayerStatsTeamId() {
      return playerStatsTeamId;
    }
    
    /** Sets the value of the 'playerStatsTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsTeamId(int value) {
      validate(fields()[1], value);
      this.playerStatsTeamId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsTeamId' field has been set */
    public boolean hasPlayerStatsTeamId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'playerStatsTeamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsTeamId() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsTeamAbbreviation' field */
    public java.lang.CharSequence getPlayerStatsTeamAbbreviation() {
      return playerStatsTeamAbbreviation;
    }
    
    /** Sets the value of the 'playerStatsTeamAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsTeamAbbreviation(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.playerStatsTeamAbbreviation = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsTeamAbbreviation' field has been set */
    public boolean hasPlayerStatsTeamAbbreviation() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'playerStatsTeamAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsTeamAbbreviation() {
      playerStatsTeamAbbreviation = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsTeamCity' field */
    public java.lang.CharSequence getPlayerStatsTeamCity() {
      return playerStatsTeamCity;
    }
    
    /** Sets the value of the 'playerStatsTeamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsTeamCity(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.playerStatsTeamCity = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsTeamCity' field has been set */
    public boolean hasPlayerStatsTeamCity() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'playerStatsTeamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsTeamCity() {
      playerStatsTeamCity = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsPlayerId' field */
    public java.lang.Integer getPlayerStatsPlayerId() {
      return playerStatsPlayerId;
    }
    
    /** Sets the value of the 'playerStatsPlayerId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsPlayerId(int value) {
      validate(fields()[4], value);
      this.playerStatsPlayerId = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsPlayerId' field has been set */
    public boolean hasPlayerStatsPlayerId() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'playerStatsPlayerId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsPlayerId() {
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'playerName' field */
    public java.lang.CharSequence getPlayerName() {
      return playerName;
    }
    
    /** Sets the value of the 'playerName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.playerName = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'playerName' field has been set */
    public boolean hasPlayerName() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'playerName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerName() {
      playerName = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'startPosition' field */
    public java.lang.CharSequence getStartPosition() {
      return startPosition;
    }
    
    /** Sets the value of the 'startPosition' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setStartPosition(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.startPosition = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'startPosition' field has been set */
    public boolean hasStartPosition() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'startPosition' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearStartPosition() {
      startPosition = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'comment' field */
    public java.lang.CharSequence getComment() {
      return comment;
    }
    
    /** Sets the value of the 'comment' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setComment(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.comment = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'comment' field has been set */
    public boolean hasComment() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'comment' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearComment() {
      comment = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsMin' field */
    public java.lang.CharSequence getPlayerStatsMin() {
      return playerStatsMin;
    }
    
    /** Sets the value of the 'playerStatsMin' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsMin(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.playerStatsMin = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsMin' field has been set */
    public boolean hasPlayerStatsMin() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'playerStatsMin' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsMin() {
      playerStatsMin = null;
      fieldSetFlags()[8] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsFgm' field */
    public java.lang.Integer getPlayerStatsFgm() {
      return playerStatsFgm;
    }
    
    /** Sets the value of the 'playerStatsFgm' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsFgm(int value) {
      validate(fields()[9], value);
      this.playerStatsFgm = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsFgm' field has been set */
    public boolean hasPlayerStatsFgm() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'playerStatsFgm' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsFgm() {
      fieldSetFlags()[9] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsFga' field */
    public java.lang.Integer getPlayerStatsFga() {
      return playerStatsFga;
    }
    
    /** Sets the value of the 'playerStatsFga' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsFga(int value) {
      validate(fields()[10], value);
      this.playerStatsFga = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsFga' field has been set */
    public boolean hasPlayerStatsFga() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'playerStatsFga' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsFga() {
      fieldSetFlags()[10] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsfgPct' field */
    public java.lang.Long getPlayerStatsfgPct() {
      return playerStatsfgPct;
    }
    
    /** Sets the value of the 'playerStatsfgPct' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsfgPct(long value) {
      validate(fields()[11], value);
      this.playerStatsfgPct = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsfgPct' field has been set */
    public boolean hasPlayerStatsfgPct() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'playerStatsfgPct' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsfgPct() {
      fieldSetFlags()[11] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsfg3m' field */
    public java.lang.Integer getPlayerStatsfg3m() {
      return playerStatsfg3m;
    }
    
    /** Sets the value of the 'playerStatsfg3m' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsfg3m(int value) {
      validate(fields()[12], value);
      this.playerStatsfg3m = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsfg3m' field has been set */
    public boolean hasPlayerStatsfg3m() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'playerStatsfg3m' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsfg3m() {
      fieldSetFlags()[12] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsfg3a' field */
    public java.lang.Integer getPlayerStatsfg3a() {
      return playerStatsfg3a;
    }
    
    /** Sets the value of the 'playerStatsfg3a' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsfg3a(int value) {
      validate(fields()[13], value);
      this.playerStatsfg3a = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsfg3a' field has been set */
    public boolean hasPlayerStatsfg3a() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'playerStatsfg3a' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsfg3a() {
      fieldSetFlags()[13] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsfg3Pct' field */
    public java.lang.Long getPlayerStatsfg3Pct() {
      return playerStatsfg3Pct;
    }
    
    /** Sets the value of the 'playerStatsfg3Pct' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsfg3Pct(long value) {
      validate(fields()[14], value);
      this.playerStatsfg3Pct = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsfg3Pct' field has been set */
    public boolean hasPlayerStatsfg3Pct() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'playerStatsfg3Pct' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsfg3Pct() {
      fieldSetFlags()[14] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsftm' field */
    public java.lang.Integer getPlayerStatsftm() {
      return playerStatsftm;
    }
    
    /** Sets the value of the 'playerStatsftm' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsftm(int value) {
      validate(fields()[15], value);
      this.playerStatsftm = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsftm' field has been set */
    public boolean hasPlayerStatsftm() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'playerStatsftm' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsftm() {
      fieldSetFlags()[15] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsfta' field */
    public java.lang.Integer getPlayerStatsfta() {
      return playerStatsfta;
    }
    
    /** Sets the value of the 'playerStatsfta' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsfta(int value) {
      validate(fields()[16], value);
      this.playerStatsfta = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsfta' field has been set */
    public boolean hasPlayerStatsfta() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'playerStatsfta' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsfta() {
      fieldSetFlags()[16] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsftPct' field */
    public java.lang.Integer getPlayerStatsftPct() {
      return playerStatsftPct;
    }
    
    /** Sets the value of the 'playerStatsftPct' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsftPct(int value) {
      validate(fields()[17], value);
      this.playerStatsftPct = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsftPct' field has been set */
    public boolean hasPlayerStatsftPct() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'playerStatsftPct' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsftPct() {
      fieldSetFlags()[17] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsoreb' field */
    public java.lang.Integer getPlayerStatsoreb() {
      return playerStatsoreb;
    }
    
    /** Sets the value of the 'playerStatsoreb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsoreb(int value) {
      validate(fields()[18], value);
      this.playerStatsoreb = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsoreb' field has been set */
    public boolean hasPlayerStatsoreb() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'playerStatsoreb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsoreb() {
      fieldSetFlags()[18] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsdreb' field */
    public java.lang.Integer getPlayerStatsdreb() {
      return playerStatsdreb;
    }
    
    /** Sets the value of the 'playerStatsdreb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsdreb(int value) {
      validate(fields()[19], value);
      this.playerStatsdreb = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsdreb' field has been set */
    public boolean hasPlayerStatsdreb() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'playerStatsdreb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsdreb() {
      fieldSetFlags()[19] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsreb' field */
    public java.lang.Integer getPlayerStatsreb() {
      return playerStatsreb;
    }
    
    /** Sets the value of the 'playerStatsreb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsreb(int value) {
      validate(fields()[20], value);
      this.playerStatsreb = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsreb' field has been set */
    public boolean hasPlayerStatsreb() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'playerStatsreb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsreb() {
      fieldSetFlags()[20] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsast' field */
    public java.lang.Integer getPlayerStatsast() {
      return playerStatsast;
    }
    
    /** Sets the value of the 'playerStatsast' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsast(int value) {
      validate(fields()[21], value);
      this.playerStatsast = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsast' field has been set */
    public boolean hasPlayerStatsast() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'playerStatsast' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsast() {
      fieldSetFlags()[21] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsstl' field */
    public java.lang.Integer getPlayerStatsstl() {
      return playerStatsstl;
    }
    
    /** Sets the value of the 'playerStatsstl' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsstl(int value) {
      validate(fields()[22], value);
      this.playerStatsstl = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsstl' field has been set */
    public boolean hasPlayerStatsstl() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'playerStatsstl' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsstl() {
      fieldSetFlags()[22] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsblk' field */
    public java.lang.Integer getPlayerStatsblk() {
      return playerStatsblk;
    }
    
    /** Sets the value of the 'playerStatsblk' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsblk(int value) {
      validate(fields()[23], value);
      this.playerStatsblk = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsblk' field has been set */
    public boolean hasPlayerStatsblk() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'playerStatsblk' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsblk() {
      fieldSetFlags()[23] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsto' field */
    public java.lang.Integer getPlayerStatsto() {
      return playerStatsto;
    }
    
    /** Sets the value of the 'playerStatsto' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsto(int value) {
      validate(fields()[24], value);
      this.playerStatsto = value;
      fieldSetFlags()[24] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsto' field has been set */
    public boolean hasPlayerStatsto() {
      return fieldSetFlags()[24];
    }
    
    /** Clears the value of the 'playerStatsto' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsto() {
      fieldSetFlags()[24] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatspf' field */
    public java.lang.Integer getPlayerStatspf() {
      return playerStatspf;
    }
    
    /** Sets the value of the 'playerStatspf' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatspf(int value) {
      validate(fields()[25], value);
      this.playerStatspf = value;
      fieldSetFlags()[25] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatspf' field has been set */
    public boolean hasPlayerStatspf() {
      return fieldSetFlags()[25];
    }
    
    /** Clears the value of the 'playerStatspf' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatspf() {
      fieldSetFlags()[25] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsPts' field */
    public java.lang.Integer getPlayerStatsPts() {
      return playerStatsPts;
    }
    
    /** Sets the value of the 'playerStatsPts' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsPts(int value) {
      validate(fields()[26], value);
      this.playerStatsPts = value;
      fieldSetFlags()[26] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsPts' field has been set */
    public boolean hasPlayerStatsPts() {
      return fieldSetFlags()[26];
    }
    
    /** Clears the value of the 'playerStatsPts' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsPts() {
      fieldSetFlags()[26] = false;
      return this;
    }
    
    /** Gets the value of the 'playerStatsPlusMinus' field */
    public java.lang.Integer getPlayerStatsPlusMinus() {
      return playerStatsPlusMinus;
    }
    
    /** Sets the value of the 'playerStatsPlusMinus' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerStatsPlusMinus(int value) {
      validate(fields()[27], value);
      this.playerStatsPlusMinus = value;
      fieldSetFlags()[27] = true;
      return this; 
    }
    
    /** Checks whether the 'playerStatsPlusMinus' field has been set */
    public boolean hasPlayerStatsPlusMinus() {
      return fieldSetFlags()[27];
    }
    
    /** Clears the value of the 'playerStatsPlusMinus' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerStatsPlusMinus() {
      fieldSetFlags()[27] = false;
      return this;
    }
    
    @Override
    public PlayerStats build() {
      try {
        PlayerStats record = new PlayerStats();
        record.gamePlayerStatsId = fieldSetFlags()[0] ? this.gamePlayerStatsId : (java.lang.Integer) defaultValue(fields()[0]);
        record.playerStatsTeamId = fieldSetFlags()[1] ? this.playerStatsTeamId : (java.lang.Integer) defaultValue(fields()[1]);
        record.playerStatsTeamAbbreviation = fieldSetFlags()[2] ? this.playerStatsTeamAbbreviation : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.playerStatsTeamCity = fieldSetFlags()[3] ? this.playerStatsTeamCity : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.playerStatsPlayerId = fieldSetFlags()[4] ? this.playerStatsPlayerId : (java.lang.Integer) defaultValue(fields()[4]);
        record.playerName = fieldSetFlags()[5] ? this.playerName : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.startPosition = fieldSetFlags()[6] ? this.startPosition : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.comment = fieldSetFlags()[7] ? this.comment : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.playerStatsMin = fieldSetFlags()[8] ? this.playerStatsMin : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.playerStatsFgm = fieldSetFlags()[9] ? this.playerStatsFgm : (java.lang.Integer) defaultValue(fields()[9]);
        record.playerStatsFga = fieldSetFlags()[10] ? this.playerStatsFga : (java.lang.Integer) defaultValue(fields()[10]);
        record.playerStatsfgPct = fieldSetFlags()[11] ? this.playerStatsfgPct : (java.lang.Long) defaultValue(fields()[11]);
        record.playerStatsfg3m = fieldSetFlags()[12] ? this.playerStatsfg3m : (java.lang.Integer) defaultValue(fields()[12]);
        record.playerStatsfg3a = fieldSetFlags()[13] ? this.playerStatsfg3a : (java.lang.Integer) defaultValue(fields()[13]);
        record.playerStatsfg3Pct = fieldSetFlags()[14] ? this.playerStatsfg3Pct : (java.lang.Long) defaultValue(fields()[14]);
        record.playerStatsftm = fieldSetFlags()[15] ? this.playerStatsftm : (java.lang.Integer) defaultValue(fields()[15]);
        record.playerStatsfta = fieldSetFlags()[16] ? this.playerStatsfta : (java.lang.Integer) defaultValue(fields()[16]);
        record.playerStatsftPct = fieldSetFlags()[17] ? this.playerStatsftPct : (java.lang.Integer) defaultValue(fields()[17]);
        record.playerStatsoreb = fieldSetFlags()[18] ? this.playerStatsoreb : (java.lang.Integer) defaultValue(fields()[18]);
        record.playerStatsdreb = fieldSetFlags()[19] ? this.playerStatsdreb : (java.lang.Integer) defaultValue(fields()[19]);
        record.playerStatsreb = fieldSetFlags()[20] ? this.playerStatsreb : (java.lang.Integer) defaultValue(fields()[20]);
        record.playerStatsast = fieldSetFlags()[21] ? this.playerStatsast : (java.lang.Integer) defaultValue(fields()[21]);
        record.playerStatsstl = fieldSetFlags()[22] ? this.playerStatsstl : (java.lang.Integer) defaultValue(fields()[22]);
        record.playerStatsblk = fieldSetFlags()[23] ? this.playerStatsblk : (java.lang.Integer) defaultValue(fields()[23]);
        record.playerStatsto = fieldSetFlags()[24] ? this.playerStatsto : (java.lang.Integer) defaultValue(fields()[24]);
        record.playerStatspf = fieldSetFlags()[25] ? this.playerStatspf : (java.lang.Integer) defaultValue(fields()[25]);
        record.playerStatsPts = fieldSetFlags()[26] ? this.playerStatsPts : (java.lang.Integer) defaultValue(fields()[26]);
        record.playerStatsPlusMinus = fieldSetFlags()[27] ? this.playerStatsPlusMinus : (java.lang.Integer) defaultValue(fields()[27]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public PlayerStats.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public PlayerStats newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends PlayerStats implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'gamePlayerStatsId' field.
		   */
	  public java.lang.Integer getGamePlayerStatsId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gamePlayerStatsId' field.
		   * @param value the value to set.
	   */
	  public void setGamePlayerStatsId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gamePlayerStatsId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGamePlayerStatsIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsTeamId' field.
		   */
	  public java.lang.Integer getPlayerStatsTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsTeamId' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsTeamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsTeamAbbreviation' field.
		   */
	  public java.lang.CharSequence getPlayerStatsTeamAbbreviation() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsTeamAbbreviation' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsTeamAbbreviation(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsTeamAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsTeamAbbreviationDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsTeamCity' field.
		   */
	  public java.lang.CharSequence getPlayerStatsTeamCity() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsTeamCity' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsTeamCity(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsTeamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsTeamCityDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsPlayerId' field.
		   */
	  public java.lang.Integer getPlayerStatsPlayerId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsPlayerId' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsPlayerId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsPlayerId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsPlayerIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerName' field.
		   */
	  public java.lang.CharSequence getPlayerName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerName' field.
		   * @param value the value to set.
	   */
	  public void setPlayerName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerName' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'startPosition' field.
		   */
	  public java.lang.CharSequence getStartPosition() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'startPosition' field.
		   * @param value the value to set.
	   */
	  public void setStartPosition(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'startPosition' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isStartPositionDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'comment' field.
		   */
	  public java.lang.CharSequence getComment() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'comment' field.
		   * @param value the value to set.
	   */
	  public void setComment(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'comment' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isCommentDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsMin' field.
		   */
	  public java.lang.CharSequence getPlayerStatsMin() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsMin' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsMin(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsMin' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsMinDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsFgm' field.
		   */
	  public java.lang.Integer getPlayerStatsFgm() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsFgm' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsFgm(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsFgm' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsFgmDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsFga' field.
		   */
	  public java.lang.Integer getPlayerStatsFga() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsFga' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsFga(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsFga' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsFgaDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsfgPct' field.
		   */
	  public java.lang.Long getPlayerStatsfgPct() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsfgPct' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsfgPct(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsfgPct' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsfgPctDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsfg3m' field.
		   */
	  public java.lang.Integer getPlayerStatsfg3m() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsfg3m' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsfg3m(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsfg3m' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsfg3mDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsfg3a' field.
		   */
	  public java.lang.Integer getPlayerStatsfg3a() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsfg3a' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsfg3a(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsfg3a' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsfg3aDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsfg3Pct' field.
		   */
	  public java.lang.Long getPlayerStatsfg3Pct() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsfg3Pct' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsfg3Pct(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsfg3Pct' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsfg3PctDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsftm' field.
		   */
	  public java.lang.Integer getPlayerStatsftm() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsftm' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsftm(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsftm' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsftmDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsfta' field.
		   */
	  public java.lang.Integer getPlayerStatsfta() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsfta' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsfta(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsfta' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsftaDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsftPct' field.
		   */
	  public java.lang.Integer getPlayerStatsftPct() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsftPct' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsftPct(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsftPct' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsftPctDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsoreb' field.
		   */
	  public java.lang.Integer getPlayerStatsoreb() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsoreb' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsoreb(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsoreb' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsorebDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsdreb' field.
		   */
	  public java.lang.Integer getPlayerStatsdreb() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsdreb' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsdreb(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsdreb' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsdrebDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsreb' field.
		   */
	  public java.lang.Integer getPlayerStatsreb() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsreb' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsreb(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsreb' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsrebDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsast' field.
		   */
	  public java.lang.Integer getPlayerStatsast() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsast' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsast(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsast' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsastDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsstl' field.
		   */
	  public java.lang.Integer getPlayerStatsstl() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsstl' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsstl(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsstl' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsstlDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsblk' field.
		   */
	  public java.lang.Integer getPlayerStatsblk() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsblk' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsblk(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsblk' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsblkDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsto' field.
		   */
	  public java.lang.Integer getPlayerStatsto() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsto' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsto(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsto' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatstoDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatspf' field.
		   */
	  public java.lang.Integer getPlayerStatspf() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatspf' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatspf(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatspf' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatspfDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsPts' field.
		   */
	  public java.lang.Integer getPlayerStatsPts() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsPts' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsPts(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsPts' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsPtsDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerStatsPlusMinus' field.
		   */
	  public java.lang.Integer getPlayerStatsPlusMinus() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerStatsPlusMinus' field.
		   * @param value the value to set.
	   */
	  public void setPlayerStatsPlusMinus(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerStatsPlusMinus' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerStatsPlusMinusDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

