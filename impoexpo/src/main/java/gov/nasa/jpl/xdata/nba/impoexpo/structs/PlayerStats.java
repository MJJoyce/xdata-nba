/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.nasa.jpl.xdata.nba.impoexpo.structs;  
@SuppressWarnings("all")
public class PlayerStats extends org.apache.gora.persistency.impl.PersistentBase implements org.apache.avro.specific.SpecificRecord, org.apache.gora.persistency.Persistent {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlayerStats\",\"namespace\":\"gov.nasa.jpl.xdata.nba.impoexpo.structs\",\"fields\":[{\"name\":\"gameId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamId\",\"type\":\"int\",\"default\":0},{\"name\":\"teamAbbreviation\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"teamCity\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"playerId\",\"type\":\"int\",\"default\":0},{\"name\":\"playerName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"startPosition\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"comment\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"min\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"fgm\",\"type\":\"int\",\"default\":0},{\"name\":\"fga\",\"type\":\"int\",\"default\":0},{\"name\":\"fgPct\",\"type\":\"long\",\"default\":0},{\"name\":\"fg3m\",\"type\":\"int\",\"default\":0},{\"name\":\"fg3a\",\"type\":\"int\",\"default\":0},{\"name\":\"fg3Pct\",\"type\":\"long\",\"default\":0},{\"name\":\"ftm\",\"type\":\"int\",\"default\":0},{\"name\":\"fta\",\"type\":\"int\",\"default\":0},{\"name\":\"ftPct\",\"type\":\"int\",\"default\":0},{\"name\":\"oreb\",\"type\":\"int\",\"default\":0},{\"name\":\"dreb\",\"type\":\"int\",\"default\":0},{\"name\":\"reb\",\"type\":\"int\",\"default\":0},{\"name\":\"ast\",\"type\":\"int\",\"default\":0},{\"name\":\"stl\",\"type\":\"int\",\"default\":0},{\"name\":\"blk\",\"type\":\"int\",\"default\":0},{\"name\":\"to\",\"type\":\"int\",\"default\":0},{\"name\":\"pf\",\"type\":\"int\",\"default\":0},{\"name\":\"pts\",\"type\":\"int\",\"default\":0},{\"name\":\"plusMinus\",\"type\":\"int\",\"default\":0}]}");

  /** Enum containing all data bean's fields. */
  public static enum Field {
    GAME_ID(0, "gameId"),
    TEAM_ID(1, "teamId"),
    TEAM_ABBREVIATION(2, "teamAbbreviation"),
    TEAM_CITY(3, "teamCity"),
    PLAYER_ID(4, "playerId"),
    PLAYER_NAME(5, "playerName"),
    START_POSITION(6, "startPosition"),
    COMMENT(7, "comment"),
    MIN(8, "min"),
    FGM(9, "fgm"),
    FGA(10, "fga"),
    FG_PCT(11, "fgPct"),
    FG3M(12, "fg3m"),
    FG3A(13, "fg3a"),
    FG3PCT(14, "fg3Pct"),
    FTM(15, "ftm"),
    FTA(16, "fta"),
    FT_PCT(17, "ftPct"),
    OREB(18, "oreb"),
    DREB(19, "dreb"),
    REB(20, "reb"),
    AST(21, "ast"),
    STL(22, "stl"),
    BLK(23, "blk"),
    TO(24, "to"),
    PF(25, "pf"),
    PTS(26, "pts"),
    PLUS_MINUS(27, "plusMinus"),
    ;
    /**
     * Field's index.
     */
    private int index;

    /**
     * Field's name.
     */
    private String name;

    /**
     * Field's constructor
     * @param index field's index.
     * @param name field's name.
     */
    Field(int index, String name) {this.index=index;this.name=name;}

    /**
     * Gets field's index.
     * @return int field's index.
     */
    public int getIndex() {return index;}

    /**
     * Gets field's name.
     * @return String field's name.
     */
    public String getName() {return name;}

    /**
     * Gets field's attributes to string.
     * @return String field's attributes to string.
     */
    public String toString() {return name;}
  };

  public static final String[] _ALL_FIELDS = {
  "gameId",
  "teamId",
  "teamAbbreviation",
  "teamCity",
  "playerId",
  "playerName",
  "startPosition",
  "comment",
  "min",
  "fgm",
  "fga",
  "fgPct",
  "fg3m",
  "fg3a",
  "fg3Pct",
  "ftm",
  "fta",
  "ftPct",
  "oreb",
  "dreb",
  "reb",
  "ast",
  "stl",
  "blk",
  "to",
  "pf",
  "pts",
  "plusMinus",
  };

  /**
   * Gets the total field count.
   * @return int field count
   */
  public int getFieldsCount() {
    return PlayerStats._ALL_FIELDS.length;
  }

  private int gameId;
  private int teamId;
  private java.lang.CharSequence teamAbbreviation;
  private java.lang.CharSequence teamCity;
  private int playerId;
  private java.lang.CharSequence playerName;
  private java.lang.CharSequence startPosition;
  private java.lang.CharSequence comment;
  private java.lang.CharSequence min;
  private int fgm;
  private int fga;
  private long fgPct;
  private int fg3m;
  private int fg3a;
  private long fg3Pct;
  private int ftm;
  private int fta;
  private int ftPct;
  private int oreb;
  private int dreb;
  private int reb;
  private int ast;
  private int stl;
  private int blk;
  private int to;
  private int pf;
  private int pts;
  private int plusMinus;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return gameId;
    case 1: return teamId;
    case 2: return teamAbbreviation;
    case 3: return teamCity;
    case 4: return playerId;
    case 5: return playerName;
    case 6: return startPosition;
    case 7: return comment;
    case 8: return min;
    case 9: return fgm;
    case 10: return fga;
    case 11: return fgPct;
    case 12: return fg3m;
    case 13: return fg3a;
    case 14: return fg3Pct;
    case 15: return ftm;
    case 16: return fta;
    case 17: return ftPct;
    case 18: return oreb;
    case 19: return dreb;
    case 20: return reb;
    case 21: return ast;
    case 22: return stl;
    case 23: return blk;
    case 24: return to;
    case 25: return pf;
    case 26: return pts;
    case 27: return plusMinus;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value) {
    switch (field$) {
    case 0: gameId = (java.lang.Integer)(value); break;
    case 1: teamId = (java.lang.Integer)(value); break;
    case 2: teamAbbreviation = (java.lang.CharSequence)(value); break;
    case 3: teamCity = (java.lang.CharSequence)(value); break;
    case 4: playerId = (java.lang.Integer)(value); break;
    case 5: playerName = (java.lang.CharSequence)(value); break;
    case 6: startPosition = (java.lang.CharSequence)(value); break;
    case 7: comment = (java.lang.CharSequence)(value); break;
    case 8: min = (java.lang.CharSequence)(value); break;
    case 9: fgm = (java.lang.Integer)(value); break;
    case 10: fga = (java.lang.Integer)(value); break;
    case 11: fgPct = (java.lang.Long)(value); break;
    case 12: fg3m = (java.lang.Integer)(value); break;
    case 13: fg3a = (java.lang.Integer)(value); break;
    case 14: fg3Pct = (java.lang.Long)(value); break;
    case 15: ftm = (java.lang.Integer)(value); break;
    case 16: fta = (java.lang.Integer)(value); break;
    case 17: ftPct = (java.lang.Integer)(value); break;
    case 18: oreb = (java.lang.Integer)(value); break;
    case 19: dreb = (java.lang.Integer)(value); break;
    case 20: reb = (java.lang.Integer)(value); break;
    case 21: ast = (java.lang.Integer)(value); break;
    case 22: stl = (java.lang.Integer)(value); break;
    case 23: blk = (java.lang.Integer)(value); break;
    case 24: to = (java.lang.Integer)(value); break;
    case 25: pf = (java.lang.Integer)(value); break;
    case 26: pts = (java.lang.Integer)(value); break;
    case 27: plusMinus = (java.lang.Integer)(value); break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'gameId' field.
   */
  public java.lang.Integer getGameId() {
    return gameId;
  }

  /**
   * Sets the value of the 'gameId' field.
   * @param value the value to set.
   */
  public void setGameId(java.lang.Integer value) {
    this.gameId = value;
    setDirty(0);
  }
  
  /**
   * Checks the dirty status of the 'gameId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isGameIdDirty(java.lang.Integer value) {
    return isDirty(0);
  }

  /**
   * Gets the value of the 'teamId' field.
   */
  public java.lang.Integer getTeamId() {
    return teamId;
  }

  /**
   * Sets the value of the 'teamId' field.
   * @param value the value to set.
   */
  public void setTeamId(java.lang.Integer value) {
    this.teamId = value;
    setDirty(1);
  }
  
  /**
   * Checks the dirty status of the 'teamId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTeamIdDirty(java.lang.Integer value) {
    return isDirty(1);
  }

  /**
   * Gets the value of the 'teamAbbreviation' field.
   */
  public java.lang.CharSequence getTeamAbbreviation() {
    return teamAbbreviation;
  }

  /**
   * Sets the value of the 'teamAbbreviation' field.
   * @param value the value to set.
   */
  public void setTeamAbbreviation(java.lang.CharSequence value) {
    this.teamAbbreviation = value;
    setDirty(2);
  }
  
  /**
   * Checks the dirty status of the 'teamAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTeamAbbreviationDirty(java.lang.CharSequence value) {
    return isDirty(2);
  }

  /**
   * Gets the value of the 'teamCity' field.
   */
  public java.lang.CharSequence getTeamCity() {
    return teamCity;
  }

  /**
   * Sets the value of the 'teamCity' field.
   * @param value the value to set.
   */
  public void setTeamCity(java.lang.CharSequence value) {
    this.teamCity = value;
    setDirty(3);
  }
  
  /**
   * Checks the dirty status of the 'teamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isTeamCityDirty(java.lang.CharSequence value) {
    return isDirty(3);
  }

  /**
   * Gets the value of the 'playerId' field.
   */
  public java.lang.Integer getPlayerId() {
    return playerId;
  }

  /**
   * Sets the value of the 'playerId' field.
   * @param value the value to set.
   */
  public void setPlayerId(java.lang.Integer value) {
    this.playerId = value;
    setDirty(4);
  }
  
  /**
   * Checks the dirty status of the 'playerId' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerIdDirty(java.lang.Integer value) {
    return isDirty(4);
  }

  /**
   * Gets the value of the 'playerName' field.
   */
  public java.lang.CharSequence getPlayerName() {
    return playerName;
  }

  /**
   * Sets the value of the 'playerName' field.
   * @param value the value to set.
   */
  public void setPlayerName(java.lang.CharSequence value) {
    this.playerName = value;
    setDirty(5);
  }
  
  /**
   * Checks the dirty status of the 'playerName' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlayerNameDirty(java.lang.CharSequence value) {
    return isDirty(5);
  }

  /**
   * Gets the value of the 'startPosition' field.
   */
  public java.lang.CharSequence getStartPosition() {
    return startPosition;
  }

  /**
   * Sets the value of the 'startPosition' field.
   * @param value the value to set.
   */
  public void setStartPosition(java.lang.CharSequence value) {
    this.startPosition = value;
    setDirty(6);
  }
  
  /**
   * Checks the dirty status of the 'startPosition' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isStartPositionDirty(java.lang.CharSequence value) {
    return isDirty(6);
  }

  /**
   * Gets the value of the 'comment' field.
   */
  public java.lang.CharSequence getComment() {
    return comment;
  }

  /**
   * Sets the value of the 'comment' field.
   * @param value the value to set.
   */
  public void setComment(java.lang.CharSequence value) {
    this.comment = value;
    setDirty(7);
  }
  
  /**
   * Checks the dirty status of the 'comment' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isCommentDirty(java.lang.CharSequence value) {
    return isDirty(7);
  }

  /**
   * Gets the value of the 'min' field.
   */
  public java.lang.CharSequence getMin() {
    return min;
  }

  /**
   * Sets the value of the 'min' field.
   * @param value the value to set.
   */
  public void setMin(java.lang.CharSequence value) {
    this.min = value;
    setDirty(8);
  }
  
  /**
   * Checks the dirty status of the 'min' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isMinDirty(java.lang.CharSequence value) {
    return isDirty(8);
  }

  /**
   * Gets the value of the 'fgm' field.
   */
  public java.lang.Integer getFgm() {
    return fgm;
  }

  /**
   * Sets the value of the 'fgm' field.
   * @param value the value to set.
   */
  public void setFgm(java.lang.Integer value) {
    this.fgm = value;
    setDirty(9);
  }
  
  /**
   * Checks the dirty status of the 'fgm' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFgmDirty(java.lang.Integer value) {
    return isDirty(9);
  }

  /**
   * Gets the value of the 'fga' field.
   */
  public java.lang.Integer getFga() {
    return fga;
  }

  /**
   * Sets the value of the 'fga' field.
   * @param value the value to set.
   */
  public void setFga(java.lang.Integer value) {
    this.fga = value;
    setDirty(10);
  }
  
  /**
   * Checks the dirty status of the 'fga' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFgaDirty(java.lang.Integer value) {
    return isDirty(10);
  }

  /**
   * Gets the value of the 'fgPct' field.
   */
  public java.lang.Long getFgPct() {
    return fgPct;
  }

  /**
   * Sets the value of the 'fgPct' field.
   * @param value the value to set.
   */
  public void setFgPct(java.lang.Long value) {
    this.fgPct = value;
    setDirty(11);
  }
  
  /**
   * Checks the dirty status of the 'fgPct' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFgPctDirty(java.lang.Long value) {
    return isDirty(11);
  }

  /**
   * Gets the value of the 'fg3m' field.
   */
  public java.lang.Integer getFg3m() {
    return fg3m;
  }

  /**
   * Sets the value of the 'fg3m' field.
   * @param value the value to set.
   */
  public void setFg3m(java.lang.Integer value) {
    this.fg3m = value;
    setDirty(12);
  }
  
  /**
   * Checks the dirty status of the 'fg3m' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFg3mDirty(java.lang.Integer value) {
    return isDirty(12);
  }

  /**
   * Gets the value of the 'fg3a' field.
   */
  public java.lang.Integer getFg3a() {
    return fg3a;
  }

  /**
   * Sets the value of the 'fg3a' field.
   * @param value the value to set.
   */
  public void setFg3a(java.lang.Integer value) {
    this.fg3a = value;
    setDirty(13);
  }
  
  /**
   * Checks the dirty status of the 'fg3a' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFg3aDirty(java.lang.Integer value) {
    return isDirty(13);
  }

  /**
   * Gets the value of the 'fg3Pct' field.
   */
  public java.lang.Long getFg3Pct() {
    return fg3Pct;
  }

  /**
   * Sets the value of the 'fg3Pct' field.
   * @param value the value to set.
   */
  public void setFg3Pct(java.lang.Long value) {
    this.fg3Pct = value;
    setDirty(14);
  }
  
  /**
   * Checks the dirty status of the 'fg3Pct' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFg3PctDirty(java.lang.Long value) {
    return isDirty(14);
  }

  /**
   * Gets the value of the 'ftm' field.
   */
  public java.lang.Integer getFtm() {
    return ftm;
  }

  /**
   * Sets the value of the 'ftm' field.
   * @param value the value to set.
   */
  public void setFtm(java.lang.Integer value) {
    this.ftm = value;
    setDirty(15);
  }
  
  /**
   * Checks the dirty status of the 'ftm' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFtmDirty(java.lang.Integer value) {
    return isDirty(15);
  }

  /**
   * Gets the value of the 'fta' field.
   */
  public java.lang.Integer getFta() {
    return fta;
  }

  /**
   * Sets the value of the 'fta' field.
   * @param value the value to set.
   */
  public void setFta(java.lang.Integer value) {
    this.fta = value;
    setDirty(16);
  }
  
  /**
   * Checks the dirty status of the 'fta' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFtaDirty(java.lang.Integer value) {
    return isDirty(16);
  }

  /**
   * Gets the value of the 'ftPct' field.
   */
  public java.lang.Integer getFtPct() {
    return ftPct;
  }

  /**
   * Sets the value of the 'ftPct' field.
   * @param value the value to set.
   */
  public void setFtPct(java.lang.Integer value) {
    this.ftPct = value;
    setDirty(17);
  }
  
  /**
   * Checks the dirty status of the 'ftPct' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isFtPctDirty(java.lang.Integer value) {
    return isDirty(17);
  }

  /**
   * Gets the value of the 'oreb' field.
   */
  public java.lang.Integer getOreb() {
    return oreb;
  }

  /**
   * Sets the value of the 'oreb' field.
   * @param value the value to set.
   */
  public void setOreb(java.lang.Integer value) {
    this.oreb = value;
    setDirty(18);
  }
  
  /**
   * Checks the dirty status of the 'oreb' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isOrebDirty(java.lang.Integer value) {
    return isDirty(18);
  }

  /**
   * Gets the value of the 'dreb' field.
   */
  public java.lang.Integer getDreb() {
    return dreb;
  }

  /**
   * Sets the value of the 'dreb' field.
   * @param value the value to set.
   */
  public void setDreb(java.lang.Integer value) {
    this.dreb = value;
    setDirty(19);
  }
  
  /**
   * Checks the dirty status of the 'dreb' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isDrebDirty(java.lang.Integer value) {
    return isDirty(19);
  }

  /**
   * Gets the value of the 'reb' field.
   */
  public java.lang.Integer getReb() {
    return reb;
  }

  /**
   * Sets the value of the 'reb' field.
   * @param value the value to set.
   */
  public void setReb(java.lang.Integer value) {
    this.reb = value;
    setDirty(20);
  }
  
  /**
   * Checks the dirty status of the 'reb' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isRebDirty(java.lang.Integer value) {
    return isDirty(20);
  }

  /**
   * Gets the value of the 'ast' field.
   */
  public java.lang.Integer getAst() {
    return ast;
  }

  /**
   * Sets the value of the 'ast' field.
   * @param value the value to set.
   */
  public void setAst(java.lang.Integer value) {
    this.ast = value;
    setDirty(21);
  }
  
  /**
   * Checks the dirty status of the 'ast' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isAstDirty(java.lang.Integer value) {
    return isDirty(21);
  }

  /**
   * Gets the value of the 'stl' field.
   */
  public java.lang.Integer getStl() {
    return stl;
  }

  /**
   * Sets the value of the 'stl' field.
   * @param value the value to set.
   */
  public void setStl(java.lang.Integer value) {
    this.stl = value;
    setDirty(22);
  }
  
  /**
   * Checks the dirty status of the 'stl' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isStlDirty(java.lang.Integer value) {
    return isDirty(22);
  }

  /**
   * Gets the value of the 'blk' field.
   */
  public java.lang.Integer getBlk() {
    return blk;
  }

  /**
   * Sets the value of the 'blk' field.
   * @param value the value to set.
   */
  public void setBlk(java.lang.Integer value) {
    this.blk = value;
    setDirty(23);
  }
  
  /**
   * Checks the dirty status of the 'blk' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isBlkDirty(java.lang.Integer value) {
    return isDirty(23);
  }

  /**
   * Gets the value of the 'to' field.
   */
  public java.lang.Integer getTo() {
    return to;
  }

  /**
   * Sets the value of the 'to' field.
   * @param value the value to set.
   */
  public void setTo(java.lang.Integer value) {
    this.to = value;
    setDirty(24);
  }
  
  /**
   * Checks the dirty status of the 'to' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isToDirty(java.lang.Integer value) {
    return isDirty(24);
  }

  /**
   * Gets the value of the 'pf' field.
   */
  public java.lang.Integer getPf() {
    return pf;
  }

  /**
   * Sets the value of the 'pf' field.
   * @param value the value to set.
   */
  public void setPf(java.lang.Integer value) {
    this.pf = value;
    setDirty(25);
  }
  
  /**
   * Checks the dirty status of the 'pf' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPfDirty(java.lang.Integer value) {
    return isDirty(25);
  }

  /**
   * Gets the value of the 'pts' field.
   */
  public java.lang.Integer getPts() {
    return pts;
  }

  /**
   * Sets the value of the 'pts' field.
   * @param value the value to set.
   */
  public void setPts(java.lang.Integer value) {
    this.pts = value;
    setDirty(26);
  }
  
  /**
   * Checks the dirty status of the 'pts' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPtsDirty(java.lang.Integer value) {
    return isDirty(26);
  }

  /**
   * Gets the value of the 'plusMinus' field.
   */
  public java.lang.Integer getPlusMinus() {
    return plusMinus;
  }

  /**
   * Sets the value of the 'plusMinus' field.
   * @param value the value to set.
   */
  public void setPlusMinus(java.lang.Integer value) {
    this.plusMinus = value;
    setDirty(27);
  }
  
  /**
   * Checks the dirty status of the 'plusMinus' field. A field is dirty if it represents a change that has not yet been written to the database.
   * @param value the value to set.
   */
  public boolean isPlusMinusDirty(java.lang.Integer value) {
    return isDirty(27);
  }

  /** Creates a new PlayerStats RecordBuilder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder newBuilder() {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder();
  }
  
  /** Creates a new PlayerStats RecordBuilder by copying an existing Builder */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder(other);
  }
  
  /** Creates a new PlayerStats RecordBuilder by copying an existing PlayerStats instance */
  public static gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder newBuilder(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats other) {
    return new gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder(other);
  }
  
  private static java.nio.ByteBuffer deepCopyToReadOnlyBuffer(
      java.nio.ByteBuffer input) {
    java.nio.ByteBuffer copy = java.nio.ByteBuffer.allocate(input.capacity());
    int position = input.position();
    input.reset();
    int mark = input.position();
    int limit = input.limit();
    input.rewind();
    input.limit(input.capacity());
    copy.put(input);
    input.rewind();
    copy.rewind();
    input.position(mark);
    input.mark();
    copy.position(mark);
    copy.mark();
    input.position(position);
    copy.position(position);
    input.limit(limit);
    copy.limit(limit);
    return copy.asReadOnlyBuffer();
  }
  
  /**
   * RecordBuilder for PlayerStats instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlayerStats>
    implements org.apache.avro.data.RecordBuilder<PlayerStats> {

    private int gameId;
    private int teamId;
    private java.lang.CharSequence teamAbbreviation;
    private java.lang.CharSequence teamCity;
    private int playerId;
    private java.lang.CharSequence playerName;
    private java.lang.CharSequence startPosition;
    private java.lang.CharSequence comment;
    private java.lang.CharSequence min;
    private int fgm;
    private int fga;
    private long fgPct;
    private int fg3m;
    private int fg3a;
    private long fg3Pct;
    private int ftm;
    private int fta;
    private int ftPct;
    private int oreb;
    private int dreb;
    private int reb;
    private int ast;
    private int stl;
    private int blk;
    private int to;
    private int pf;
    private int pts;
    private int plusMinus;

    /** Creates a new Builder */
    private Builder() {
      super(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing PlayerStats instance */
    private Builder(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats other) {
            super(gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.SCHEMA$);
      if (isValidValue(fields()[0], other.gameId)) {
        this.gameId = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.gameId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.teamId)) {
        this.teamId = (java.lang.Integer) data().deepCopy(fields()[1].schema(), other.teamId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.teamAbbreviation)) {
        this.teamAbbreviation = (java.lang.CharSequence) data().deepCopy(fields()[2].schema(), other.teamAbbreviation);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.teamCity)) {
        this.teamCity = (java.lang.CharSequence) data().deepCopy(fields()[3].schema(), other.teamCity);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.playerId)) {
        this.playerId = (java.lang.Integer) data().deepCopy(fields()[4].schema(), other.playerId);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.playerName)) {
        this.playerName = (java.lang.CharSequence) data().deepCopy(fields()[5].schema(), other.playerName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.startPosition)) {
        this.startPosition = (java.lang.CharSequence) data().deepCopy(fields()[6].schema(), other.startPosition);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.comment)) {
        this.comment = (java.lang.CharSequence) data().deepCopy(fields()[7].schema(), other.comment);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.min)) {
        this.min = (java.lang.CharSequence) data().deepCopy(fields()[8].schema(), other.min);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.fgm)) {
        this.fgm = (java.lang.Integer) data().deepCopy(fields()[9].schema(), other.fgm);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.fga)) {
        this.fga = (java.lang.Integer) data().deepCopy(fields()[10].schema(), other.fga);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.fgPct)) {
        this.fgPct = (java.lang.Long) data().deepCopy(fields()[11].schema(), other.fgPct);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.fg3m)) {
        this.fg3m = (java.lang.Integer) data().deepCopy(fields()[12].schema(), other.fg3m);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.fg3a)) {
        this.fg3a = (java.lang.Integer) data().deepCopy(fields()[13].schema(), other.fg3a);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.fg3Pct)) {
        this.fg3Pct = (java.lang.Long) data().deepCopy(fields()[14].schema(), other.fg3Pct);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.ftm)) {
        this.ftm = (java.lang.Integer) data().deepCopy(fields()[15].schema(), other.ftm);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.fta)) {
        this.fta = (java.lang.Integer) data().deepCopy(fields()[16].schema(), other.fta);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.ftPct)) {
        this.ftPct = (java.lang.Integer) data().deepCopy(fields()[17].schema(), other.ftPct);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.oreb)) {
        this.oreb = (java.lang.Integer) data().deepCopy(fields()[18].schema(), other.oreb);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.dreb)) {
        this.dreb = (java.lang.Integer) data().deepCopy(fields()[19].schema(), other.dreb);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.reb)) {
        this.reb = (java.lang.Integer) data().deepCopy(fields()[20].schema(), other.reb);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.ast)) {
        this.ast = (java.lang.Integer) data().deepCopy(fields()[21].schema(), other.ast);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.stl)) {
        this.stl = (java.lang.Integer) data().deepCopy(fields()[22].schema(), other.stl);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.blk)) {
        this.blk = (java.lang.Integer) data().deepCopy(fields()[23].schema(), other.blk);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.to)) {
        this.to = (java.lang.Integer) data().deepCopy(fields()[24].schema(), other.to);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.pf)) {
        this.pf = (java.lang.Integer) data().deepCopy(fields()[25].schema(), other.pf);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.pts)) {
        this.pts = (java.lang.Integer) data().deepCopy(fields()[26].schema(), other.pts);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.plusMinus)) {
        this.plusMinus = (java.lang.Integer) data().deepCopy(fields()[27].schema(), other.plusMinus);
        fieldSetFlags()[27] = true;
      }
    }

    /** Gets the value of the 'gameId' field */
    public java.lang.Integer getGameId() {
      return gameId;
    }
    
    /** Sets the value of the 'gameId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setGameId(int value) {
      validate(fields()[0], value);
      this.gameId = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'gameId' field has been set */
    public boolean hasGameId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'gameId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearGameId() {
      fieldSetFlags()[0] = false;
      return this;
    }
    
    /** Gets the value of the 'teamId' field */
    public java.lang.Integer getTeamId() {
      return teamId;
    }
    
    /** Sets the value of the 'teamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setTeamId(int value) {
      validate(fields()[1], value);
      this.teamId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'teamId' field has been set */
    public boolean hasTeamId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'teamId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearTeamId() {
      fieldSetFlags()[1] = false;
      return this;
    }
    
    /** Gets the value of the 'teamAbbreviation' field */
    public java.lang.CharSequence getTeamAbbreviation() {
      return teamAbbreviation;
    }
    
    /** Sets the value of the 'teamAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setTeamAbbreviation(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.teamAbbreviation = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'teamAbbreviation' field has been set */
    public boolean hasTeamAbbreviation() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'teamAbbreviation' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearTeamAbbreviation() {
      teamAbbreviation = null;
      fieldSetFlags()[2] = false;
      return this;
    }
    
    /** Gets the value of the 'teamCity' field */
    public java.lang.CharSequence getTeamCity() {
      return teamCity;
    }
    
    /** Sets the value of the 'teamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setTeamCity(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.teamCity = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'teamCity' field has been set */
    public boolean hasTeamCity() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'teamCity' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearTeamCity() {
      teamCity = null;
      fieldSetFlags()[3] = false;
      return this;
    }
    
    /** Gets the value of the 'playerId' field */
    public java.lang.Integer getPlayerId() {
      return playerId;
    }
    
    /** Sets the value of the 'playerId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerId(int value) {
      validate(fields()[4], value);
      this.playerId = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'playerId' field has been set */
    public boolean hasPlayerId() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'playerId' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerId() {
      fieldSetFlags()[4] = false;
      return this;
    }
    
    /** Gets the value of the 'playerName' field */
    public java.lang.CharSequence getPlayerName() {
      return playerName;
    }
    
    /** Sets the value of the 'playerName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlayerName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.playerName = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'playerName' field has been set */
    public boolean hasPlayerName() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'playerName' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlayerName() {
      playerName = null;
      fieldSetFlags()[5] = false;
      return this;
    }
    
    /** Gets the value of the 'startPosition' field */
    public java.lang.CharSequence getStartPosition() {
      return startPosition;
    }
    
    /** Sets the value of the 'startPosition' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setStartPosition(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.startPosition = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'startPosition' field has been set */
    public boolean hasStartPosition() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'startPosition' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearStartPosition() {
      startPosition = null;
      fieldSetFlags()[6] = false;
      return this;
    }
    
    /** Gets the value of the 'comment' field */
    public java.lang.CharSequence getComment() {
      return comment;
    }
    
    /** Sets the value of the 'comment' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setComment(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.comment = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'comment' field has been set */
    public boolean hasComment() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'comment' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearComment() {
      comment = null;
      fieldSetFlags()[7] = false;
      return this;
    }
    
    /** Gets the value of the 'min' field */
    public java.lang.CharSequence getMin() {
      return min;
    }
    
    /** Sets the value of the 'min' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setMin(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.min = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'min' field has been set */
    public boolean hasMin() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'min' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearMin() {
      min = null;
      fieldSetFlags()[8] = false;
      return this;
    }
    
    /** Gets the value of the 'fgm' field */
    public java.lang.Integer getFgm() {
      return fgm;
    }
    
    /** Sets the value of the 'fgm' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setFgm(int value) {
      validate(fields()[9], value);
      this.fgm = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'fgm' field has been set */
    public boolean hasFgm() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'fgm' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearFgm() {
      fieldSetFlags()[9] = false;
      return this;
    }
    
    /** Gets the value of the 'fga' field */
    public java.lang.Integer getFga() {
      return fga;
    }
    
    /** Sets the value of the 'fga' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setFga(int value) {
      validate(fields()[10], value);
      this.fga = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'fga' field has been set */
    public boolean hasFga() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'fga' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearFga() {
      fieldSetFlags()[10] = false;
      return this;
    }
    
    /** Gets the value of the 'fgPct' field */
    public java.lang.Long getFgPct() {
      return fgPct;
    }
    
    /** Sets the value of the 'fgPct' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setFgPct(long value) {
      validate(fields()[11], value);
      this.fgPct = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'fgPct' field has been set */
    public boolean hasFgPct() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'fgPct' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearFgPct() {
      fieldSetFlags()[11] = false;
      return this;
    }
    
    /** Gets the value of the 'fg3m' field */
    public java.lang.Integer getFg3m() {
      return fg3m;
    }
    
    /** Sets the value of the 'fg3m' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setFg3m(int value) {
      validate(fields()[12], value);
      this.fg3m = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'fg3m' field has been set */
    public boolean hasFg3m() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'fg3m' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearFg3m() {
      fieldSetFlags()[12] = false;
      return this;
    }
    
    /** Gets the value of the 'fg3a' field */
    public java.lang.Integer getFg3a() {
      return fg3a;
    }
    
    /** Sets the value of the 'fg3a' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setFg3a(int value) {
      validate(fields()[13], value);
      this.fg3a = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'fg3a' field has been set */
    public boolean hasFg3a() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'fg3a' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearFg3a() {
      fieldSetFlags()[13] = false;
      return this;
    }
    
    /** Gets the value of the 'fg3Pct' field */
    public java.lang.Long getFg3Pct() {
      return fg3Pct;
    }
    
    /** Sets the value of the 'fg3Pct' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setFg3Pct(long value) {
      validate(fields()[14], value);
      this.fg3Pct = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'fg3Pct' field has been set */
    public boolean hasFg3Pct() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'fg3Pct' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearFg3Pct() {
      fieldSetFlags()[14] = false;
      return this;
    }
    
    /** Gets the value of the 'ftm' field */
    public java.lang.Integer getFtm() {
      return ftm;
    }
    
    /** Sets the value of the 'ftm' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setFtm(int value) {
      validate(fields()[15], value);
      this.ftm = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'ftm' field has been set */
    public boolean hasFtm() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'ftm' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearFtm() {
      fieldSetFlags()[15] = false;
      return this;
    }
    
    /** Gets the value of the 'fta' field */
    public java.lang.Integer getFta() {
      return fta;
    }
    
    /** Sets the value of the 'fta' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setFta(int value) {
      validate(fields()[16], value);
      this.fta = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'fta' field has been set */
    public boolean hasFta() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'fta' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearFta() {
      fieldSetFlags()[16] = false;
      return this;
    }
    
    /** Gets the value of the 'ftPct' field */
    public java.lang.Integer getFtPct() {
      return ftPct;
    }
    
    /** Sets the value of the 'ftPct' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setFtPct(int value) {
      validate(fields()[17], value);
      this.ftPct = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'ftPct' field has been set */
    public boolean hasFtPct() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'ftPct' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearFtPct() {
      fieldSetFlags()[17] = false;
      return this;
    }
    
    /** Gets the value of the 'oreb' field */
    public java.lang.Integer getOreb() {
      return oreb;
    }
    
    /** Sets the value of the 'oreb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setOreb(int value) {
      validate(fields()[18], value);
      this.oreb = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'oreb' field has been set */
    public boolean hasOreb() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'oreb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearOreb() {
      fieldSetFlags()[18] = false;
      return this;
    }
    
    /** Gets the value of the 'dreb' field */
    public java.lang.Integer getDreb() {
      return dreb;
    }
    
    /** Sets the value of the 'dreb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setDreb(int value) {
      validate(fields()[19], value);
      this.dreb = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'dreb' field has been set */
    public boolean hasDreb() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'dreb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearDreb() {
      fieldSetFlags()[19] = false;
      return this;
    }
    
    /** Gets the value of the 'reb' field */
    public java.lang.Integer getReb() {
      return reb;
    }
    
    /** Sets the value of the 'reb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setReb(int value) {
      validate(fields()[20], value);
      this.reb = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'reb' field has been set */
    public boolean hasReb() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'reb' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearReb() {
      fieldSetFlags()[20] = false;
      return this;
    }
    
    /** Gets the value of the 'ast' field */
    public java.lang.Integer getAst() {
      return ast;
    }
    
    /** Sets the value of the 'ast' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setAst(int value) {
      validate(fields()[21], value);
      this.ast = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'ast' field has been set */
    public boolean hasAst() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'ast' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearAst() {
      fieldSetFlags()[21] = false;
      return this;
    }
    
    /** Gets the value of the 'stl' field */
    public java.lang.Integer getStl() {
      return stl;
    }
    
    /** Sets the value of the 'stl' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setStl(int value) {
      validate(fields()[22], value);
      this.stl = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'stl' field has been set */
    public boolean hasStl() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'stl' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearStl() {
      fieldSetFlags()[22] = false;
      return this;
    }
    
    /** Gets the value of the 'blk' field */
    public java.lang.Integer getBlk() {
      return blk;
    }
    
    /** Sets the value of the 'blk' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setBlk(int value) {
      validate(fields()[23], value);
      this.blk = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'blk' field has been set */
    public boolean hasBlk() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'blk' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearBlk() {
      fieldSetFlags()[23] = false;
      return this;
    }
    
    /** Gets the value of the 'to' field */
    public java.lang.Integer getTo() {
      return to;
    }
    
    /** Sets the value of the 'to' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setTo(int value) {
      validate(fields()[24], value);
      this.to = value;
      fieldSetFlags()[24] = true;
      return this; 
    }
    
    /** Checks whether the 'to' field has been set */
    public boolean hasTo() {
      return fieldSetFlags()[24];
    }
    
    /** Clears the value of the 'to' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearTo() {
      fieldSetFlags()[24] = false;
      return this;
    }
    
    /** Gets the value of the 'pf' field */
    public java.lang.Integer getPf() {
      return pf;
    }
    
    /** Sets the value of the 'pf' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPf(int value) {
      validate(fields()[25], value);
      this.pf = value;
      fieldSetFlags()[25] = true;
      return this; 
    }
    
    /** Checks whether the 'pf' field has been set */
    public boolean hasPf() {
      return fieldSetFlags()[25];
    }
    
    /** Clears the value of the 'pf' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPf() {
      fieldSetFlags()[25] = false;
      return this;
    }
    
    /** Gets the value of the 'pts' field */
    public java.lang.Integer getPts() {
      return pts;
    }
    
    /** Sets the value of the 'pts' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPts(int value) {
      validate(fields()[26], value);
      this.pts = value;
      fieldSetFlags()[26] = true;
      return this; 
    }
    
    /** Checks whether the 'pts' field has been set */
    public boolean hasPts() {
      return fieldSetFlags()[26];
    }
    
    /** Clears the value of the 'pts' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPts() {
      fieldSetFlags()[26] = false;
      return this;
    }
    
    /** Gets the value of the 'plusMinus' field */
    public java.lang.Integer getPlusMinus() {
      return plusMinus;
    }
    
    /** Sets the value of the 'plusMinus' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder setPlusMinus(int value) {
      validate(fields()[27], value);
      this.plusMinus = value;
      fieldSetFlags()[27] = true;
      return this; 
    }
    
    /** Checks whether the 'plusMinus' field has been set */
    public boolean hasPlusMinus() {
      return fieldSetFlags()[27];
    }
    
    /** Clears the value of the 'plusMinus' field */
    public gov.nasa.jpl.xdata.nba.impoexpo.structs.PlayerStats.Builder clearPlusMinus() {
      fieldSetFlags()[27] = false;
      return this;
    }
    
    @Override
    public PlayerStats build() {
      try {
        PlayerStats record = new PlayerStats();
        record.gameId = fieldSetFlags()[0] ? this.gameId : (java.lang.Integer) defaultValue(fields()[0]);
        record.teamId = fieldSetFlags()[1] ? this.teamId : (java.lang.Integer) defaultValue(fields()[1]);
        record.teamAbbreviation = fieldSetFlags()[2] ? this.teamAbbreviation : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.teamCity = fieldSetFlags()[3] ? this.teamCity : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.playerId = fieldSetFlags()[4] ? this.playerId : (java.lang.Integer) defaultValue(fields()[4]);
        record.playerName = fieldSetFlags()[5] ? this.playerName : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.startPosition = fieldSetFlags()[6] ? this.startPosition : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.comment = fieldSetFlags()[7] ? this.comment : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.min = fieldSetFlags()[8] ? this.min : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.fgm = fieldSetFlags()[9] ? this.fgm : (java.lang.Integer) defaultValue(fields()[9]);
        record.fga = fieldSetFlags()[10] ? this.fga : (java.lang.Integer) defaultValue(fields()[10]);
        record.fgPct = fieldSetFlags()[11] ? this.fgPct : (java.lang.Long) defaultValue(fields()[11]);
        record.fg3m = fieldSetFlags()[12] ? this.fg3m : (java.lang.Integer) defaultValue(fields()[12]);
        record.fg3a = fieldSetFlags()[13] ? this.fg3a : (java.lang.Integer) defaultValue(fields()[13]);
        record.fg3Pct = fieldSetFlags()[14] ? this.fg3Pct : (java.lang.Long) defaultValue(fields()[14]);
        record.ftm = fieldSetFlags()[15] ? this.ftm : (java.lang.Integer) defaultValue(fields()[15]);
        record.fta = fieldSetFlags()[16] ? this.fta : (java.lang.Integer) defaultValue(fields()[16]);
        record.ftPct = fieldSetFlags()[17] ? this.ftPct : (java.lang.Integer) defaultValue(fields()[17]);
        record.oreb = fieldSetFlags()[18] ? this.oreb : (java.lang.Integer) defaultValue(fields()[18]);
        record.dreb = fieldSetFlags()[19] ? this.dreb : (java.lang.Integer) defaultValue(fields()[19]);
        record.reb = fieldSetFlags()[20] ? this.reb : (java.lang.Integer) defaultValue(fields()[20]);
        record.ast = fieldSetFlags()[21] ? this.ast : (java.lang.Integer) defaultValue(fields()[21]);
        record.stl = fieldSetFlags()[22] ? this.stl : (java.lang.Integer) defaultValue(fields()[22]);
        record.blk = fieldSetFlags()[23] ? this.blk : (java.lang.Integer) defaultValue(fields()[23]);
        record.to = fieldSetFlags()[24] ? this.to : (java.lang.Integer) defaultValue(fields()[24]);
        record.pf = fieldSetFlags()[25] ? this.pf : (java.lang.Integer) defaultValue(fields()[25]);
        record.pts = fieldSetFlags()[26] ? this.pts : (java.lang.Integer) defaultValue(fields()[26]);
        record.plusMinus = fieldSetFlags()[27] ? this.plusMinus : (java.lang.Integer) defaultValue(fields()[27]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
  
  public PlayerStats.Tombstone getTombstone(){
  	return TOMBSTONE;
  }

  public PlayerStats newInstance(){
    return newBuilder().build();
  }

  private static final Tombstone TOMBSTONE = new Tombstone();
  
  public static final class Tombstone extends PlayerStats implements org.apache.gora.persistency.Tombstone {
  
      private Tombstone() { }
  
	  		  /**
	   * Gets the value of the 'gameId' field.
		   */
	  public java.lang.Integer getGameId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'gameId' field.
		   * @param value the value to set.
	   */
	  public void setGameId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'gameId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isGameIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'teamId' field.
		   */
	  public java.lang.Integer getTeamId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'teamId' field.
		   * @param value the value to set.
	   */
	  public void setTeamId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'teamId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTeamIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'teamAbbreviation' field.
		   */
	  public java.lang.CharSequence getTeamAbbreviation() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'teamAbbreviation' field.
		   * @param value the value to set.
	   */
	  public void setTeamAbbreviation(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'teamAbbreviation' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTeamAbbreviationDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'teamCity' field.
		   */
	  public java.lang.CharSequence getTeamCity() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'teamCity' field.
		   * @param value the value to set.
	   */
	  public void setTeamCity(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'teamCity' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isTeamCityDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerId' field.
		   */
	  public java.lang.Integer getPlayerId() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerId' field.
		   * @param value the value to set.
	   */
	  public void setPlayerId(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerId' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerIdDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'playerName' field.
		   */
	  public java.lang.CharSequence getPlayerName() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'playerName' field.
		   * @param value the value to set.
	   */
	  public void setPlayerName(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'playerName' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlayerNameDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'startPosition' field.
		   */
	  public java.lang.CharSequence getStartPosition() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'startPosition' field.
		   * @param value the value to set.
	   */
	  public void setStartPosition(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'startPosition' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isStartPositionDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'comment' field.
		   */
	  public java.lang.CharSequence getComment() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'comment' field.
		   * @param value the value to set.
	   */
	  public void setComment(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'comment' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isCommentDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'min' field.
		   */
	  public java.lang.CharSequence getMin() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'min' field.
		   * @param value the value to set.
	   */
	  public void setMin(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'min' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isMinDirty(java.lang.CharSequence value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fgm' field.
		   */
	  public java.lang.Integer getFgm() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fgm' field.
		   * @param value the value to set.
	   */
	  public void setFgm(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fgm' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFgmDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fga' field.
		   */
	  public java.lang.Integer getFga() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fga' field.
		   * @param value the value to set.
	   */
	  public void setFga(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fga' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFgaDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fgPct' field.
		   */
	  public java.lang.Long getFgPct() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fgPct' field.
		   * @param value the value to set.
	   */
	  public void setFgPct(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fgPct' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFgPctDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fg3m' field.
		   */
	  public java.lang.Integer getFg3m() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fg3m' field.
		   * @param value the value to set.
	   */
	  public void setFg3m(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fg3m' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFg3mDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fg3a' field.
		   */
	  public java.lang.Integer getFg3a() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fg3a' field.
		   * @param value the value to set.
	   */
	  public void setFg3a(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fg3a' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFg3aDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fg3Pct' field.
		   */
	  public java.lang.Long getFg3Pct() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fg3Pct' field.
		   * @param value the value to set.
	   */
	  public void setFg3Pct(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fg3Pct' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFg3PctDirty(java.lang.Long value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'ftm' field.
		   */
	  public java.lang.Integer getFtm() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'ftm' field.
		   * @param value the value to set.
	   */
	  public void setFtm(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'ftm' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFtmDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'fta' field.
		   */
	  public java.lang.Integer getFta() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'fta' field.
		   * @param value the value to set.
	   */
	  public void setFta(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'fta' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFtaDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'ftPct' field.
		   */
	  public java.lang.Integer getFtPct() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'ftPct' field.
		   * @param value the value to set.
	   */
	  public void setFtPct(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'ftPct' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isFtPctDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'oreb' field.
		   */
	  public java.lang.Integer getOreb() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'oreb' field.
		   * @param value the value to set.
	   */
	  public void setOreb(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'oreb' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isOrebDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'dreb' field.
		   */
	  public java.lang.Integer getDreb() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'dreb' field.
		   * @param value the value to set.
	   */
	  public void setDreb(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'dreb' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isDrebDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'reb' field.
		   */
	  public java.lang.Integer getReb() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'reb' field.
		   * @param value the value to set.
	   */
	  public void setReb(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'reb' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isRebDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'ast' field.
		   */
	  public java.lang.Integer getAst() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'ast' field.
		   * @param value the value to set.
	   */
	  public void setAst(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'ast' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isAstDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'stl' field.
		   */
	  public java.lang.Integer getStl() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'stl' field.
		   * @param value the value to set.
	   */
	  public void setStl(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'stl' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isStlDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'blk' field.
		   */
	  public java.lang.Integer getBlk() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'blk' field.
		   * @param value the value to set.
	   */
	  public void setBlk(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'blk' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isBlkDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'to' field.
		   */
	  public java.lang.Integer getTo() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'to' field.
		   * @param value the value to set.
	   */
	  public void setTo(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'to' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isToDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'pf' field.
		   */
	  public java.lang.Integer getPf() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'pf' field.
		   * @param value the value to set.
	   */
	  public void setPf(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'pf' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPfDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'pts' field.
		   */
	  public java.lang.Integer getPts() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'pts' field.
		   * @param value the value to set.
	   */
	  public void setPts(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'pts' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPtsDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
				  /**
	   * Gets the value of the 'plusMinus' field.
		   */
	  public java.lang.Integer getPlusMinus() {
	    throw new java.lang.UnsupportedOperationException("Get is not supported on tombstones");
	  }
	
	  /**
	   * Sets the value of the 'plusMinus' field.
		   * @param value the value to set.
	   */
	  public void setPlusMinus(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("Set is not supported on tombstones");
	  }
	  
	  /**
	   * Checks the dirty status of the 'plusMinus' field. A field is dirty if it represents a change that has not yet been written to the database.
		   * @param value the value to set.
	   */
	  public boolean isPlusMinusDirty(java.lang.Integer value) {
	    throw new java.lang.UnsupportedOperationException("IsDirty is not supported on tombstones");
	  }
	
		  
  }
  
}

